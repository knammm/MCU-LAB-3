
STM32_Lab_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c90  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002d9c  08002d9c  00012d9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002dc0  08002dc0  00020050  2**0
                  CONTENTS
  4 .ARM          00000000  08002dc0  08002dc0  00020050  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002dc0  08002dc0  00020050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002dc0  08002dc0  00012dc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002dc4  08002dc4  00012dc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000050  20000000  08002dc8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000dc  20000050  08002e18  00020050  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000012c  08002e18  0002012c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY
 12 .debug_info   000098da  00000000  00000000  00020079  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b9c  00000000  00000000  00029953  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a48  00000000  00000000  0002b4f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000938  00000000  00000000  0002bf38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016f5e  00000000  00000000  0002c870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c31c  00000000  00000000  000437ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000824c8  00000000  00000000  0004faea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d1fb2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000287c  00000000  00000000  000d2008  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000050 	.word	0x20000050
 8000128:	00000000 	.word	0x00000000
 800012c:	08002d84 	.word	0x08002d84

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000054 	.word	0x20000054
 8000148:	08002d84 	.word	0x08002d84

0800014c <fsm_automatic_run>:
 */


#include "fsm_automatic.h"

void fsm_automatic_run(){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	switch(status){
 8000150:	4ba2      	ldr	r3, [pc, #648]	; (80003dc <fsm_automatic_run+0x290>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	3b01      	subs	r3, #1
 8000156:	2b17      	cmp	r3, #23
 8000158:	f200 8138 	bhi.w	80003cc <fsm_automatic_run+0x280>
 800015c:	a201      	add	r2, pc, #4	; (adr r2, 8000164 <fsm_automatic_run+0x18>)
 800015e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000162:	bf00      	nop
 8000164:	080001c5 	.word	0x080001c5
 8000168:	080003cd 	.word	0x080003cd
 800016c:	080003cd 	.word	0x080003cd
 8000170:	080003cd 	.word	0x080003cd
 8000174:	080003cd 	.word	0x080003cd
 8000178:	080003cd 	.word	0x080003cd
 800017c:	080003cd 	.word	0x080003cd
 8000180:	080003cd 	.word	0x080003cd
 8000184:	080003cd 	.word	0x080003cd
 8000188:	080003cd 	.word	0x080003cd
 800018c:	080003cd 	.word	0x080003cd
 8000190:	080003cd 	.word	0x080003cd
 8000194:	080003cd 	.word	0x080003cd
 8000198:	080003cd 	.word	0x080003cd
 800019c:	080003cd 	.word	0x080003cd
 80001a0:	080003cd 	.word	0x080003cd
 80001a4:	080003cd 	.word	0x080003cd
 80001a8:	080003cd 	.word	0x080003cd
 80001ac:	080003cd 	.word	0x080003cd
 80001b0:	080003cd 	.word	0x080003cd
 80001b4:	080001e1 	.word	0x080001e1
 80001b8:	0800024f 	.word	0x0800024f
 80001bc:	080002d9 	.word	0x080002d9
 80001c0:	08000345 	.word	0x08000345
	case INIT:
		//TODO
		status = RED_GREEN;
 80001c4:	4b85      	ldr	r3, [pc, #532]	; (80003dc <fsm_automatic_run+0x290>)
 80001c6:	2215      	movs	r2, #21
 80001c8:	601a      	str	r2, [r3, #0]
		setTimer(0, durationGREEN);
 80001ca:	4b85      	ldr	r3, [pc, #532]	; (80003e0 <fsm_automatic_run+0x294>)
 80001cc:	681b      	ldr	r3, [r3, #0]
 80001ce:	4619      	mov	r1, r3
 80001d0:	2000      	movs	r0, #0
 80001d2:	f001 f97d 	bl	80014d0 <setTimer>
		setTimerSecond(1000);
 80001d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001da:	f001 f95d 	bl	8001498 <setTimerSecond>
		break;
 80001de:	e110      	b.n	8000402 <fsm_automatic_run+0x2b6>
	case RED_GREEN:
		//TODO
		Traffic_setColor(1, AUTO_RED);
 80001e0:	2102      	movs	r1, #2
 80001e2:	2001      	movs	r0, #1
 80001e4:	f000 fb4a 	bl	800087c <Traffic_setColor>
		Traffic_setColor(2, AUTO_GREEN);
 80001e8:	2103      	movs	r1, #3
 80001ea:	2002      	movs	r0, #2
 80001ec:	f000 fb46 	bl	800087c <Traffic_setColor>
		if (timerSecond == 1){
 80001f0:	4b7c      	ldr	r3, [pc, #496]	; (80003e4 <fsm_automatic_run+0x298>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	2b01      	cmp	r3, #1
 80001f6:	d11b      	bne.n	8000230 <fsm_automatic_run+0xe4>
			setTimerSecond(1000);
 80001f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001fc:	f001 f94c 	bl	8001498 <setTimerSecond>
			timerTraffic1--;
 8000200:	4b79      	ldr	r3, [pc, #484]	; (80003e8 <fsm_automatic_run+0x29c>)
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	3b01      	subs	r3, #1
 8000206:	4a78      	ldr	r2, [pc, #480]	; (80003e8 <fsm_automatic_run+0x29c>)
 8000208:	6013      	str	r3, [r2, #0]
			timerTraffic2--;
 800020a:	4b78      	ldr	r3, [pc, #480]	; (80003ec <fsm_automatic_run+0x2a0>)
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	3b01      	subs	r3, #1
 8000210:	4a76      	ldr	r2, [pc, #472]	; (80003ec <fsm_automatic_run+0x2a0>)
 8000212:	6013      	str	r3, [r2, #0]
			if (timerTraffic2 <= 0) timerTraffic2 = durationYELLOW / 1000;
 8000214:	4b75      	ldr	r3, [pc, #468]	; (80003ec <fsm_automatic_run+0x2a0>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	2b00      	cmp	r3, #0
 800021a:	dc09      	bgt.n	8000230 <fsm_automatic_run+0xe4>
 800021c:	4b74      	ldr	r3, [pc, #464]	; (80003f0 <fsm_automatic_run+0x2a4>)
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	4a74      	ldr	r2, [pc, #464]	; (80003f4 <fsm_automatic_run+0x2a8>)
 8000222:	fb82 1203 	smull	r1, r2, r2, r3
 8000226:	1192      	asrs	r2, r2, #6
 8000228:	17db      	asrs	r3, r3, #31
 800022a:	1ad3      	subs	r3, r2, r3
 800022c:	4a6f      	ldr	r2, [pc, #444]	; (80003ec <fsm_automatic_run+0x2a0>)
 800022e:	6013      	str	r3, [r2, #0]
		}
		// State update
		if (timerFlag[0] == 1){
 8000230:	4b71      	ldr	r3, [pc, #452]	; (80003f8 <fsm_automatic_run+0x2ac>)
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	2b01      	cmp	r3, #1
 8000236:	f040 80cb 	bne.w	80003d0 <fsm_automatic_run+0x284>
			setTimer(0, durationYELLOW);
 800023a:	4b6d      	ldr	r3, [pc, #436]	; (80003f0 <fsm_automatic_run+0x2a4>)
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	4619      	mov	r1, r3
 8000240:	2000      	movs	r0, #0
 8000242:	f001 f945 	bl	80014d0 <setTimer>
			status = RED_YELLOW;
 8000246:	4b65      	ldr	r3, [pc, #404]	; (80003dc <fsm_automatic_run+0x290>)
 8000248:	2216      	movs	r2, #22
 800024a:	601a      	str	r2, [r3, #0]
		}
		break;
 800024c:	e0c0      	b.n	80003d0 <fsm_automatic_run+0x284>
	case RED_YELLOW:
		//TODO
		Traffic_setColor(1, AUTO_RED);
 800024e:	2102      	movs	r1, #2
 8000250:	2001      	movs	r0, #1
 8000252:	f000 fb13 	bl	800087c <Traffic_setColor>
		Traffic_setColor(2, AUTO_YELLOW);
 8000256:	2104      	movs	r1, #4
 8000258:	2002      	movs	r0, #2
 800025a:	f000 fb0f 	bl	800087c <Traffic_setColor>
		if (timerSecond == 1){
 800025e:	4b61      	ldr	r3, [pc, #388]	; (80003e4 <fsm_automatic_run+0x298>)
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	2b01      	cmp	r3, #1
 8000264:	d129      	bne.n	80002ba <fsm_automatic_run+0x16e>
			setTimerSecond(1000);
 8000266:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800026a:	f001 f915 	bl	8001498 <setTimerSecond>
			timerTraffic1--;
 800026e:	4b5e      	ldr	r3, [pc, #376]	; (80003e8 <fsm_automatic_run+0x29c>)
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	3b01      	subs	r3, #1
 8000274:	4a5c      	ldr	r2, [pc, #368]	; (80003e8 <fsm_automatic_run+0x29c>)
 8000276:	6013      	str	r3, [r2, #0]
			if (timerTraffic1 <= 0) timerTraffic1 = durationGREEN / 1000;
 8000278:	4b5b      	ldr	r3, [pc, #364]	; (80003e8 <fsm_automatic_run+0x29c>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	2b00      	cmp	r3, #0
 800027e:	dc09      	bgt.n	8000294 <fsm_automatic_run+0x148>
 8000280:	4b57      	ldr	r3, [pc, #348]	; (80003e0 <fsm_automatic_run+0x294>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	4a5b      	ldr	r2, [pc, #364]	; (80003f4 <fsm_automatic_run+0x2a8>)
 8000286:	fb82 1203 	smull	r1, r2, r2, r3
 800028a:	1192      	asrs	r2, r2, #6
 800028c:	17db      	asrs	r3, r3, #31
 800028e:	1ad3      	subs	r3, r2, r3
 8000290:	4a55      	ldr	r2, [pc, #340]	; (80003e8 <fsm_automatic_run+0x29c>)
 8000292:	6013      	str	r3, [r2, #0]
			timerTraffic2--;
 8000294:	4b55      	ldr	r3, [pc, #340]	; (80003ec <fsm_automatic_run+0x2a0>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	3b01      	subs	r3, #1
 800029a:	4a54      	ldr	r2, [pc, #336]	; (80003ec <fsm_automatic_run+0x2a0>)
 800029c:	6013      	str	r3, [r2, #0]
			if (timerTraffic2 <= 0) timerTraffic2 = durationRED / 1000;
 800029e:	4b53      	ldr	r3, [pc, #332]	; (80003ec <fsm_automatic_run+0x2a0>)
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	dc09      	bgt.n	80002ba <fsm_automatic_run+0x16e>
 80002a6:	4b55      	ldr	r3, [pc, #340]	; (80003fc <fsm_automatic_run+0x2b0>)
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	4a52      	ldr	r2, [pc, #328]	; (80003f4 <fsm_automatic_run+0x2a8>)
 80002ac:	fb82 1203 	smull	r1, r2, r2, r3
 80002b0:	1192      	asrs	r2, r2, #6
 80002b2:	17db      	asrs	r3, r3, #31
 80002b4:	1ad3      	subs	r3, r2, r3
 80002b6:	4a4d      	ldr	r2, [pc, #308]	; (80003ec <fsm_automatic_run+0x2a0>)
 80002b8:	6013      	str	r3, [r2, #0]
		}
		// State update
		if(timerFlag[0] == 1){
 80002ba:	4b4f      	ldr	r3, [pc, #316]	; (80003f8 <fsm_automatic_run+0x2ac>)
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	2b01      	cmp	r3, #1
 80002c0:	f040 8088 	bne.w	80003d4 <fsm_automatic_run+0x288>
			setTimer(0, durationGREEN);
 80002c4:	4b46      	ldr	r3, [pc, #280]	; (80003e0 <fsm_automatic_run+0x294>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	4619      	mov	r1, r3
 80002ca:	2000      	movs	r0, #0
 80002cc:	f001 f900 	bl	80014d0 <setTimer>
			status = GREEN_RED;
 80002d0:	4b42      	ldr	r3, [pc, #264]	; (80003dc <fsm_automatic_run+0x290>)
 80002d2:	2217      	movs	r2, #23
 80002d4:	601a      	str	r2, [r3, #0]
		}
		break;
 80002d6:	e07d      	b.n	80003d4 <fsm_automatic_run+0x288>
	case GREEN_RED:
		Traffic_setColor(1, AUTO_GREEN);
 80002d8:	2103      	movs	r1, #3
 80002da:	2001      	movs	r0, #1
 80002dc:	f000 face 	bl	800087c <Traffic_setColor>
		Traffic_setColor(2, AUTO_RED);
 80002e0:	2102      	movs	r1, #2
 80002e2:	2002      	movs	r0, #2
 80002e4:	f000 faca 	bl	800087c <Traffic_setColor>
		if (timerSecond == 1){
 80002e8:	4b3e      	ldr	r3, [pc, #248]	; (80003e4 <fsm_automatic_run+0x298>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	2b01      	cmp	r3, #1
 80002ee:	d11b      	bne.n	8000328 <fsm_automatic_run+0x1dc>
			setTimerSecond(1000);
 80002f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002f4:	f001 f8d0 	bl	8001498 <setTimerSecond>
			timerTraffic1--;
 80002f8:	4b3b      	ldr	r3, [pc, #236]	; (80003e8 <fsm_automatic_run+0x29c>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	3b01      	subs	r3, #1
 80002fe:	4a3a      	ldr	r2, [pc, #232]	; (80003e8 <fsm_automatic_run+0x29c>)
 8000300:	6013      	str	r3, [r2, #0]
			if (timerTraffic1 <= 0) timerTraffic1 = durationYELLOW / 1000;
 8000302:	4b39      	ldr	r3, [pc, #228]	; (80003e8 <fsm_automatic_run+0x29c>)
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	2b00      	cmp	r3, #0
 8000308:	dc09      	bgt.n	800031e <fsm_automatic_run+0x1d2>
 800030a:	4b39      	ldr	r3, [pc, #228]	; (80003f0 <fsm_automatic_run+0x2a4>)
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	4a39      	ldr	r2, [pc, #228]	; (80003f4 <fsm_automatic_run+0x2a8>)
 8000310:	fb82 1203 	smull	r1, r2, r2, r3
 8000314:	1192      	asrs	r2, r2, #6
 8000316:	17db      	asrs	r3, r3, #31
 8000318:	1ad3      	subs	r3, r2, r3
 800031a:	4a33      	ldr	r2, [pc, #204]	; (80003e8 <fsm_automatic_run+0x29c>)
 800031c:	6013      	str	r3, [r2, #0]
			timerTraffic2--;
 800031e:	4b33      	ldr	r3, [pc, #204]	; (80003ec <fsm_automatic_run+0x2a0>)
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	3b01      	subs	r3, #1
 8000324:	4a31      	ldr	r2, [pc, #196]	; (80003ec <fsm_automatic_run+0x2a0>)
 8000326:	6013      	str	r3, [r2, #0]
		}
		// State update
		if(timerFlag[0] == 1){
 8000328:	4b33      	ldr	r3, [pc, #204]	; (80003f8 <fsm_automatic_run+0x2ac>)
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	2b01      	cmp	r3, #1
 800032e:	d153      	bne.n	80003d8 <fsm_automatic_run+0x28c>
			setTimer(0, durationYELLOW);
 8000330:	4b2f      	ldr	r3, [pc, #188]	; (80003f0 <fsm_automatic_run+0x2a4>)
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	4619      	mov	r1, r3
 8000336:	2000      	movs	r0, #0
 8000338:	f001 f8ca 	bl	80014d0 <setTimer>
			status = YELLOW_RED;
 800033c:	4b27      	ldr	r3, [pc, #156]	; (80003dc <fsm_automatic_run+0x290>)
 800033e:	2218      	movs	r2, #24
 8000340:	601a      	str	r2, [r3, #0]
		}
		break;
 8000342:	e049      	b.n	80003d8 <fsm_automatic_run+0x28c>
	case YELLOW_RED:
		Traffic_setColor(1, AUTO_YELLOW);
 8000344:	2104      	movs	r1, #4
 8000346:	2001      	movs	r0, #1
 8000348:	f000 fa98 	bl	800087c <Traffic_setColor>
		Traffic_setColor(2, AUTO_RED);
 800034c:	2102      	movs	r1, #2
 800034e:	2002      	movs	r0, #2
 8000350:	f000 fa94 	bl	800087c <Traffic_setColor>
		if (timerSecond == 1){
 8000354:	4b23      	ldr	r3, [pc, #140]	; (80003e4 <fsm_automatic_run+0x298>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	2b01      	cmp	r3, #1
 800035a:	d129      	bne.n	80003b0 <fsm_automatic_run+0x264>
			setTimerSecond(1000);
 800035c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000360:	f001 f89a 	bl	8001498 <setTimerSecond>
			timerTraffic1--;
 8000364:	4b20      	ldr	r3, [pc, #128]	; (80003e8 <fsm_automatic_run+0x29c>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	3b01      	subs	r3, #1
 800036a:	4a1f      	ldr	r2, [pc, #124]	; (80003e8 <fsm_automatic_run+0x29c>)
 800036c:	6013      	str	r3, [r2, #0]
			if (timerTraffic1 <= 0) timerTraffic1 = durationRED / 1000;
 800036e:	4b1e      	ldr	r3, [pc, #120]	; (80003e8 <fsm_automatic_run+0x29c>)
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	2b00      	cmp	r3, #0
 8000374:	dc09      	bgt.n	800038a <fsm_automatic_run+0x23e>
 8000376:	4b21      	ldr	r3, [pc, #132]	; (80003fc <fsm_automatic_run+0x2b0>)
 8000378:	681b      	ldr	r3, [r3, #0]
 800037a:	4a1e      	ldr	r2, [pc, #120]	; (80003f4 <fsm_automatic_run+0x2a8>)
 800037c:	fb82 1203 	smull	r1, r2, r2, r3
 8000380:	1192      	asrs	r2, r2, #6
 8000382:	17db      	asrs	r3, r3, #31
 8000384:	1ad3      	subs	r3, r2, r3
 8000386:	4a18      	ldr	r2, [pc, #96]	; (80003e8 <fsm_automatic_run+0x29c>)
 8000388:	6013      	str	r3, [r2, #0]
			timerTraffic2--;
 800038a:	4b18      	ldr	r3, [pc, #96]	; (80003ec <fsm_automatic_run+0x2a0>)
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	3b01      	subs	r3, #1
 8000390:	4a16      	ldr	r2, [pc, #88]	; (80003ec <fsm_automatic_run+0x2a0>)
 8000392:	6013      	str	r3, [r2, #0]
			if (timerTraffic2 <= 0) timerTraffic2 = durationGREEN / 1000;
 8000394:	4b15      	ldr	r3, [pc, #84]	; (80003ec <fsm_automatic_run+0x2a0>)
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	2b00      	cmp	r3, #0
 800039a:	dc09      	bgt.n	80003b0 <fsm_automatic_run+0x264>
 800039c:	4b10      	ldr	r3, [pc, #64]	; (80003e0 <fsm_automatic_run+0x294>)
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	4a14      	ldr	r2, [pc, #80]	; (80003f4 <fsm_automatic_run+0x2a8>)
 80003a2:	fb82 1203 	smull	r1, r2, r2, r3
 80003a6:	1192      	asrs	r2, r2, #6
 80003a8:	17db      	asrs	r3, r3, #31
 80003aa:	1ad3      	subs	r3, r2, r3
 80003ac:	4a0f      	ldr	r2, [pc, #60]	; (80003ec <fsm_automatic_run+0x2a0>)
 80003ae:	6013      	str	r3, [r2, #0]
		}
		// State update
		if (timerFlag[0] == 1){
 80003b0:	4b11      	ldr	r3, [pc, #68]	; (80003f8 <fsm_automatic_run+0x2ac>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	2b01      	cmp	r3, #1
 80003b6:	d123      	bne.n	8000400 <fsm_automatic_run+0x2b4>
			setTimer(0, durationGREEN);
 80003b8:	4b09      	ldr	r3, [pc, #36]	; (80003e0 <fsm_automatic_run+0x294>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	4619      	mov	r1, r3
 80003be:	2000      	movs	r0, #0
 80003c0:	f001 f886 	bl	80014d0 <setTimer>
			status = RED_GREEN;
 80003c4:	4b05      	ldr	r3, [pc, #20]	; (80003dc <fsm_automatic_run+0x290>)
 80003c6:	2215      	movs	r2, #21
 80003c8:	601a      	str	r2, [r3, #0]
		}
		break;
 80003ca:	e019      	b.n	8000400 <fsm_automatic_run+0x2b4>
	default:
		break;
 80003cc:	bf00      	nop
 80003ce:	e018      	b.n	8000402 <fsm_automatic_run+0x2b6>
		break;
 80003d0:	bf00      	nop
 80003d2:	e016      	b.n	8000402 <fsm_automatic_run+0x2b6>
		break;
 80003d4:	bf00      	nop
 80003d6:	e014      	b.n	8000402 <fsm_automatic_run+0x2b6>
		break;
 80003d8:	bf00      	nop
 80003da:	e012      	b.n	8000402 <fsm_automatic_run+0x2b6>
 80003dc:	20000000 	.word	0x20000000
 80003e0:	2000000c 	.word	0x2000000c
 80003e4:	200000b4 	.word	0x200000b4
 80003e8:	2000006c 	.word	0x2000006c
 80003ec:	20000070 	.word	0x20000070
 80003f0:	20000008 	.word	0x20000008
 80003f4:	10624dd3 	.word	0x10624dd3
 80003f8:	200000bc 	.word	0x200000bc
 80003fc:	20000004 	.word	0x20000004
		break;
 8000400:	bf00      	nop
	}
	// MODE BUTTON
	if(isButtonPressed(0) == 1){
 8000402:	2000      	movs	r0, #0
 8000404:	f000 fe94 	bl	8001130 <isButtonPressed>
 8000408:	4603      	mov	r3, r0
 800040a:	2b01      	cmp	r3, #1
 800040c:	d147      	bne.n	800049e <fsm_automatic_run+0x352>
		if(status == RED_GREEN || status == RED_YELLOW || status == GREEN_RED || status == YELLOW_RED){
 800040e:	4b25      	ldr	r3, [pc, #148]	; (80004a4 <fsm_automatic_run+0x358>)
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	2b15      	cmp	r3, #21
 8000414:	d00b      	beq.n	800042e <fsm_automatic_run+0x2e2>
 8000416:	4b23      	ldr	r3, [pc, #140]	; (80004a4 <fsm_automatic_run+0x358>)
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	2b16      	cmp	r3, #22
 800041c:	d007      	beq.n	800042e <fsm_automatic_run+0x2e2>
 800041e:	4b21      	ldr	r3, [pc, #132]	; (80004a4 <fsm_automatic_run+0x358>)
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	2b17      	cmp	r3, #23
 8000424:	d003      	beq.n	800042e <fsm_automatic_run+0x2e2>
 8000426:	4b1f      	ldr	r3, [pc, #124]	; (80004a4 <fsm_automatic_run+0x358>)
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	2b18      	cmp	r3, #24
 800042c:	d134      	bne.n	8000498 <fsm_automatic_run+0x34c>
			status = MOD_RED;
 800042e:	4b1d      	ldr	r3, [pc, #116]	; (80004a4 <fsm_automatic_run+0x358>)
 8000430:	220b      	movs	r2, #11
 8000432:	601a      	str	r2, [r3, #0]
			setTimer(1, 100); // timer for blinky
 8000434:	2164      	movs	r1, #100	; 0x64
 8000436:	2001      	movs	r0, #1
 8000438:	f001 f84a 	bl	80014d0 <setTimer>
			Traffic_setColor(1, AUTO_RED);
 800043c:	2102      	movs	r1, #2
 800043e:	2001      	movs	r0, #1
 8000440:	f000 fa1c 	bl	800087c <Traffic_setColor>
			Traffic_setColor(2, AUTO_RED);
 8000444:	2102      	movs	r1, #2
 8000446:	2002      	movs	r0, #2
 8000448:	f000 fa18 	bl	800087c <Traffic_setColor>
			RED_sec = durationRED / 1000;
 800044c:	4b16      	ldr	r3, [pc, #88]	; (80004a8 <fsm_automatic_run+0x35c>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	4a16      	ldr	r2, [pc, #88]	; (80004ac <fsm_automatic_run+0x360>)
 8000452:	fb82 1203 	smull	r1, r2, r2, r3
 8000456:	1192      	asrs	r2, r2, #6
 8000458:	17db      	asrs	r3, r3, #31
 800045a:	1ad3      	subs	r3, r2, r3
 800045c:	4a14      	ldr	r2, [pc, #80]	; (80004b0 <fsm_automatic_run+0x364>)
 800045e:	6013      	str	r3, [r2, #0]
			YELLOW_sec = durationYELLOW / 1000;
 8000460:	4b14      	ldr	r3, [pc, #80]	; (80004b4 <fsm_automatic_run+0x368>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	4a11      	ldr	r2, [pc, #68]	; (80004ac <fsm_automatic_run+0x360>)
 8000466:	fb82 1203 	smull	r1, r2, r2, r3
 800046a:	1192      	asrs	r2, r2, #6
 800046c:	17db      	asrs	r3, r3, #31
 800046e:	1ad3      	subs	r3, r2, r3
 8000470:	4a11      	ldr	r2, [pc, #68]	; (80004b8 <fsm_automatic_run+0x36c>)
 8000472:	6013      	str	r3, [r2, #0]
			GREEN_sec = durationGREEN / 1000;
 8000474:	4b11      	ldr	r3, [pc, #68]	; (80004bc <fsm_automatic_run+0x370>)
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	4a0c      	ldr	r2, [pc, #48]	; (80004ac <fsm_automatic_run+0x360>)
 800047a:	fb82 1203 	smull	r1, r2, r2, r3
 800047e:	1192      	asrs	r2, r2, #6
 8000480:	17db      	asrs	r3, r3, #31
 8000482:	1ad3      	subs	r3, r2, r3
 8000484:	4a0e      	ldr	r2, [pc, #56]	; (80004c0 <fsm_automatic_run+0x374>)
 8000486:	6013      	str	r3, [r2, #0]
			timerTraffic1 = RED_sec;
 8000488:	4b09      	ldr	r3, [pc, #36]	; (80004b0 <fsm_automatic_run+0x364>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	4a0d      	ldr	r2, [pc, #52]	; (80004c4 <fsm_automatic_run+0x378>)
 800048e:	6013      	str	r3, [r2, #0]
			timerTraffic2 = 2;
 8000490:	4b0d      	ldr	r3, [pc, #52]	; (80004c8 <fsm_automatic_run+0x37c>)
 8000492:	2202      	movs	r2, #2
 8000494:	601a      	str	r2, [r3, #0]
		}
		else setBackButtonFlag(0);
	}

}
 8000496:	e002      	b.n	800049e <fsm_automatic_run+0x352>
		else setBackButtonFlag(0);
 8000498:	2000      	movs	r0, #0
 800049a:	f000 fe6b 	bl	8001174 <setBackButtonFlag>
}
 800049e:	bf00      	nop
 80004a0:	bd80      	pop	{r7, pc}
 80004a2:	bf00      	nop
 80004a4:	20000000 	.word	0x20000000
 80004a8:	20000004 	.word	0x20000004
 80004ac:	10624dd3 	.word	0x10624dd3
 80004b0:	200000dc 	.word	0x200000dc
 80004b4:	20000008 	.word	0x20000008
 80004b8:	200000d8 	.word	0x200000d8
 80004bc:	2000000c 	.word	0x2000000c
 80004c0:	200000d4 	.word	0x200000d4
 80004c4:	2000006c 	.word	0x2000006c
 80004c8:	20000070 	.word	0x20000070

080004cc <fsm_manual_run>:
 *      Author: olkmphy
 */

#include "fsm_manual.h"

void fsm_manual_run(){
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
	switch(status){
 80004d0:	4b9f      	ldr	r3, [pc, #636]	; (8000750 <fsm_manual_run+0x284>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	2b0d      	cmp	r3, #13
 80004d6:	f000 80b2 	beq.w	800063e <fsm_manual_run+0x172>
 80004da:	2b0d      	cmp	r3, #13
 80004dc:	f300 812e 	bgt.w	800073c <fsm_manual_run+0x270>
 80004e0:	2b0b      	cmp	r3, #11
 80004e2:	d002      	beq.n	80004ea <fsm_manual_run+0x1e>
 80004e4:	2b0c      	cmp	r3, #12
 80004e6:	d055      	beq.n	8000594 <fsm_manual_run+0xc8>
				led_index = 0;
				clearEN();
			}
			break;
		default:
			break;
 80004e8:	e128      	b.n	800073c <fsm_manual_run+0x270>
			if(timerFlag[1] == 1){
 80004ea:	4b9a      	ldr	r3, [pc, #616]	; (8000754 <fsm_manual_run+0x288>)
 80004ec:	685b      	ldr	r3, [r3, #4]
 80004ee:	2b01      	cmp	r3, #1
 80004f0:	d10b      	bne.n	800050a <fsm_manual_run+0x3e>
				setTimer(1, 250); // blink every 0.25s
 80004f2:	21fa      	movs	r1, #250	; 0xfa
 80004f4:	2001      	movs	r0, #1
 80004f6:	f000 ffeb 	bl	80014d0 <setTimer>
				blinkLEDs(TRAFFIC_1, AUTO_RED);
 80004fa:	2102      	movs	r1, #2
 80004fc:	2007      	movs	r0, #7
 80004fe:	f000 f94b 	bl	8000798 <blinkLEDs>
				blinkLEDs(TRAFFIC_2, AUTO_RED);
 8000502:	2102      	movs	r1, #2
 8000504:	2008      	movs	r0, #8
 8000506:	f000 f947 	bl	8000798 <blinkLEDs>
			if(isButtonPressed(1) == 1){
 800050a:	2001      	movs	r0, #1
 800050c:	f000 fe10 	bl	8001130 <isButtonPressed>
 8000510:	4603      	mov	r3, r0
 8000512:	2b01      	cmp	r3, #1
 8000514:	d114      	bne.n	8000540 <fsm_manual_run+0x74>
				RED_sec++;
 8000516:	4b90      	ldr	r3, [pc, #576]	; (8000758 <fsm_manual_run+0x28c>)
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	3301      	adds	r3, #1
 800051c:	4a8e      	ldr	r2, [pc, #568]	; (8000758 <fsm_manual_run+0x28c>)
 800051e:	6013      	str	r3, [r2, #0]
				if(RED_sec >= 100) {
 8000520:	4b8d      	ldr	r3, [pc, #564]	; (8000758 <fsm_manual_run+0x28c>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	2b63      	cmp	r3, #99	; 0x63
 8000526:	dd06      	ble.n	8000536 <fsm_manual_run+0x6a>
					RED_sec = 1;
 8000528:	4b8b      	ldr	r3, [pc, #556]	; (8000758 <fsm_manual_run+0x28c>)
 800052a:	2201      	movs	r2, #1
 800052c:	601a      	str	r2, [r3, #0]
					timerTraffic1 = 1;
 800052e:	4b8b      	ldr	r3, [pc, #556]	; (800075c <fsm_manual_run+0x290>)
 8000530:	2201      	movs	r2, #1
 8000532:	601a      	str	r2, [r3, #0]
 8000534:	e004      	b.n	8000540 <fsm_manual_run+0x74>
					timerTraffic1++;
 8000536:	4b89      	ldr	r3, [pc, #548]	; (800075c <fsm_manual_run+0x290>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	3301      	adds	r3, #1
 800053c:	4a87      	ldr	r2, [pc, #540]	; (800075c <fsm_manual_run+0x290>)
 800053e:	6013      	str	r3, [r2, #0]
			if(isButtonPressed(2) == 1){
 8000540:	2002      	movs	r0, #2
 8000542:	f000 fdf5 	bl	8001130 <isButtonPressed>
 8000546:	4603      	mov	r3, r0
 8000548:	2b01      	cmp	r3, #1
 800054a:	d107      	bne.n	800055c <fsm_manual_run+0x90>
				durationRED = RED_sec * 1000;
 800054c:	4b82      	ldr	r3, [pc, #520]	; (8000758 <fsm_manual_run+0x28c>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000554:	fb02 f303 	mul.w	r3, r2, r3
 8000558:	4a81      	ldr	r2, [pc, #516]	; (8000760 <fsm_manual_run+0x294>)
 800055a:	6013      	str	r3, [r2, #0]
			if(isButtonPressed(0) == 1){
 800055c:	2000      	movs	r0, #0
 800055e:	f000 fde7 	bl	8001130 <isButtonPressed>
 8000562:	4603      	mov	r3, r0
 8000564:	2b01      	cmp	r3, #1
 8000566:	f040 80eb 	bne.w	8000740 <fsm_manual_run+0x274>
				setTimer(1, 10);
 800056a:	210a      	movs	r1, #10
 800056c:	2001      	movs	r0, #1
 800056e:	f000 ffaf 	bl	80014d0 <setTimer>
				status = MOD_YELLOW;
 8000572:	4b77      	ldr	r3, [pc, #476]	; (8000750 <fsm_manual_run+0x284>)
 8000574:	220c      	movs	r2, #12
 8000576:	601a      	str	r2, [r3, #0]
				timerTraffic1 = durationYELLOW / 1000;
 8000578:	4b7a      	ldr	r3, [pc, #488]	; (8000764 <fsm_manual_run+0x298>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	4a7a      	ldr	r2, [pc, #488]	; (8000768 <fsm_manual_run+0x29c>)
 800057e:	fb82 1203 	smull	r1, r2, r2, r3
 8000582:	1192      	asrs	r2, r2, #6
 8000584:	17db      	asrs	r3, r3, #31
 8000586:	1ad3      	subs	r3, r2, r3
 8000588:	4a74      	ldr	r2, [pc, #464]	; (800075c <fsm_manual_run+0x290>)
 800058a:	6013      	str	r3, [r2, #0]
				timerTraffic2 = 3;
 800058c:	4b77      	ldr	r3, [pc, #476]	; (800076c <fsm_manual_run+0x2a0>)
 800058e:	2203      	movs	r2, #3
 8000590:	601a      	str	r2, [r3, #0]
			break;
 8000592:	e0d5      	b.n	8000740 <fsm_manual_run+0x274>
			if(timerFlag[1] == 1){
 8000594:	4b6f      	ldr	r3, [pc, #444]	; (8000754 <fsm_manual_run+0x288>)
 8000596:	685b      	ldr	r3, [r3, #4]
 8000598:	2b01      	cmp	r3, #1
 800059a:	d10b      	bne.n	80005b4 <fsm_manual_run+0xe8>
				setTimer(1, 250); // blink every 0.25s
 800059c:	21fa      	movs	r1, #250	; 0xfa
 800059e:	2001      	movs	r0, #1
 80005a0:	f000 ff96 	bl	80014d0 <setTimer>
				blinkLEDs(TRAFFIC_1, AUTO_YELLOW);
 80005a4:	2104      	movs	r1, #4
 80005a6:	2007      	movs	r0, #7
 80005a8:	f000 f8f6 	bl	8000798 <blinkLEDs>
				blinkLEDs(TRAFFIC_2, AUTO_YELLOW);
 80005ac:	2104      	movs	r1, #4
 80005ae:	2008      	movs	r0, #8
 80005b0:	f000 f8f2 	bl	8000798 <blinkLEDs>
			if(isButtonPressed(1) == 1){
 80005b4:	2001      	movs	r0, #1
 80005b6:	f000 fdbb 	bl	8001130 <isButtonPressed>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b01      	cmp	r3, #1
 80005be:	d114      	bne.n	80005ea <fsm_manual_run+0x11e>
				YELLOW_sec++;
 80005c0:	4b6b      	ldr	r3, [pc, #428]	; (8000770 <fsm_manual_run+0x2a4>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	3301      	adds	r3, #1
 80005c6:	4a6a      	ldr	r2, [pc, #424]	; (8000770 <fsm_manual_run+0x2a4>)
 80005c8:	6013      	str	r3, [r2, #0]
				if(YELLOW_sec >= 100) {
 80005ca:	4b69      	ldr	r3, [pc, #420]	; (8000770 <fsm_manual_run+0x2a4>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	2b63      	cmp	r3, #99	; 0x63
 80005d0:	dd06      	ble.n	80005e0 <fsm_manual_run+0x114>
					YELLOW_sec = 1;
 80005d2:	4b67      	ldr	r3, [pc, #412]	; (8000770 <fsm_manual_run+0x2a4>)
 80005d4:	2201      	movs	r2, #1
 80005d6:	601a      	str	r2, [r3, #0]
					timerTraffic1 = 1;
 80005d8:	4b60      	ldr	r3, [pc, #384]	; (800075c <fsm_manual_run+0x290>)
 80005da:	2201      	movs	r2, #1
 80005dc:	601a      	str	r2, [r3, #0]
 80005de:	e004      	b.n	80005ea <fsm_manual_run+0x11e>
					timerTraffic1++;
 80005e0:	4b5e      	ldr	r3, [pc, #376]	; (800075c <fsm_manual_run+0x290>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	3301      	adds	r3, #1
 80005e6:	4a5d      	ldr	r2, [pc, #372]	; (800075c <fsm_manual_run+0x290>)
 80005e8:	6013      	str	r3, [r2, #0]
			if(isButtonPressed(2) == 1){
 80005ea:	2002      	movs	r0, #2
 80005ec:	f000 fda0 	bl	8001130 <isButtonPressed>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b01      	cmp	r3, #1
 80005f4:	d107      	bne.n	8000606 <fsm_manual_run+0x13a>
				durationYELLOW = YELLOW_sec * 1000;
 80005f6:	4b5e      	ldr	r3, [pc, #376]	; (8000770 <fsm_manual_run+0x2a4>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005fe:	fb02 f303 	mul.w	r3, r2, r3
 8000602:	4a58      	ldr	r2, [pc, #352]	; (8000764 <fsm_manual_run+0x298>)
 8000604:	6013      	str	r3, [r2, #0]
			if(isButtonPressed(0) == 1){
 8000606:	2000      	movs	r0, #0
 8000608:	f000 fd92 	bl	8001130 <isButtonPressed>
 800060c:	4603      	mov	r3, r0
 800060e:	2b01      	cmp	r3, #1
 8000610:	f040 8098 	bne.w	8000744 <fsm_manual_run+0x278>
				setTimer(1, 10);
 8000614:	210a      	movs	r1, #10
 8000616:	2001      	movs	r0, #1
 8000618:	f000 ff5a 	bl	80014d0 <setTimer>
				status = MOD_GREEN;
 800061c:	4b4c      	ldr	r3, [pc, #304]	; (8000750 <fsm_manual_run+0x284>)
 800061e:	220d      	movs	r2, #13
 8000620:	601a      	str	r2, [r3, #0]
				timerTraffic1 = durationGREEN / 1000;
 8000622:	4b54      	ldr	r3, [pc, #336]	; (8000774 <fsm_manual_run+0x2a8>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	4a50      	ldr	r2, [pc, #320]	; (8000768 <fsm_manual_run+0x29c>)
 8000628:	fb82 1203 	smull	r1, r2, r2, r3
 800062c:	1192      	asrs	r2, r2, #6
 800062e:	17db      	asrs	r3, r3, #31
 8000630:	1ad3      	subs	r3, r2, r3
 8000632:	4a4a      	ldr	r2, [pc, #296]	; (800075c <fsm_manual_run+0x290>)
 8000634:	6013      	str	r3, [r2, #0]
				timerTraffic2 = 4;
 8000636:	4b4d      	ldr	r3, [pc, #308]	; (800076c <fsm_manual_run+0x2a0>)
 8000638:	2204      	movs	r2, #4
 800063a:	601a      	str	r2, [r3, #0]
			break;
 800063c:	e082      	b.n	8000744 <fsm_manual_run+0x278>
			if(timerFlag[1] == 1){
 800063e:	4b45      	ldr	r3, [pc, #276]	; (8000754 <fsm_manual_run+0x288>)
 8000640:	685b      	ldr	r3, [r3, #4]
 8000642:	2b01      	cmp	r3, #1
 8000644:	d10b      	bne.n	800065e <fsm_manual_run+0x192>
				setTimer(1, 250); // blink every 0.25s
 8000646:	21fa      	movs	r1, #250	; 0xfa
 8000648:	2001      	movs	r0, #1
 800064a:	f000 ff41 	bl	80014d0 <setTimer>
				blinkLEDs(TRAFFIC_1, AUTO_GREEN);
 800064e:	2103      	movs	r1, #3
 8000650:	2007      	movs	r0, #7
 8000652:	f000 f8a1 	bl	8000798 <blinkLEDs>
				blinkLEDs(TRAFFIC_2, AUTO_GREEN);
 8000656:	2103      	movs	r1, #3
 8000658:	2008      	movs	r0, #8
 800065a:	f000 f89d 	bl	8000798 <blinkLEDs>
			if(isButtonPressed(1) == 1){
 800065e:	2001      	movs	r0, #1
 8000660:	f000 fd66 	bl	8001130 <isButtonPressed>
 8000664:	4603      	mov	r3, r0
 8000666:	2b01      	cmp	r3, #1
 8000668:	d114      	bne.n	8000694 <fsm_manual_run+0x1c8>
				GREEN_sec++;
 800066a:	4b43      	ldr	r3, [pc, #268]	; (8000778 <fsm_manual_run+0x2ac>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	3301      	adds	r3, #1
 8000670:	4a41      	ldr	r2, [pc, #260]	; (8000778 <fsm_manual_run+0x2ac>)
 8000672:	6013      	str	r3, [r2, #0]
				if(GREEN_sec >= 100){
 8000674:	4b40      	ldr	r3, [pc, #256]	; (8000778 <fsm_manual_run+0x2ac>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	2b63      	cmp	r3, #99	; 0x63
 800067a:	dd06      	ble.n	800068a <fsm_manual_run+0x1be>
					GREEN_sec = 1;
 800067c:	4b3e      	ldr	r3, [pc, #248]	; (8000778 <fsm_manual_run+0x2ac>)
 800067e:	2201      	movs	r2, #1
 8000680:	601a      	str	r2, [r3, #0]
					timerTraffic1 = 1;
 8000682:	4b36      	ldr	r3, [pc, #216]	; (800075c <fsm_manual_run+0x290>)
 8000684:	2201      	movs	r2, #1
 8000686:	601a      	str	r2, [r3, #0]
 8000688:	e004      	b.n	8000694 <fsm_manual_run+0x1c8>
					timerTraffic1++;
 800068a:	4b34      	ldr	r3, [pc, #208]	; (800075c <fsm_manual_run+0x290>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	3301      	adds	r3, #1
 8000690:	4a32      	ldr	r2, [pc, #200]	; (800075c <fsm_manual_run+0x290>)
 8000692:	6013      	str	r3, [r2, #0]
			if(isButtonPressed(2)){
 8000694:	2002      	movs	r0, #2
 8000696:	f000 fd4b 	bl	8001130 <isButtonPressed>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d00e      	beq.n	80006be <fsm_manual_run+0x1f2>
				durationGREEN = GREEN_sec * 1000;
 80006a0:	4b35      	ldr	r3, [pc, #212]	; (8000778 <fsm_manual_run+0x2ac>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80006a8:	fb02 f303 	mul.w	r3, r2, r3
 80006ac:	4a31      	ldr	r2, [pc, #196]	; (8000774 <fsm_manual_run+0x2a8>)
 80006ae:	6013      	str	r3, [r2, #0]
				durationYELLOW = durationRED - durationGREEN;
 80006b0:	4b2b      	ldr	r3, [pc, #172]	; (8000760 <fsm_manual_run+0x294>)
 80006b2:	681a      	ldr	r2, [r3, #0]
 80006b4:	4b2f      	ldr	r3, [pc, #188]	; (8000774 <fsm_manual_run+0x2a8>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	1ad3      	subs	r3, r2, r3
 80006ba:	4a2a      	ldr	r2, [pc, #168]	; (8000764 <fsm_manual_run+0x298>)
 80006bc:	6013      	str	r3, [r2, #0]
			if(isButtonPressed(0) == 1){
 80006be:	2000      	movs	r0, #0
 80006c0:	f000 fd36 	bl	8001130 <isButtonPressed>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b01      	cmp	r3, #1
 80006c8:	d13e      	bne.n	8000748 <fsm_manual_run+0x27c>
				status = RED_GREEN;
 80006ca:	4b21      	ldr	r3, [pc, #132]	; (8000750 <fsm_manual_run+0x284>)
 80006cc:	2215      	movs	r2, #21
 80006ce:	601a      	str	r2, [r3, #0]
				durationGREEN = durationRED - durationYELLOW;
 80006d0:	4b23      	ldr	r3, [pc, #140]	; (8000760 <fsm_manual_run+0x294>)
 80006d2:	681a      	ldr	r2, [r3, #0]
 80006d4:	4b23      	ldr	r3, [pc, #140]	; (8000764 <fsm_manual_run+0x298>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	1ad3      	subs	r3, r2, r3
 80006da:	4a26      	ldr	r2, [pc, #152]	; (8000774 <fsm_manual_run+0x2a8>)
 80006dc:	6013      	str	r3, [r2, #0]
				timerTraffic1 = durationRED / 1000;
 80006de:	4b20      	ldr	r3, [pc, #128]	; (8000760 <fsm_manual_run+0x294>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	4a21      	ldr	r2, [pc, #132]	; (8000768 <fsm_manual_run+0x29c>)
 80006e4:	fb82 1203 	smull	r1, r2, r2, r3
 80006e8:	1192      	asrs	r2, r2, #6
 80006ea:	17db      	asrs	r3, r3, #31
 80006ec:	1ad3      	subs	r3, r2, r3
 80006ee:	4a1b      	ldr	r2, [pc, #108]	; (800075c <fsm_manual_run+0x290>)
 80006f0:	6013      	str	r3, [r2, #0]
				timerTraffic2 = durationGREEN / 1000;
 80006f2:	4b20      	ldr	r3, [pc, #128]	; (8000774 <fsm_manual_run+0x2a8>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	4a1c      	ldr	r2, [pc, #112]	; (8000768 <fsm_manual_run+0x29c>)
 80006f8:	fb82 1203 	smull	r1, r2, r2, r3
 80006fc:	1192      	asrs	r2, r2, #6
 80006fe:	17db      	asrs	r3, r3, #31
 8000700:	1ad3      	subs	r3, r2, r3
 8000702:	4a1a      	ldr	r2, [pc, #104]	; (800076c <fsm_manual_run+0x2a0>)
 8000704:	6013      	str	r3, [r2, #0]
				updateBuffer(timerTraffic1, timerTraffic2);
 8000706:	4b15      	ldr	r3, [pc, #84]	; (800075c <fsm_manual_run+0x290>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	4a18      	ldr	r2, [pc, #96]	; (800076c <fsm_manual_run+0x2a0>)
 800070c:	6812      	ldr	r2, [r2, #0]
 800070e:	4611      	mov	r1, r2
 8000710:	4618      	mov	r0, r3
 8000712:	f000 fc3f 	bl	8000f94 <updateBuffer>
				setTimer(0, durationGREEN);
 8000716:	4b17      	ldr	r3, [pc, #92]	; (8000774 <fsm_manual_run+0x2a8>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	4619      	mov	r1, r3
 800071c:	2000      	movs	r0, #0
 800071e:	f000 fed7 	bl	80014d0 <setTimer>
				setTimerSecond(1000);
 8000722:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000726:	f000 feb7 	bl	8001498 <setTimerSecond>
				setTimer7SEG(10);
 800072a:	200a      	movs	r0, #10
 800072c:	f000 fe98 	bl	8001460 <setTimer7SEG>
				led_index = 0;
 8000730:	4b12      	ldr	r3, [pc, #72]	; (800077c <fsm_manual_run+0x2b0>)
 8000732:	2200      	movs	r2, #0
 8000734:	601a      	str	r2, [r3, #0]
				clearEN();
 8000736:	f000 f823 	bl	8000780 <clearEN>
			break;
 800073a:	e005      	b.n	8000748 <fsm_manual_run+0x27c>
			break;
 800073c:	bf00      	nop
 800073e:	e004      	b.n	800074a <fsm_manual_run+0x27e>
			break;
 8000740:	bf00      	nop
 8000742:	e002      	b.n	800074a <fsm_manual_run+0x27e>
			break;
 8000744:	bf00      	nop
 8000746:	e000      	b.n	800074a <fsm_manual_run+0x27e>
			break;
 8000748:	bf00      	nop
	}
}
 800074a:	bf00      	nop
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	20000000 	.word	0x20000000
 8000754:	200000bc 	.word	0x200000bc
 8000758:	200000dc 	.word	0x200000dc
 800075c:	2000006c 	.word	0x2000006c
 8000760:	20000004 	.word	0x20000004
 8000764:	20000008 	.word	0x20000008
 8000768:	10624dd3 	.word	0x10624dd3
 800076c:	20000070 	.word	0x20000070
 8000770:	200000d8 	.word	0x200000d8
 8000774:	2000000c 	.word	0x2000000c
 8000778:	200000d4 	.word	0x200000d4
 800077c:	20000074 	.word	0x20000074

08000780 <clearEN>:

#include <handle_leds.h>

int led_buffer[4] = {0, 0, 0, 0};

void clearEN(){
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, EN0_Pin | EN1_Pin | EN2_Pin | EN3_Pin, SET);
 8000784:	2210      	movs	r2, #16
 8000786:	21f0      	movs	r1, #240	; 0xf0
 8000788:	4802      	ldr	r0, [pc, #8]	; (8000794 <clearEN+0x14>)
 800078a:	f001 fada 	bl	8001d42 <HAL_GPIO_WritePin>
}
 800078e:	bf00      	nop
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	40010800 	.word	0x40010800

08000798 <blinkLEDs>:
//void openAllLEDs();
void blinkLEDs(int traffic, int color){
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
 80007a0:	6039      	str	r1, [r7, #0]
	if(traffic == TRAFFIC_1){
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	2b07      	cmp	r3, #7
 80007a6:	d12a      	bne.n	80007fe <blinkLEDs+0x66>
		switch(color){
 80007a8:	683b      	ldr	r3, [r7, #0]
 80007aa:	2b04      	cmp	r3, #4
 80007ac:	d013      	beq.n	80007d6 <blinkLEDs+0x3e>
 80007ae:	683b      	ldr	r3, [r7, #0]
 80007b0:	2b04      	cmp	r3, #4
 80007b2:	dc58      	bgt.n	8000866 <blinkLEDs+0xce>
 80007b4:	683b      	ldr	r3, [r7, #0]
 80007b6:	2b02      	cmp	r3, #2
 80007b8:	d003      	beq.n	80007c2 <blinkLEDs+0x2a>
 80007ba:	683b      	ldr	r3, [r7, #0]
 80007bc:	2b03      	cmp	r3, #3
 80007be:	d014      	beq.n	80007ea <blinkLEDs+0x52>
			case AUTO_GREEN:
				HAL_GPIO_TogglePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin);
				HAL_GPIO_WritePin(GPIOA, LED_YELLOW_1_Pin | LED_RED_1_Pin, RESET);
				break;
			default:
				break;
 80007c0:	e051      	b.n	8000866 <blinkLEDs+0xce>
				HAL_GPIO_TogglePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin);
 80007c2:	2102      	movs	r1, #2
 80007c4:	482c      	ldr	r0, [pc, #176]	; (8000878 <blinkLEDs+0xe0>)
 80007c6:	f001 fad4 	bl	8001d72 <HAL_GPIO_TogglePin>
				HAL_GPIO_WritePin(GPIOA, LED_YELLOW_1_Pin | LED_GREEN_1_Pin, RESET);
 80007ca:	2200      	movs	r2, #0
 80007cc:	210c      	movs	r1, #12
 80007ce:	482a      	ldr	r0, [pc, #168]	; (8000878 <blinkLEDs+0xe0>)
 80007d0:	f001 fab7 	bl	8001d42 <HAL_GPIO_WritePin>
				break;
 80007d4:	e04c      	b.n	8000870 <blinkLEDs+0xd8>
				HAL_GPIO_TogglePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin);
 80007d6:	2104      	movs	r1, #4
 80007d8:	4827      	ldr	r0, [pc, #156]	; (8000878 <blinkLEDs+0xe0>)
 80007da:	f001 faca 	bl	8001d72 <HAL_GPIO_TogglePin>
				HAL_GPIO_WritePin(GPIOA, LED_RED_1_Pin | LED_GREEN_1_Pin, RESET);
 80007de:	2200      	movs	r2, #0
 80007e0:	210a      	movs	r1, #10
 80007e2:	4825      	ldr	r0, [pc, #148]	; (8000878 <blinkLEDs+0xe0>)
 80007e4:	f001 faad 	bl	8001d42 <HAL_GPIO_WritePin>
				break;
 80007e8:	e042      	b.n	8000870 <blinkLEDs+0xd8>
				HAL_GPIO_TogglePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin);
 80007ea:	2108      	movs	r1, #8
 80007ec:	4822      	ldr	r0, [pc, #136]	; (8000878 <blinkLEDs+0xe0>)
 80007ee:	f001 fac0 	bl	8001d72 <HAL_GPIO_TogglePin>
				HAL_GPIO_WritePin(GPIOA, LED_YELLOW_1_Pin | LED_RED_1_Pin, RESET);
 80007f2:	2200      	movs	r2, #0
 80007f4:	2106      	movs	r1, #6
 80007f6:	4820      	ldr	r0, [pc, #128]	; (8000878 <blinkLEDs+0xe0>)
 80007f8:	f001 faa3 	bl	8001d42 <HAL_GPIO_WritePin>
				break;
 80007fc:	e038      	b.n	8000870 <blinkLEDs+0xd8>
		}
	}
	else if(traffic == TRAFFIC_2){
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	2b08      	cmp	r3, #8
 8000802:	d132      	bne.n	800086a <blinkLEDs+0xd2>
		switch(color){
 8000804:	683b      	ldr	r3, [r7, #0]
 8000806:	2b04      	cmp	r3, #4
 8000808:	d015      	beq.n	8000836 <blinkLEDs+0x9e>
 800080a:	683b      	ldr	r3, [r7, #0]
 800080c:	2b04      	cmp	r3, #4
 800080e:	dc2e      	bgt.n	800086e <blinkLEDs+0xd6>
 8000810:	683b      	ldr	r3, [r7, #0]
 8000812:	2b02      	cmp	r3, #2
 8000814:	d003      	beq.n	800081e <blinkLEDs+0x86>
 8000816:	683b      	ldr	r3, [r7, #0]
 8000818:	2b03      	cmp	r3, #3
 800081a:	d018      	beq.n	800084e <blinkLEDs+0xb6>
			case AUTO_GREEN:
				HAL_GPIO_TogglePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin);
				HAL_GPIO_WritePin(GPIOA, LED_YELLOW_2_Pin | LED_RED_2_Pin, RESET);
				break;
			default:
				break;
 800081c:	e027      	b.n	800086e <blinkLEDs+0xd6>
				HAL_GPIO_TogglePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin);
 800081e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000822:	4815      	ldr	r0, [pc, #84]	; (8000878 <blinkLEDs+0xe0>)
 8000824:	f001 faa5 	bl	8001d72 <HAL_GPIO_TogglePin>
				HAL_GPIO_WritePin(GPIOA, LED_YELLOW_2_Pin | LED_GREEN_2_Pin, RESET);
 8000828:	2200      	movs	r2, #0
 800082a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800082e:	4812      	ldr	r0, [pc, #72]	; (8000878 <blinkLEDs+0xe0>)
 8000830:	f001 fa87 	bl	8001d42 <HAL_GPIO_WritePin>
				break;
 8000834:	e01c      	b.n	8000870 <blinkLEDs+0xd8>
				HAL_GPIO_TogglePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin);
 8000836:	f44f 7100 	mov.w	r1, #512	; 0x200
 800083a:	480f      	ldr	r0, [pc, #60]	; (8000878 <blinkLEDs+0xe0>)
 800083c:	f001 fa99 	bl	8001d72 <HAL_GPIO_TogglePin>
				HAL_GPIO_WritePin(GPIOA, LED_RED_2_Pin | LED_GREEN_2_Pin, RESET);
 8000840:	2200      	movs	r2, #0
 8000842:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8000846:	480c      	ldr	r0, [pc, #48]	; (8000878 <blinkLEDs+0xe0>)
 8000848:	f001 fa7b 	bl	8001d42 <HAL_GPIO_WritePin>
				break;
 800084c:	e010      	b.n	8000870 <blinkLEDs+0xd8>
				HAL_GPIO_TogglePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin);
 800084e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000852:	4809      	ldr	r0, [pc, #36]	; (8000878 <blinkLEDs+0xe0>)
 8000854:	f001 fa8d 	bl	8001d72 <HAL_GPIO_TogglePin>
				HAL_GPIO_WritePin(GPIOA, LED_YELLOW_2_Pin | LED_RED_2_Pin, RESET);
 8000858:	2200      	movs	r2, #0
 800085a:	f44f 7140 	mov.w	r1, #768	; 0x300
 800085e:	4806      	ldr	r0, [pc, #24]	; (8000878 <blinkLEDs+0xe0>)
 8000860:	f001 fa6f 	bl	8001d42 <HAL_GPIO_WritePin>
				break;
 8000864:	e004      	b.n	8000870 <blinkLEDs+0xd8>
				break;
 8000866:	bf00      	nop
 8000868:	e002      	b.n	8000870 <blinkLEDs+0xd8>
		}
	}
 800086a:	bf00      	nop
 800086c:	e000      	b.n	8000870 <blinkLEDs+0xd8>
				break;
 800086e:	bf00      	nop
}
 8000870:	bf00      	nop
 8000872:	3708      	adds	r7, #8
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	40010800 	.word	0x40010800

0800087c <Traffic_setColor>:

void Traffic_setColor(int option, int color){
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
 8000884:	6039      	str	r1, [r7, #0]
	if(option == 1){
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	2b01      	cmp	r3, #1
 800088a:	d12d      	bne.n	80008e8 <Traffic_setColor+0x6c>
		switch(color){
 800088c:	683b      	ldr	r3, [r7, #0]
 800088e:	2b04      	cmp	r3, #4
 8000890:	d014      	beq.n	80008bc <Traffic_setColor+0x40>
 8000892:	683b      	ldr	r3, [r7, #0]
 8000894:	2b04      	cmp	r3, #4
 8000896:	dc5e      	bgt.n	8000956 <Traffic_setColor+0xda>
 8000898:	683b      	ldr	r3, [r7, #0]
 800089a:	2b02      	cmp	r3, #2
 800089c:	d003      	beq.n	80008a6 <Traffic_setColor+0x2a>
 800089e:	683b      	ldr	r3, [r7, #0]
 80008a0:	2b03      	cmp	r3, #3
 80008a2:	d016      	beq.n	80008d2 <Traffic_setColor+0x56>
			case AUTO_GREEN:
				HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, SET);
				HAL_GPIO_WritePin(GPIOA, LED_YELLOW_1_Pin | LED_RED_1_Pin, RESET);
				break;
			default:
				break;
 80008a4:	e057      	b.n	8000956 <Traffic_setColor+0xda>
				HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, SET);
 80008a6:	2210      	movs	r2, #16
 80008a8:	2102      	movs	r1, #2
 80008aa:	482f      	ldr	r0, [pc, #188]	; (8000968 <Traffic_setColor+0xec>)
 80008ac:	f001 fa49 	bl	8001d42 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, LED_YELLOW_1_Pin | LED_GREEN_1_Pin, RESET);
 80008b0:	2200      	movs	r2, #0
 80008b2:	210c      	movs	r1, #12
 80008b4:	482c      	ldr	r0, [pc, #176]	; (8000968 <Traffic_setColor+0xec>)
 80008b6:	f001 fa44 	bl	8001d42 <HAL_GPIO_WritePin>
				break;
 80008ba:	e051      	b.n	8000960 <Traffic_setColor+0xe4>
				HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, SET);
 80008bc:	2210      	movs	r2, #16
 80008be:	2104      	movs	r1, #4
 80008c0:	4829      	ldr	r0, [pc, #164]	; (8000968 <Traffic_setColor+0xec>)
 80008c2:	f001 fa3e 	bl	8001d42 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, LED_RED_1_Pin | LED_GREEN_1_Pin, RESET);
 80008c6:	2200      	movs	r2, #0
 80008c8:	210a      	movs	r1, #10
 80008ca:	4827      	ldr	r0, [pc, #156]	; (8000968 <Traffic_setColor+0xec>)
 80008cc:	f001 fa39 	bl	8001d42 <HAL_GPIO_WritePin>
				break;
 80008d0:	e046      	b.n	8000960 <Traffic_setColor+0xe4>
				HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, SET);
 80008d2:	2210      	movs	r2, #16
 80008d4:	2108      	movs	r1, #8
 80008d6:	4824      	ldr	r0, [pc, #144]	; (8000968 <Traffic_setColor+0xec>)
 80008d8:	f001 fa33 	bl	8001d42 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, LED_YELLOW_1_Pin | LED_RED_1_Pin, RESET);
 80008dc:	2200      	movs	r2, #0
 80008de:	2106      	movs	r1, #6
 80008e0:	4821      	ldr	r0, [pc, #132]	; (8000968 <Traffic_setColor+0xec>)
 80008e2:	f001 fa2e 	bl	8001d42 <HAL_GPIO_WritePin>
				break;
 80008e6:	e03b      	b.n	8000960 <Traffic_setColor+0xe4>
		}
	}
	else if(option == 2){
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	2b02      	cmp	r3, #2
 80008ec:	d135      	bne.n	800095a <Traffic_setColor+0xde>
		switch(color){
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	2b04      	cmp	r3, #4
 80008f2:	d016      	beq.n	8000922 <Traffic_setColor+0xa6>
 80008f4:	683b      	ldr	r3, [r7, #0]
 80008f6:	2b04      	cmp	r3, #4
 80008f8:	dc31      	bgt.n	800095e <Traffic_setColor+0xe2>
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	2b02      	cmp	r3, #2
 80008fe:	d003      	beq.n	8000908 <Traffic_setColor+0x8c>
 8000900:	683b      	ldr	r3, [r7, #0]
 8000902:	2b03      	cmp	r3, #3
 8000904:	d01a      	beq.n	800093c <Traffic_setColor+0xc0>
			case AUTO_GREEN:
				HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, SET);
				HAL_GPIO_WritePin(GPIOA, LED_YELLOW_2_Pin | LED_RED_2_Pin, RESET);
				break;
			default:
				break;
 8000906:	e02a      	b.n	800095e <Traffic_setColor+0xe2>
				HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, SET);
 8000908:	2210      	movs	r2, #16
 800090a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800090e:	4816      	ldr	r0, [pc, #88]	; (8000968 <Traffic_setColor+0xec>)
 8000910:	f001 fa17 	bl	8001d42 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, LED_YELLOW_2_Pin | LED_GREEN_2_Pin, RESET);
 8000914:	2200      	movs	r2, #0
 8000916:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800091a:	4813      	ldr	r0, [pc, #76]	; (8000968 <Traffic_setColor+0xec>)
 800091c:	f001 fa11 	bl	8001d42 <HAL_GPIO_WritePin>
				break;
 8000920:	e01e      	b.n	8000960 <Traffic_setColor+0xe4>
				HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, SET);
 8000922:	2210      	movs	r2, #16
 8000924:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000928:	480f      	ldr	r0, [pc, #60]	; (8000968 <Traffic_setColor+0xec>)
 800092a:	f001 fa0a 	bl	8001d42 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, LED_RED_2_Pin | LED_GREEN_2_Pin, RESET);
 800092e:	2200      	movs	r2, #0
 8000930:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8000934:	480c      	ldr	r0, [pc, #48]	; (8000968 <Traffic_setColor+0xec>)
 8000936:	f001 fa04 	bl	8001d42 <HAL_GPIO_WritePin>
				break;
 800093a:	e011      	b.n	8000960 <Traffic_setColor+0xe4>
				HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, SET);
 800093c:	2210      	movs	r2, #16
 800093e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000942:	4809      	ldr	r0, [pc, #36]	; (8000968 <Traffic_setColor+0xec>)
 8000944:	f001 f9fd 	bl	8001d42 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, LED_YELLOW_2_Pin | LED_RED_2_Pin, RESET);
 8000948:	2200      	movs	r2, #0
 800094a:	f44f 7140 	mov.w	r1, #768	; 0x300
 800094e:	4806      	ldr	r0, [pc, #24]	; (8000968 <Traffic_setColor+0xec>)
 8000950:	f001 f9f7 	bl	8001d42 <HAL_GPIO_WritePin>
				break;
 8000954:	e004      	b.n	8000960 <Traffic_setColor+0xe4>
				break;
 8000956:	bf00      	nop
 8000958:	e002      	b.n	8000960 <Traffic_setColor+0xe4>
		}
	}
 800095a:	bf00      	nop
 800095c:	e000      	b.n	8000960 <Traffic_setColor+0xe4>
				break;
 800095e:	bf00      	nop
}
 8000960:	bf00      	nop
 8000962:	3708      	adds	r7, #8
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	40010800 	.word	0x40010800

0800096c <display7SEG>:

int SEG[7] = {SEG1_0_Pin, SEG1_1_Pin, SEG1_2_Pin, SEG1_3_Pin,  SEG1_4_Pin,  SEG1_5_Pin,  SEG1_6_Pin};
void display7SEG(int num){
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	2b09      	cmp	r3, #9
 8000978:	f200 82a6 	bhi.w	8000ec8 <display7SEG+0x55c>
 800097c:	a201      	add	r2, pc, #4	; (adr r2, 8000984 <display7SEG+0x18>)
 800097e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000982:	bf00      	nop
 8000984:	080009ad 	.word	0x080009ad
 8000988:	08000a41 	.word	0x08000a41
 800098c:	08000aad 	.word	0x08000aad
 8000990:	08000b37 	.word	0x08000b37
 8000994:	08000bc9 	.word	0x08000bc9
 8000998:	08000c49 	.word	0x08000c49
 800099c:	08000cd3 	.word	0x08000cd3
 80009a0:	08000d67 	.word	0x08000d67
 80009a4:	08000de5 	.word	0x08000de5
 80009a8:	08000e35 	.word	0x08000e35
	switch(num){
	case 0:
		HAL_GPIO_WritePin(GPIOB, SEG[0] | SEG[1] | SEG[2] | SEG[3] | SEG[4] | SEG[5] | SEG[6], SET);
 80009ac:	4b84      	ldr	r3, [pc, #528]	; (8000bc0 <display7SEG+0x254>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	b21a      	sxth	r2, r3
 80009b2:	4b83      	ldr	r3, [pc, #524]	; (8000bc0 <display7SEG+0x254>)
 80009b4:	685b      	ldr	r3, [r3, #4]
 80009b6:	b21b      	sxth	r3, r3
 80009b8:	4313      	orrs	r3, r2
 80009ba:	b21a      	sxth	r2, r3
 80009bc:	4b80      	ldr	r3, [pc, #512]	; (8000bc0 <display7SEG+0x254>)
 80009be:	689b      	ldr	r3, [r3, #8]
 80009c0:	b21b      	sxth	r3, r3
 80009c2:	4313      	orrs	r3, r2
 80009c4:	b21a      	sxth	r2, r3
 80009c6:	4b7e      	ldr	r3, [pc, #504]	; (8000bc0 <display7SEG+0x254>)
 80009c8:	68db      	ldr	r3, [r3, #12]
 80009ca:	b21b      	sxth	r3, r3
 80009cc:	4313      	orrs	r3, r2
 80009ce:	b21a      	sxth	r2, r3
 80009d0:	4b7b      	ldr	r3, [pc, #492]	; (8000bc0 <display7SEG+0x254>)
 80009d2:	691b      	ldr	r3, [r3, #16]
 80009d4:	b21b      	sxth	r3, r3
 80009d6:	4313      	orrs	r3, r2
 80009d8:	b21a      	sxth	r2, r3
 80009da:	4b79      	ldr	r3, [pc, #484]	; (8000bc0 <display7SEG+0x254>)
 80009dc:	695b      	ldr	r3, [r3, #20]
 80009de:	b21b      	sxth	r3, r3
 80009e0:	4313      	orrs	r3, r2
 80009e2:	b21a      	sxth	r2, r3
 80009e4:	4b76      	ldr	r3, [pc, #472]	; (8000bc0 <display7SEG+0x254>)
 80009e6:	699b      	ldr	r3, [r3, #24]
 80009e8:	b21b      	sxth	r3, r3
 80009ea:	4313      	orrs	r3, r2
 80009ec:	b21b      	sxth	r3, r3
 80009ee:	b29b      	uxth	r3, r3
 80009f0:	2210      	movs	r2, #16
 80009f2:	4619      	mov	r1, r3
 80009f4:	4873      	ldr	r0, [pc, #460]	; (8000bc4 <display7SEG+0x258>)
 80009f6:	f001 f9a4 	bl	8001d42 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG[0] | SEG[1] | SEG[2] | SEG[3] | SEG[4] | SEG[5], RESET);
 80009fa:	4b71      	ldr	r3, [pc, #452]	; (8000bc0 <display7SEG+0x254>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	b21a      	sxth	r2, r3
 8000a00:	4b6f      	ldr	r3, [pc, #444]	; (8000bc0 <display7SEG+0x254>)
 8000a02:	685b      	ldr	r3, [r3, #4]
 8000a04:	b21b      	sxth	r3, r3
 8000a06:	4313      	orrs	r3, r2
 8000a08:	b21a      	sxth	r2, r3
 8000a0a:	4b6d      	ldr	r3, [pc, #436]	; (8000bc0 <display7SEG+0x254>)
 8000a0c:	689b      	ldr	r3, [r3, #8]
 8000a0e:	b21b      	sxth	r3, r3
 8000a10:	4313      	orrs	r3, r2
 8000a12:	b21a      	sxth	r2, r3
 8000a14:	4b6a      	ldr	r3, [pc, #424]	; (8000bc0 <display7SEG+0x254>)
 8000a16:	68db      	ldr	r3, [r3, #12]
 8000a18:	b21b      	sxth	r3, r3
 8000a1a:	4313      	orrs	r3, r2
 8000a1c:	b21a      	sxth	r2, r3
 8000a1e:	4b68      	ldr	r3, [pc, #416]	; (8000bc0 <display7SEG+0x254>)
 8000a20:	691b      	ldr	r3, [r3, #16]
 8000a22:	b21b      	sxth	r3, r3
 8000a24:	4313      	orrs	r3, r2
 8000a26:	b21a      	sxth	r2, r3
 8000a28:	4b65      	ldr	r3, [pc, #404]	; (8000bc0 <display7SEG+0x254>)
 8000a2a:	695b      	ldr	r3, [r3, #20]
 8000a2c:	b21b      	sxth	r3, r3
 8000a2e:	4313      	orrs	r3, r2
 8000a30:	b21b      	sxth	r3, r3
 8000a32:	b29b      	uxth	r3, r3
 8000a34:	2200      	movs	r2, #0
 8000a36:	4619      	mov	r1, r3
 8000a38:	4862      	ldr	r0, [pc, #392]	; (8000bc4 <display7SEG+0x258>)
 8000a3a:	f001 f982 	bl	8001d42 <HAL_GPIO_WritePin>
		break;
 8000a3e:	e244      	b.n	8000eca <display7SEG+0x55e>
	case 1:
		HAL_GPIO_WritePin(GPIOB, SEG[0] | SEG[1] | SEG[2] | SEG[3] | SEG[4] | SEG[5] | SEG[6], SET);
 8000a40:	4b5f      	ldr	r3, [pc, #380]	; (8000bc0 <display7SEG+0x254>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	b21a      	sxth	r2, r3
 8000a46:	4b5e      	ldr	r3, [pc, #376]	; (8000bc0 <display7SEG+0x254>)
 8000a48:	685b      	ldr	r3, [r3, #4]
 8000a4a:	b21b      	sxth	r3, r3
 8000a4c:	4313      	orrs	r3, r2
 8000a4e:	b21a      	sxth	r2, r3
 8000a50:	4b5b      	ldr	r3, [pc, #364]	; (8000bc0 <display7SEG+0x254>)
 8000a52:	689b      	ldr	r3, [r3, #8]
 8000a54:	b21b      	sxth	r3, r3
 8000a56:	4313      	orrs	r3, r2
 8000a58:	b21a      	sxth	r2, r3
 8000a5a:	4b59      	ldr	r3, [pc, #356]	; (8000bc0 <display7SEG+0x254>)
 8000a5c:	68db      	ldr	r3, [r3, #12]
 8000a5e:	b21b      	sxth	r3, r3
 8000a60:	4313      	orrs	r3, r2
 8000a62:	b21a      	sxth	r2, r3
 8000a64:	4b56      	ldr	r3, [pc, #344]	; (8000bc0 <display7SEG+0x254>)
 8000a66:	691b      	ldr	r3, [r3, #16]
 8000a68:	b21b      	sxth	r3, r3
 8000a6a:	4313      	orrs	r3, r2
 8000a6c:	b21a      	sxth	r2, r3
 8000a6e:	4b54      	ldr	r3, [pc, #336]	; (8000bc0 <display7SEG+0x254>)
 8000a70:	695b      	ldr	r3, [r3, #20]
 8000a72:	b21b      	sxth	r3, r3
 8000a74:	4313      	orrs	r3, r2
 8000a76:	b21a      	sxth	r2, r3
 8000a78:	4b51      	ldr	r3, [pc, #324]	; (8000bc0 <display7SEG+0x254>)
 8000a7a:	699b      	ldr	r3, [r3, #24]
 8000a7c:	b21b      	sxth	r3, r3
 8000a7e:	4313      	orrs	r3, r2
 8000a80:	b21b      	sxth	r3, r3
 8000a82:	b29b      	uxth	r3, r3
 8000a84:	2210      	movs	r2, #16
 8000a86:	4619      	mov	r1, r3
 8000a88:	484e      	ldr	r0, [pc, #312]	; (8000bc4 <display7SEG+0x258>)
 8000a8a:	f001 f95a 	bl	8001d42 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG[1] | SEG[2], RESET);
 8000a8e:	4b4c      	ldr	r3, [pc, #304]	; (8000bc0 <display7SEG+0x254>)
 8000a90:	685b      	ldr	r3, [r3, #4]
 8000a92:	b21a      	sxth	r2, r3
 8000a94:	4b4a      	ldr	r3, [pc, #296]	; (8000bc0 <display7SEG+0x254>)
 8000a96:	689b      	ldr	r3, [r3, #8]
 8000a98:	b21b      	sxth	r3, r3
 8000a9a:	4313      	orrs	r3, r2
 8000a9c:	b21b      	sxth	r3, r3
 8000a9e:	b29b      	uxth	r3, r3
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	4847      	ldr	r0, [pc, #284]	; (8000bc4 <display7SEG+0x258>)
 8000aa6:	f001 f94c 	bl	8001d42 <HAL_GPIO_WritePin>
		break;
 8000aaa:	e20e      	b.n	8000eca <display7SEG+0x55e>
	case 2:
		HAL_GPIO_WritePin(GPIOB, SEG[0] | SEG[1] | SEG[2] | SEG[3] | SEG[4] | SEG[5] | SEG[6], SET);
 8000aac:	4b44      	ldr	r3, [pc, #272]	; (8000bc0 <display7SEG+0x254>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	b21a      	sxth	r2, r3
 8000ab2:	4b43      	ldr	r3, [pc, #268]	; (8000bc0 <display7SEG+0x254>)
 8000ab4:	685b      	ldr	r3, [r3, #4]
 8000ab6:	b21b      	sxth	r3, r3
 8000ab8:	4313      	orrs	r3, r2
 8000aba:	b21a      	sxth	r2, r3
 8000abc:	4b40      	ldr	r3, [pc, #256]	; (8000bc0 <display7SEG+0x254>)
 8000abe:	689b      	ldr	r3, [r3, #8]
 8000ac0:	b21b      	sxth	r3, r3
 8000ac2:	4313      	orrs	r3, r2
 8000ac4:	b21a      	sxth	r2, r3
 8000ac6:	4b3e      	ldr	r3, [pc, #248]	; (8000bc0 <display7SEG+0x254>)
 8000ac8:	68db      	ldr	r3, [r3, #12]
 8000aca:	b21b      	sxth	r3, r3
 8000acc:	4313      	orrs	r3, r2
 8000ace:	b21a      	sxth	r2, r3
 8000ad0:	4b3b      	ldr	r3, [pc, #236]	; (8000bc0 <display7SEG+0x254>)
 8000ad2:	691b      	ldr	r3, [r3, #16]
 8000ad4:	b21b      	sxth	r3, r3
 8000ad6:	4313      	orrs	r3, r2
 8000ad8:	b21a      	sxth	r2, r3
 8000ada:	4b39      	ldr	r3, [pc, #228]	; (8000bc0 <display7SEG+0x254>)
 8000adc:	695b      	ldr	r3, [r3, #20]
 8000ade:	b21b      	sxth	r3, r3
 8000ae0:	4313      	orrs	r3, r2
 8000ae2:	b21a      	sxth	r2, r3
 8000ae4:	4b36      	ldr	r3, [pc, #216]	; (8000bc0 <display7SEG+0x254>)
 8000ae6:	699b      	ldr	r3, [r3, #24]
 8000ae8:	b21b      	sxth	r3, r3
 8000aea:	4313      	orrs	r3, r2
 8000aec:	b21b      	sxth	r3, r3
 8000aee:	b29b      	uxth	r3, r3
 8000af0:	2210      	movs	r2, #16
 8000af2:	4619      	mov	r1, r3
 8000af4:	4833      	ldr	r0, [pc, #204]	; (8000bc4 <display7SEG+0x258>)
 8000af6:	f001 f924 	bl	8001d42 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG[0] | SEG[1] | SEG[3] | SEG[4]| SEG[6], RESET);
 8000afa:	4b31      	ldr	r3, [pc, #196]	; (8000bc0 <display7SEG+0x254>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	b21a      	sxth	r2, r3
 8000b00:	4b2f      	ldr	r3, [pc, #188]	; (8000bc0 <display7SEG+0x254>)
 8000b02:	685b      	ldr	r3, [r3, #4]
 8000b04:	b21b      	sxth	r3, r3
 8000b06:	4313      	orrs	r3, r2
 8000b08:	b21a      	sxth	r2, r3
 8000b0a:	4b2d      	ldr	r3, [pc, #180]	; (8000bc0 <display7SEG+0x254>)
 8000b0c:	68db      	ldr	r3, [r3, #12]
 8000b0e:	b21b      	sxth	r3, r3
 8000b10:	4313      	orrs	r3, r2
 8000b12:	b21a      	sxth	r2, r3
 8000b14:	4b2a      	ldr	r3, [pc, #168]	; (8000bc0 <display7SEG+0x254>)
 8000b16:	691b      	ldr	r3, [r3, #16]
 8000b18:	b21b      	sxth	r3, r3
 8000b1a:	4313      	orrs	r3, r2
 8000b1c:	b21a      	sxth	r2, r3
 8000b1e:	4b28      	ldr	r3, [pc, #160]	; (8000bc0 <display7SEG+0x254>)
 8000b20:	699b      	ldr	r3, [r3, #24]
 8000b22:	b21b      	sxth	r3, r3
 8000b24:	4313      	orrs	r3, r2
 8000b26:	b21b      	sxth	r3, r3
 8000b28:	b29b      	uxth	r3, r3
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	4825      	ldr	r0, [pc, #148]	; (8000bc4 <display7SEG+0x258>)
 8000b30:	f001 f907 	bl	8001d42 <HAL_GPIO_WritePin>
		break;
 8000b34:	e1c9      	b.n	8000eca <display7SEG+0x55e>
	case 3:
		HAL_GPIO_WritePin(GPIOB, SEG[0] | SEG[1] | SEG[2] | SEG[3] | SEG[4] | SEG[5] | SEG[6], SET);
 8000b36:	4b22      	ldr	r3, [pc, #136]	; (8000bc0 <display7SEG+0x254>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	b21a      	sxth	r2, r3
 8000b3c:	4b20      	ldr	r3, [pc, #128]	; (8000bc0 <display7SEG+0x254>)
 8000b3e:	685b      	ldr	r3, [r3, #4]
 8000b40:	b21b      	sxth	r3, r3
 8000b42:	4313      	orrs	r3, r2
 8000b44:	b21a      	sxth	r2, r3
 8000b46:	4b1e      	ldr	r3, [pc, #120]	; (8000bc0 <display7SEG+0x254>)
 8000b48:	689b      	ldr	r3, [r3, #8]
 8000b4a:	b21b      	sxth	r3, r3
 8000b4c:	4313      	orrs	r3, r2
 8000b4e:	b21a      	sxth	r2, r3
 8000b50:	4b1b      	ldr	r3, [pc, #108]	; (8000bc0 <display7SEG+0x254>)
 8000b52:	68db      	ldr	r3, [r3, #12]
 8000b54:	b21b      	sxth	r3, r3
 8000b56:	4313      	orrs	r3, r2
 8000b58:	b21a      	sxth	r2, r3
 8000b5a:	4b19      	ldr	r3, [pc, #100]	; (8000bc0 <display7SEG+0x254>)
 8000b5c:	691b      	ldr	r3, [r3, #16]
 8000b5e:	b21b      	sxth	r3, r3
 8000b60:	4313      	orrs	r3, r2
 8000b62:	b21a      	sxth	r2, r3
 8000b64:	4b16      	ldr	r3, [pc, #88]	; (8000bc0 <display7SEG+0x254>)
 8000b66:	695b      	ldr	r3, [r3, #20]
 8000b68:	b21b      	sxth	r3, r3
 8000b6a:	4313      	orrs	r3, r2
 8000b6c:	b21a      	sxth	r2, r3
 8000b6e:	4b14      	ldr	r3, [pc, #80]	; (8000bc0 <display7SEG+0x254>)
 8000b70:	699b      	ldr	r3, [r3, #24]
 8000b72:	b21b      	sxth	r3, r3
 8000b74:	4313      	orrs	r3, r2
 8000b76:	b21b      	sxth	r3, r3
 8000b78:	b29b      	uxth	r3, r3
 8000b7a:	2210      	movs	r2, #16
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	4811      	ldr	r0, [pc, #68]	; (8000bc4 <display7SEG+0x258>)
 8000b80:	f001 f8df 	bl	8001d42 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG[0] | SEG[1] | SEG[2] | SEG[3] | SEG[6], RESET);
 8000b84:	4b0e      	ldr	r3, [pc, #56]	; (8000bc0 <display7SEG+0x254>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	b21a      	sxth	r2, r3
 8000b8a:	4b0d      	ldr	r3, [pc, #52]	; (8000bc0 <display7SEG+0x254>)
 8000b8c:	685b      	ldr	r3, [r3, #4]
 8000b8e:	b21b      	sxth	r3, r3
 8000b90:	4313      	orrs	r3, r2
 8000b92:	b21a      	sxth	r2, r3
 8000b94:	4b0a      	ldr	r3, [pc, #40]	; (8000bc0 <display7SEG+0x254>)
 8000b96:	689b      	ldr	r3, [r3, #8]
 8000b98:	b21b      	sxth	r3, r3
 8000b9a:	4313      	orrs	r3, r2
 8000b9c:	b21a      	sxth	r2, r3
 8000b9e:	4b08      	ldr	r3, [pc, #32]	; (8000bc0 <display7SEG+0x254>)
 8000ba0:	68db      	ldr	r3, [r3, #12]
 8000ba2:	b21b      	sxth	r3, r3
 8000ba4:	4313      	orrs	r3, r2
 8000ba6:	b21a      	sxth	r2, r3
 8000ba8:	4b05      	ldr	r3, [pc, #20]	; (8000bc0 <display7SEG+0x254>)
 8000baa:	699b      	ldr	r3, [r3, #24]
 8000bac:	b21b      	sxth	r3, r3
 8000bae:	4313      	orrs	r3, r2
 8000bb0:	b21b      	sxth	r3, r3
 8000bb2:	b29b      	uxth	r3, r3
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4802      	ldr	r0, [pc, #8]	; (8000bc4 <display7SEG+0x258>)
 8000bba:	f001 f8c2 	bl	8001d42 <HAL_GPIO_WritePin>
		break;
 8000bbe:	e184      	b.n	8000eca <display7SEG+0x55e>
 8000bc0:	20000010 	.word	0x20000010
 8000bc4:	40010c00 	.word	0x40010c00
	case 4:
		HAL_GPIO_WritePin(GPIOB, SEG[0] | SEG[1] | SEG[2] | SEG[3] | SEG[4] | SEG[5] | SEG[6], SET);
 8000bc8:	4b84      	ldr	r3, [pc, #528]	; (8000ddc <display7SEG+0x470>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	b21a      	sxth	r2, r3
 8000bce:	4b83      	ldr	r3, [pc, #524]	; (8000ddc <display7SEG+0x470>)
 8000bd0:	685b      	ldr	r3, [r3, #4]
 8000bd2:	b21b      	sxth	r3, r3
 8000bd4:	4313      	orrs	r3, r2
 8000bd6:	b21a      	sxth	r2, r3
 8000bd8:	4b80      	ldr	r3, [pc, #512]	; (8000ddc <display7SEG+0x470>)
 8000bda:	689b      	ldr	r3, [r3, #8]
 8000bdc:	b21b      	sxth	r3, r3
 8000bde:	4313      	orrs	r3, r2
 8000be0:	b21a      	sxth	r2, r3
 8000be2:	4b7e      	ldr	r3, [pc, #504]	; (8000ddc <display7SEG+0x470>)
 8000be4:	68db      	ldr	r3, [r3, #12]
 8000be6:	b21b      	sxth	r3, r3
 8000be8:	4313      	orrs	r3, r2
 8000bea:	b21a      	sxth	r2, r3
 8000bec:	4b7b      	ldr	r3, [pc, #492]	; (8000ddc <display7SEG+0x470>)
 8000bee:	691b      	ldr	r3, [r3, #16]
 8000bf0:	b21b      	sxth	r3, r3
 8000bf2:	4313      	orrs	r3, r2
 8000bf4:	b21a      	sxth	r2, r3
 8000bf6:	4b79      	ldr	r3, [pc, #484]	; (8000ddc <display7SEG+0x470>)
 8000bf8:	695b      	ldr	r3, [r3, #20]
 8000bfa:	b21b      	sxth	r3, r3
 8000bfc:	4313      	orrs	r3, r2
 8000bfe:	b21a      	sxth	r2, r3
 8000c00:	4b76      	ldr	r3, [pc, #472]	; (8000ddc <display7SEG+0x470>)
 8000c02:	699b      	ldr	r3, [r3, #24]
 8000c04:	b21b      	sxth	r3, r3
 8000c06:	4313      	orrs	r3, r2
 8000c08:	b21b      	sxth	r3, r3
 8000c0a:	b29b      	uxth	r3, r3
 8000c0c:	2210      	movs	r2, #16
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4873      	ldr	r0, [pc, #460]	; (8000de0 <display7SEG+0x474>)
 8000c12:	f001 f896 	bl	8001d42 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG[1] | SEG[2] | SEG[5] | SEG[6], RESET);
 8000c16:	4b71      	ldr	r3, [pc, #452]	; (8000ddc <display7SEG+0x470>)
 8000c18:	685b      	ldr	r3, [r3, #4]
 8000c1a:	b21a      	sxth	r2, r3
 8000c1c:	4b6f      	ldr	r3, [pc, #444]	; (8000ddc <display7SEG+0x470>)
 8000c1e:	689b      	ldr	r3, [r3, #8]
 8000c20:	b21b      	sxth	r3, r3
 8000c22:	4313      	orrs	r3, r2
 8000c24:	b21a      	sxth	r2, r3
 8000c26:	4b6d      	ldr	r3, [pc, #436]	; (8000ddc <display7SEG+0x470>)
 8000c28:	695b      	ldr	r3, [r3, #20]
 8000c2a:	b21b      	sxth	r3, r3
 8000c2c:	4313      	orrs	r3, r2
 8000c2e:	b21a      	sxth	r2, r3
 8000c30:	4b6a      	ldr	r3, [pc, #424]	; (8000ddc <display7SEG+0x470>)
 8000c32:	699b      	ldr	r3, [r3, #24]
 8000c34:	b21b      	sxth	r3, r3
 8000c36:	4313      	orrs	r3, r2
 8000c38:	b21b      	sxth	r3, r3
 8000c3a:	b29b      	uxth	r3, r3
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	4619      	mov	r1, r3
 8000c40:	4867      	ldr	r0, [pc, #412]	; (8000de0 <display7SEG+0x474>)
 8000c42:	f001 f87e 	bl	8001d42 <HAL_GPIO_WritePin>
		break;
 8000c46:	e140      	b.n	8000eca <display7SEG+0x55e>
	case 5:
		HAL_GPIO_WritePin(GPIOB, SEG[0] | SEG[1] | SEG[2] | SEG[3] | SEG[4] | SEG[5] | SEG[6], SET);
 8000c48:	4b64      	ldr	r3, [pc, #400]	; (8000ddc <display7SEG+0x470>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	b21a      	sxth	r2, r3
 8000c4e:	4b63      	ldr	r3, [pc, #396]	; (8000ddc <display7SEG+0x470>)
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	b21b      	sxth	r3, r3
 8000c54:	4313      	orrs	r3, r2
 8000c56:	b21a      	sxth	r2, r3
 8000c58:	4b60      	ldr	r3, [pc, #384]	; (8000ddc <display7SEG+0x470>)
 8000c5a:	689b      	ldr	r3, [r3, #8]
 8000c5c:	b21b      	sxth	r3, r3
 8000c5e:	4313      	orrs	r3, r2
 8000c60:	b21a      	sxth	r2, r3
 8000c62:	4b5e      	ldr	r3, [pc, #376]	; (8000ddc <display7SEG+0x470>)
 8000c64:	68db      	ldr	r3, [r3, #12]
 8000c66:	b21b      	sxth	r3, r3
 8000c68:	4313      	orrs	r3, r2
 8000c6a:	b21a      	sxth	r2, r3
 8000c6c:	4b5b      	ldr	r3, [pc, #364]	; (8000ddc <display7SEG+0x470>)
 8000c6e:	691b      	ldr	r3, [r3, #16]
 8000c70:	b21b      	sxth	r3, r3
 8000c72:	4313      	orrs	r3, r2
 8000c74:	b21a      	sxth	r2, r3
 8000c76:	4b59      	ldr	r3, [pc, #356]	; (8000ddc <display7SEG+0x470>)
 8000c78:	695b      	ldr	r3, [r3, #20]
 8000c7a:	b21b      	sxth	r3, r3
 8000c7c:	4313      	orrs	r3, r2
 8000c7e:	b21a      	sxth	r2, r3
 8000c80:	4b56      	ldr	r3, [pc, #344]	; (8000ddc <display7SEG+0x470>)
 8000c82:	699b      	ldr	r3, [r3, #24]
 8000c84:	b21b      	sxth	r3, r3
 8000c86:	4313      	orrs	r3, r2
 8000c88:	b21b      	sxth	r3, r3
 8000c8a:	b29b      	uxth	r3, r3
 8000c8c:	2210      	movs	r2, #16
 8000c8e:	4619      	mov	r1, r3
 8000c90:	4853      	ldr	r0, [pc, #332]	; (8000de0 <display7SEG+0x474>)
 8000c92:	f001 f856 	bl	8001d42 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG[0] | SEG[2] | SEG[3] | SEG[5] | SEG[6], RESET);
 8000c96:	4b51      	ldr	r3, [pc, #324]	; (8000ddc <display7SEG+0x470>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	b21a      	sxth	r2, r3
 8000c9c:	4b4f      	ldr	r3, [pc, #316]	; (8000ddc <display7SEG+0x470>)
 8000c9e:	689b      	ldr	r3, [r3, #8]
 8000ca0:	b21b      	sxth	r3, r3
 8000ca2:	4313      	orrs	r3, r2
 8000ca4:	b21a      	sxth	r2, r3
 8000ca6:	4b4d      	ldr	r3, [pc, #308]	; (8000ddc <display7SEG+0x470>)
 8000ca8:	68db      	ldr	r3, [r3, #12]
 8000caa:	b21b      	sxth	r3, r3
 8000cac:	4313      	orrs	r3, r2
 8000cae:	b21a      	sxth	r2, r3
 8000cb0:	4b4a      	ldr	r3, [pc, #296]	; (8000ddc <display7SEG+0x470>)
 8000cb2:	695b      	ldr	r3, [r3, #20]
 8000cb4:	b21b      	sxth	r3, r3
 8000cb6:	4313      	orrs	r3, r2
 8000cb8:	b21a      	sxth	r2, r3
 8000cba:	4b48      	ldr	r3, [pc, #288]	; (8000ddc <display7SEG+0x470>)
 8000cbc:	699b      	ldr	r3, [r3, #24]
 8000cbe:	b21b      	sxth	r3, r3
 8000cc0:	4313      	orrs	r3, r2
 8000cc2:	b21b      	sxth	r3, r3
 8000cc4:	b29b      	uxth	r3, r3
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	4619      	mov	r1, r3
 8000cca:	4845      	ldr	r0, [pc, #276]	; (8000de0 <display7SEG+0x474>)
 8000ccc:	f001 f839 	bl	8001d42 <HAL_GPIO_WritePin>
		break;
 8000cd0:	e0fb      	b.n	8000eca <display7SEG+0x55e>
	case 6:
		HAL_GPIO_WritePin(GPIOB, SEG[0] | SEG[1] | SEG[2] | SEG[3] | SEG[4] | SEG[5] | SEG[6], SET);
 8000cd2:	4b42      	ldr	r3, [pc, #264]	; (8000ddc <display7SEG+0x470>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	b21a      	sxth	r2, r3
 8000cd8:	4b40      	ldr	r3, [pc, #256]	; (8000ddc <display7SEG+0x470>)
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	b21b      	sxth	r3, r3
 8000cde:	4313      	orrs	r3, r2
 8000ce0:	b21a      	sxth	r2, r3
 8000ce2:	4b3e      	ldr	r3, [pc, #248]	; (8000ddc <display7SEG+0x470>)
 8000ce4:	689b      	ldr	r3, [r3, #8]
 8000ce6:	b21b      	sxth	r3, r3
 8000ce8:	4313      	orrs	r3, r2
 8000cea:	b21a      	sxth	r2, r3
 8000cec:	4b3b      	ldr	r3, [pc, #236]	; (8000ddc <display7SEG+0x470>)
 8000cee:	68db      	ldr	r3, [r3, #12]
 8000cf0:	b21b      	sxth	r3, r3
 8000cf2:	4313      	orrs	r3, r2
 8000cf4:	b21a      	sxth	r2, r3
 8000cf6:	4b39      	ldr	r3, [pc, #228]	; (8000ddc <display7SEG+0x470>)
 8000cf8:	691b      	ldr	r3, [r3, #16]
 8000cfa:	b21b      	sxth	r3, r3
 8000cfc:	4313      	orrs	r3, r2
 8000cfe:	b21a      	sxth	r2, r3
 8000d00:	4b36      	ldr	r3, [pc, #216]	; (8000ddc <display7SEG+0x470>)
 8000d02:	695b      	ldr	r3, [r3, #20]
 8000d04:	b21b      	sxth	r3, r3
 8000d06:	4313      	orrs	r3, r2
 8000d08:	b21a      	sxth	r2, r3
 8000d0a:	4b34      	ldr	r3, [pc, #208]	; (8000ddc <display7SEG+0x470>)
 8000d0c:	699b      	ldr	r3, [r3, #24]
 8000d0e:	b21b      	sxth	r3, r3
 8000d10:	4313      	orrs	r3, r2
 8000d12:	b21b      	sxth	r3, r3
 8000d14:	b29b      	uxth	r3, r3
 8000d16:	2210      	movs	r2, #16
 8000d18:	4619      	mov	r1, r3
 8000d1a:	4831      	ldr	r0, [pc, #196]	; (8000de0 <display7SEG+0x474>)
 8000d1c:	f001 f811 	bl	8001d42 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG[0] | SEG[2] | SEG[3] | SEG[4] | SEG[5] | SEG[6], RESET);
 8000d20:	4b2e      	ldr	r3, [pc, #184]	; (8000ddc <display7SEG+0x470>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	b21a      	sxth	r2, r3
 8000d26:	4b2d      	ldr	r3, [pc, #180]	; (8000ddc <display7SEG+0x470>)
 8000d28:	689b      	ldr	r3, [r3, #8]
 8000d2a:	b21b      	sxth	r3, r3
 8000d2c:	4313      	orrs	r3, r2
 8000d2e:	b21a      	sxth	r2, r3
 8000d30:	4b2a      	ldr	r3, [pc, #168]	; (8000ddc <display7SEG+0x470>)
 8000d32:	68db      	ldr	r3, [r3, #12]
 8000d34:	b21b      	sxth	r3, r3
 8000d36:	4313      	orrs	r3, r2
 8000d38:	b21a      	sxth	r2, r3
 8000d3a:	4b28      	ldr	r3, [pc, #160]	; (8000ddc <display7SEG+0x470>)
 8000d3c:	691b      	ldr	r3, [r3, #16]
 8000d3e:	b21b      	sxth	r3, r3
 8000d40:	4313      	orrs	r3, r2
 8000d42:	b21a      	sxth	r2, r3
 8000d44:	4b25      	ldr	r3, [pc, #148]	; (8000ddc <display7SEG+0x470>)
 8000d46:	695b      	ldr	r3, [r3, #20]
 8000d48:	b21b      	sxth	r3, r3
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	b21a      	sxth	r2, r3
 8000d4e:	4b23      	ldr	r3, [pc, #140]	; (8000ddc <display7SEG+0x470>)
 8000d50:	699b      	ldr	r3, [r3, #24]
 8000d52:	b21b      	sxth	r3, r3
 8000d54:	4313      	orrs	r3, r2
 8000d56:	b21b      	sxth	r3, r3
 8000d58:	b29b      	uxth	r3, r3
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	4820      	ldr	r0, [pc, #128]	; (8000de0 <display7SEG+0x474>)
 8000d60:	f000 ffef 	bl	8001d42 <HAL_GPIO_WritePin>
		break;
 8000d64:	e0b1      	b.n	8000eca <display7SEG+0x55e>
	case 7:
		HAL_GPIO_WritePin(GPIOB, SEG[0] | SEG[1] | SEG[2] | SEG[3] | SEG[4] | SEG[5] | SEG[6], SET);
 8000d66:	4b1d      	ldr	r3, [pc, #116]	; (8000ddc <display7SEG+0x470>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	b21a      	sxth	r2, r3
 8000d6c:	4b1b      	ldr	r3, [pc, #108]	; (8000ddc <display7SEG+0x470>)
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	b21b      	sxth	r3, r3
 8000d72:	4313      	orrs	r3, r2
 8000d74:	b21a      	sxth	r2, r3
 8000d76:	4b19      	ldr	r3, [pc, #100]	; (8000ddc <display7SEG+0x470>)
 8000d78:	689b      	ldr	r3, [r3, #8]
 8000d7a:	b21b      	sxth	r3, r3
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	b21a      	sxth	r2, r3
 8000d80:	4b16      	ldr	r3, [pc, #88]	; (8000ddc <display7SEG+0x470>)
 8000d82:	68db      	ldr	r3, [r3, #12]
 8000d84:	b21b      	sxth	r3, r3
 8000d86:	4313      	orrs	r3, r2
 8000d88:	b21a      	sxth	r2, r3
 8000d8a:	4b14      	ldr	r3, [pc, #80]	; (8000ddc <display7SEG+0x470>)
 8000d8c:	691b      	ldr	r3, [r3, #16]
 8000d8e:	b21b      	sxth	r3, r3
 8000d90:	4313      	orrs	r3, r2
 8000d92:	b21a      	sxth	r2, r3
 8000d94:	4b11      	ldr	r3, [pc, #68]	; (8000ddc <display7SEG+0x470>)
 8000d96:	695b      	ldr	r3, [r3, #20]
 8000d98:	b21b      	sxth	r3, r3
 8000d9a:	4313      	orrs	r3, r2
 8000d9c:	b21a      	sxth	r2, r3
 8000d9e:	4b0f      	ldr	r3, [pc, #60]	; (8000ddc <display7SEG+0x470>)
 8000da0:	699b      	ldr	r3, [r3, #24]
 8000da2:	b21b      	sxth	r3, r3
 8000da4:	4313      	orrs	r3, r2
 8000da6:	b21b      	sxth	r3, r3
 8000da8:	b29b      	uxth	r3, r3
 8000daa:	2210      	movs	r2, #16
 8000dac:	4619      	mov	r1, r3
 8000dae:	480c      	ldr	r0, [pc, #48]	; (8000de0 <display7SEG+0x474>)
 8000db0:	f000 ffc7 	bl	8001d42 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG[0] | SEG[1] | SEG[2], RESET);
 8000db4:	4b09      	ldr	r3, [pc, #36]	; (8000ddc <display7SEG+0x470>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	b21a      	sxth	r2, r3
 8000dba:	4b08      	ldr	r3, [pc, #32]	; (8000ddc <display7SEG+0x470>)
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	b21b      	sxth	r3, r3
 8000dc0:	4313      	orrs	r3, r2
 8000dc2:	b21a      	sxth	r2, r3
 8000dc4:	4b05      	ldr	r3, [pc, #20]	; (8000ddc <display7SEG+0x470>)
 8000dc6:	689b      	ldr	r3, [r3, #8]
 8000dc8:	b21b      	sxth	r3, r3
 8000dca:	4313      	orrs	r3, r2
 8000dcc:	b21b      	sxth	r3, r3
 8000dce:	b29b      	uxth	r3, r3
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	4802      	ldr	r0, [pc, #8]	; (8000de0 <display7SEG+0x474>)
 8000dd6:	f000 ffb4 	bl	8001d42 <HAL_GPIO_WritePin>
		break;
 8000dda:	e076      	b.n	8000eca <display7SEG+0x55e>
 8000ddc:	20000010 	.word	0x20000010
 8000de0:	40010c00 	.word	0x40010c00
	case 8:
		HAL_GPIO_WritePin(GPIOB, SEG[0] | SEG[1] | SEG[2] | SEG[3] | SEG[4] | SEG[5] | SEG[6], RESET);
 8000de4:	4b3b      	ldr	r3, [pc, #236]	; (8000ed4 <display7SEG+0x568>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	b21a      	sxth	r2, r3
 8000dea:	4b3a      	ldr	r3, [pc, #232]	; (8000ed4 <display7SEG+0x568>)
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	b21b      	sxth	r3, r3
 8000df0:	4313      	orrs	r3, r2
 8000df2:	b21a      	sxth	r2, r3
 8000df4:	4b37      	ldr	r3, [pc, #220]	; (8000ed4 <display7SEG+0x568>)
 8000df6:	689b      	ldr	r3, [r3, #8]
 8000df8:	b21b      	sxth	r3, r3
 8000dfa:	4313      	orrs	r3, r2
 8000dfc:	b21a      	sxth	r2, r3
 8000dfe:	4b35      	ldr	r3, [pc, #212]	; (8000ed4 <display7SEG+0x568>)
 8000e00:	68db      	ldr	r3, [r3, #12]
 8000e02:	b21b      	sxth	r3, r3
 8000e04:	4313      	orrs	r3, r2
 8000e06:	b21a      	sxth	r2, r3
 8000e08:	4b32      	ldr	r3, [pc, #200]	; (8000ed4 <display7SEG+0x568>)
 8000e0a:	691b      	ldr	r3, [r3, #16]
 8000e0c:	b21b      	sxth	r3, r3
 8000e0e:	4313      	orrs	r3, r2
 8000e10:	b21a      	sxth	r2, r3
 8000e12:	4b30      	ldr	r3, [pc, #192]	; (8000ed4 <display7SEG+0x568>)
 8000e14:	695b      	ldr	r3, [r3, #20]
 8000e16:	b21b      	sxth	r3, r3
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	b21a      	sxth	r2, r3
 8000e1c:	4b2d      	ldr	r3, [pc, #180]	; (8000ed4 <display7SEG+0x568>)
 8000e1e:	699b      	ldr	r3, [r3, #24]
 8000e20:	b21b      	sxth	r3, r3
 8000e22:	4313      	orrs	r3, r2
 8000e24:	b21b      	sxth	r3, r3
 8000e26:	b29b      	uxth	r3, r3
 8000e28:	2200      	movs	r2, #0
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	482a      	ldr	r0, [pc, #168]	; (8000ed8 <display7SEG+0x56c>)
 8000e2e:	f000 ff88 	bl	8001d42 <HAL_GPIO_WritePin>
		break;
 8000e32:	e04a      	b.n	8000eca <display7SEG+0x55e>
	case 9:
		HAL_GPIO_WritePin(GPIOB, SEG[0] | SEG[1] | SEG[2] | SEG[3] | SEG[4] | SEG[5] | SEG[6], SET);
 8000e34:	4b27      	ldr	r3, [pc, #156]	; (8000ed4 <display7SEG+0x568>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	b21a      	sxth	r2, r3
 8000e3a:	4b26      	ldr	r3, [pc, #152]	; (8000ed4 <display7SEG+0x568>)
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	b21b      	sxth	r3, r3
 8000e40:	4313      	orrs	r3, r2
 8000e42:	b21a      	sxth	r2, r3
 8000e44:	4b23      	ldr	r3, [pc, #140]	; (8000ed4 <display7SEG+0x568>)
 8000e46:	689b      	ldr	r3, [r3, #8]
 8000e48:	b21b      	sxth	r3, r3
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	b21a      	sxth	r2, r3
 8000e4e:	4b21      	ldr	r3, [pc, #132]	; (8000ed4 <display7SEG+0x568>)
 8000e50:	68db      	ldr	r3, [r3, #12]
 8000e52:	b21b      	sxth	r3, r3
 8000e54:	4313      	orrs	r3, r2
 8000e56:	b21a      	sxth	r2, r3
 8000e58:	4b1e      	ldr	r3, [pc, #120]	; (8000ed4 <display7SEG+0x568>)
 8000e5a:	691b      	ldr	r3, [r3, #16]
 8000e5c:	b21b      	sxth	r3, r3
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	b21a      	sxth	r2, r3
 8000e62:	4b1c      	ldr	r3, [pc, #112]	; (8000ed4 <display7SEG+0x568>)
 8000e64:	695b      	ldr	r3, [r3, #20]
 8000e66:	b21b      	sxth	r3, r3
 8000e68:	4313      	orrs	r3, r2
 8000e6a:	b21a      	sxth	r2, r3
 8000e6c:	4b19      	ldr	r3, [pc, #100]	; (8000ed4 <display7SEG+0x568>)
 8000e6e:	699b      	ldr	r3, [r3, #24]
 8000e70:	b21b      	sxth	r3, r3
 8000e72:	4313      	orrs	r3, r2
 8000e74:	b21b      	sxth	r3, r3
 8000e76:	b29b      	uxth	r3, r3
 8000e78:	2210      	movs	r2, #16
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	4816      	ldr	r0, [pc, #88]	; (8000ed8 <display7SEG+0x56c>)
 8000e7e:	f000 ff60 	bl	8001d42 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG[0] | SEG[1] | SEG[2] | SEG[3] | SEG[5] | SEG[6], RESET);
 8000e82:	4b14      	ldr	r3, [pc, #80]	; (8000ed4 <display7SEG+0x568>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	b21a      	sxth	r2, r3
 8000e88:	4b12      	ldr	r3, [pc, #72]	; (8000ed4 <display7SEG+0x568>)
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	b21b      	sxth	r3, r3
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	b21a      	sxth	r2, r3
 8000e92:	4b10      	ldr	r3, [pc, #64]	; (8000ed4 <display7SEG+0x568>)
 8000e94:	689b      	ldr	r3, [r3, #8]
 8000e96:	b21b      	sxth	r3, r3
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	b21a      	sxth	r2, r3
 8000e9c:	4b0d      	ldr	r3, [pc, #52]	; (8000ed4 <display7SEG+0x568>)
 8000e9e:	68db      	ldr	r3, [r3, #12]
 8000ea0:	b21b      	sxth	r3, r3
 8000ea2:	4313      	orrs	r3, r2
 8000ea4:	b21a      	sxth	r2, r3
 8000ea6:	4b0b      	ldr	r3, [pc, #44]	; (8000ed4 <display7SEG+0x568>)
 8000ea8:	695b      	ldr	r3, [r3, #20]
 8000eaa:	b21b      	sxth	r3, r3
 8000eac:	4313      	orrs	r3, r2
 8000eae:	b21a      	sxth	r2, r3
 8000eb0:	4b08      	ldr	r3, [pc, #32]	; (8000ed4 <display7SEG+0x568>)
 8000eb2:	699b      	ldr	r3, [r3, #24]
 8000eb4:	b21b      	sxth	r3, r3
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	b21b      	sxth	r3, r3
 8000eba:	b29b      	uxth	r3, r3
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	4805      	ldr	r0, [pc, #20]	; (8000ed8 <display7SEG+0x56c>)
 8000ec2:	f000 ff3e 	bl	8001d42 <HAL_GPIO_WritePin>
		break;
 8000ec6:	e000      	b.n	8000eca <display7SEG+0x55e>
	default:
		break;
 8000ec8:	bf00      	nop
	}
}
 8000eca:	bf00      	nop
 8000ecc:	3708      	adds	r7, #8
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	20000010 	.word	0x20000010
 8000ed8:	40010c00 	.word	0x40010c00

08000edc <update7SEG>:

void update7SEG(int index){
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2b03      	cmp	r3, #3
 8000ee8:	d84a      	bhi.n	8000f80 <update7SEG+0xa4>
 8000eea:	a201      	add	r2, pc, #4	; (adr r2, 8000ef0 <update7SEG+0x14>)
 8000eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ef0:	08000f01 	.word	0x08000f01
 8000ef4:	08000f21 	.word	0x08000f21
 8000ef8:	08000f41 	.word	0x08000f41
 8000efc:	08000f61 	.word	0x08000f61
	switch(index){
		case 0:
			HAL_GPIO_WritePin(GPIOA, EN1_Pin | EN2_Pin | EN3_Pin, SET);
 8000f00:	2210      	movs	r2, #16
 8000f02:	21e0      	movs	r1, #224	; 0xe0
 8000f04:	4821      	ldr	r0, [pc, #132]	; (8000f8c <update7SEG+0xb0>)
 8000f06:	f000 ff1c 	bl	8001d42 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN0_Pin, RESET);
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	2110      	movs	r1, #16
 8000f0e:	481f      	ldr	r0, [pc, #124]	; (8000f8c <update7SEG+0xb0>)
 8000f10:	f000 ff17 	bl	8001d42 <HAL_GPIO_WritePin>
			display7SEG(led_buffer[0]);
 8000f14:	4b1e      	ldr	r3, [pc, #120]	; (8000f90 <update7SEG+0xb4>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f7ff fd27 	bl	800096c <display7SEG>
			break;
 8000f1e:	e030      	b.n	8000f82 <update7SEG+0xa6>
		case 1:
			HAL_GPIO_WritePin(GPIOA, EN0_Pin | EN2_Pin | EN3_Pin, SET);
 8000f20:	2210      	movs	r2, #16
 8000f22:	21d0      	movs	r1, #208	; 0xd0
 8000f24:	4819      	ldr	r0, [pc, #100]	; (8000f8c <update7SEG+0xb0>)
 8000f26:	f000 ff0c 	bl	8001d42 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN1_Pin, RESET);
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	2120      	movs	r1, #32
 8000f2e:	4817      	ldr	r0, [pc, #92]	; (8000f8c <update7SEG+0xb0>)
 8000f30:	f000 ff07 	bl	8001d42 <HAL_GPIO_WritePin>
			display7SEG(led_buffer[1]);
 8000f34:	4b16      	ldr	r3, [pc, #88]	; (8000f90 <update7SEG+0xb4>)
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f7ff fd17 	bl	800096c <display7SEG>
			break;
 8000f3e:	e020      	b.n	8000f82 <update7SEG+0xa6>
		case 2:
			HAL_GPIO_WritePin(GPIOA, EN1_Pin | EN0_Pin | EN3_Pin, SET);
 8000f40:	2210      	movs	r2, #16
 8000f42:	21b0      	movs	r1, #176	; 0xb0
 8000f44:	4811      	ldr	r0, [pc, #68]	; (8000f8c <update7SEG+0xb0>)
 8000f46:	f000 fefc 	bl	8001d42 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN2_Pin, RESET);
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	2140      	movs	r1, #64	; 0x40
 8000f4e:	480f      	ldr	r0, [pc, #60]	; (8000f8c <update7SEG+0xb0>)
 8000f50:	f000 fef7 	bl	8001d42 <HAL_GPIO_WritePin>
			display7SEG(led_buffer[2]);
 8000f54:	4b0e      	ldr	r3, [pc, #56]	; (8000f90 <update7SEG+0xb4>)
 8000f56:	689b      	ldr	r3, [r3, #8]
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f7ff fd07 	bl	800096c <display7SEG>
			break;
 8000f5e:	e010      	b.n	8000f82 <update7SEG+0xa6>
		case 3:
			HAL_GPIO_WritePin(GPIOA, EN1_Pin | EN2_Pin | EN0_Pin, SET);
 8000f60:	2210      	movs	r2, #16
 8000f62:	2170      	movs	r1, #112	; 0x70
 8000f64:	4809      	ldr	r0, [pc, #36]	; (8000f8c <update7SEG+0xb0>)
 8000f66:	f000 feec 	bl	8001d42 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN3_Pin, RESET);
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	2180      	movs	r1, #128	; 0x80
 8000f6e:	4807      	ldr	r0, [pc, #28]	; (8000f8c <update7SEG+0xb0>)
 8000f70:	f000 fee7 	bl	8001d42 <HAL_GPIO_WritePin>
			display7SEG(led_buffer[3]);
 8000f74:	4b06      	ldr	r3, [pc, #24]	; (8000f90 <update7SEG+0xb4>)
 8000f76:	68db      	ldr	r3, [r3, #12]
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f7ff fcf7 	bl	800096c <display7SEG>
			break;
 8000f7e:	e000      	b.n	8000f82 <update7SEG+0xa6>
		default:
			break;
 8000f80:	bf00      	nop
	}
}
 8000f82:	bf00      	nop
 8000f84:	3708      	adds	r7, #8
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	40010800 	.word	0x40010800
 8000f90:	20000078 	.word	0x20000078

08000f94 <updateBuffer>:

void updateBuffer(int duration, int modeNUM){
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
 8000f9c:	6039      	str	r1, [r7, #0]
	led_buffer[0] = duration / 10;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	4a18      	ldr	r2, [pc, #96]	; (8001004 <updateBuffer+0x70>)
 8000fa2:	fb82 1203 	smull	r1, r2, r2, r3
 8000fa6:	1092      	asrs	r2, r2, #2
 8000fa8:	17db      	asrs	r3, r3, #31
 8000faa:	1ad3      	subs	r3, r2, r3
 8000fac:	4a16      	ldr	r2, [pc, #88]	; (8001008 <updateBuffer+0x74>)
 8000fae:	6013      	str	r3, [r2, #0]
	led_buffer[1] = duration % 10;
 8000fb0:	6879      	ldr	r1, [r7, #4]
 8000fb2:	4b14      	ldr	r3, [pc, #80]	; (8001004 <updateBuffer+0x70>)
 8000fb4:	fb83 2301 	smull	r2, r3, r3, r1
 8000fb8:	109a      	asrs	r2, r3, #2
 8000fba:	17cb      	asrs	r3, r1, #31
 8000fbc:	1ad2      	subs	r2, r2, r3
 8000fbe:	4613      	mov	r3, r2
 8000fc0:	009b      	lsls	r3, r3, #2
 8000fc2:	4413      	add	r3, r2
 8000fc4:	005b      	lsls	r3, r3, #1
 8000fc6:	1aca      	subs	r2, r1, r3
 8000fc8:	4b0f      	ldr	r3, [pc, #60]	; (8001008 <updateBuffer+0x74>)
 8000fca:	605a      	str	r2, [r3, #4]
	led_buffer[2] = modeNUM / 10;
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	4a0d      	ldr	r2, [pc, #52]	; (8001004 <updateBuffer+0x70>)
 8000fd0:	fb82 1203 	smull	r1, r2, r2, r3
 8000fd4:	1092      	asrs	r2, r2, #2
 8000fd6:	17db      	asrs	r3, r3, #31
 8000fd8:	1ad3      	subs	r3, r2, r3
 8000fda:	4a0b      	ldr	r2, [pc, #44]	; (8001008 <updateBuffer+0x74>)
 8000fdc:	6093      	str	r3, [r2, #8]
	led_buffer[3] = modeNUM % 10;
 8000fde:	6839      	ldr	r1, [r7, #0]
 8000fe0:	4b08      	ldr	r3, [pc, #32]	; (8001004 <updateBuffer+0x70>)
 8000fe2:	fb83 2301 	smull	r2, r3, r3, r1
 8000fe6:	109a      	asrs	r2, r3, #2
 8000fe8:	17cb      	asrs	r3, r1, #31
 8000fea:	1ad2      	subs	r2, r2, r3
 8000fec:	4613      	mov	r3, r2
 8000fee:	009b      	lsls	r3, r3, #2
 8000ff0:	4413      	add	r3, r2
 8000ff2:	005b      	lsls	r3, r3, #1
 8000ff4:	1aca      	subs	r2, r1, r3
 8000ff6:	4b04      	ldr	r3, [pc, #16]	; (8001008 <updateBuffer+0x74>)
 8000ff8:	60da      	str	r2, [r3, #12]
}
 8000ffa:	bf00      	nop
 8000ffc:	370c      	adds	r7, #12
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bc80      	pop	{r7}
 8001002:	4770      	bx	lr
 8001004:	66666667 	.word	0x66666667
 8001008:	20000078 	.word	0x20000078

0800100c <button_reading>:
int buttonTimeOut[NO_OF_BUTTONS] = {0};

uint16_t pins[NO_OF_BUTTONS] = {BUTTON_MODE_Pin, BUTTON_ADD_Pin, BUTTON_SET_Pin};
GPIO_TypeDef* ports[NO_OF_BUTTONS] = {BUTTON_MODE_GPIO_Port, BUTTON_ADD_GPIO_Port, BUTTON_SET_GPIO_Port};

void button_reading(){
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
	for(int i = 0; i < NO_OF_BUTTONS; i++){
 8001012:	2300      	movs	r3, #0
 8001014:	607b      	str	r3, [r7, #4]
 8001016:	e073      	b.n	8001100 <button_reading+0xf4>
		debounceButtonBuffer3[i] = debounceButtonBuffer2[i];
 8001018:	4a3d      	ldr	r2, [pc, #244]	; (8001110 <button_reading+0x104>)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4413      	add	r3, r2
 800101e:	7819      	ldrb	r1, [r3, #0]
 8001020:	4a3c      	ldr	r2, [pc, #240]	; (8001114 <button_reading+0x108>)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4413      	add	r3, r2
 8001026:	460a      	mov	r2, r1
 8001028:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 800102a:	4a3b      	ldr	r2, [pc, #236]	; (8001118 <button_reading+0x10c>)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	4413      	add	r3, r2
 8001030:	7819      	ldrb	r1, [r3, #0]
 8001032:	4a37      	ldr	r2, [pc, #220]	; (8001110 <button_reading+0x104>)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	4413      	add	r3, r2
 8001038:	460a      	mov	r2, r1
 800103a:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(ports[i], pins[i]);
 800103c:	4a37      	ldr	r2, [pc, #220]	; (800111c <button_reading+0x110>)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001044:	4936      	ldr	r1, [pc, #216]	; (8001120 <button_reading+0x114>)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800104c:	4619      	mov	r1, r3
 800104e:	4610      	mov	r0, r2
 8001050:	f000 fe60 	bl	8001d14 <HAL_GPIO_ReadPin>
 8001054:	4603      	mov	r3, r0
 8001056:	4619      	mov	r1, r3
 8001058:	4a2f      	ldr	r2, [pc, #188]	; (8001118 <button_reading+0x10c>)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4413      	add	r3, r2
 800105e:	460a      	mov	r2, r1
 8001060:	701a      	strb	r2, [r3, #0]
		if((debounceButtonBuffer3[i] == debounceButtonBuffer2[i]) && (debounceButtonBuffer2[i] == debounceButtonBuffer1[i])){
 8001062:	4a2c      	ldr	r2, [pc, #176]	; (8001114 <button_reading+0x108>)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	4413      	add	r3, r2
 8001068:	781a      	ldrb	r2, [r3, #0]
 800106a:	4929      	ldr	r1, [pc, #164]	; (8001110 <button_reading+0x104>)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	440b      	add	r3, r1
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	429a      	cmp	r2, r3
 8001074:	d141      	bne.n	80010fa <button_reading+0xee>
 8001076:	4a26      	ldr	r2, [pc, #152]	; (8001110 <button_reading+0x104>)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	4413      	add	r3, r2
 800107c:	781a      	ldrb	r2, [r3, #0]
 800107e:	4926      	ldr	r1, [pc, #152]	; (8001118 <button_reading+0x10c>)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	440b      	add	r3, r1
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	429a      	cmp	r2, r3
 8001088:	d137      	bne.n	80010fa <button_reading+0xee>
			if(debounceButtonBuffer1[i] != buttonBuffer[i]){
 800108a:	4a23      	ldr	r2, [pc, #140]	; (8001118 <button_reading+0x10c>)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	4413      	add	r3, r2
 8001090:	781a      	ldrb	r2, [r3, #0]
 8001092:	4924      	ldr	r1, [pc, #144]	; (8001124 <button_reading+0x118>)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	440b      	add	r3, r1
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	429a      	cmp	r2, r3
 800109c:	d019      	beq.n	80010d2 <button_reading+0xc6>
				buttonBuffer[i] = debounceButtonBuffer1[i];
 800109e:	4a1e      	ldr	r2, [pc, #120]	; (8001118 <button_reading+0x10c>)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	4413      	add	r3, r2
 80010a4:	7819      	ldrb	r1, [r3, #0]
 80010a6:	4a1f      	ldr	r2, [pc, #124]	; (8001124 <button_reading+0x118>)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	4413      	add	r3, r2
 80010ac:	460a      	mov	r2, r1
 80010ae:	701a      	strb	r2, [r3, #0]
				if(buttonBuffer[i] == BUTTON_IS_PRESSED){
 80010b0:	4a1c      	ldr	r2, [pc, #112]	; (8001124 <button_reading+0x118>)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4413      	add	r3, r2
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d11e      	bne.n	80010fa <button_reading+0xee>
					buttonFlag[i] = 1;
 80010bc:	4a1a      	ldr	r2, [pc, #104]	; (8001128 <button_reading+0x11c>)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2101      	movs	r1, #1
 80010c2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					buttonTimeOut[i] = 100;
 80010c6:	4a19      	ldr	r2, [pc, #100]	; (800112c <button_reading+0x120>)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2164      	movs	r1, #100	; 0x64
 80010cc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80010d0:	e013      	b.n	80010fa <button_reading+0xee>
				}
			}
			else{
				buttonTimeOut[i]--;
 80010d2:	4a16      	ldr	r2, [pc, #88]	; (800112c <button_reading+0x120>)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010da:	1e5a      	subs	r2, r3, #1
 80010dc:	4913      	ldr	r1, [pc, #76]	; (800112c <button_reading+0x120>)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if(buttonTimeOut[i] <= 0){
 80010e4:	4a11      	ldr	r2, [pc, #68]	; (800112c <button_reading+0x120>)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	dc04      	bgt.n	80010fa <button_reading+0xee>
					buttonBuffer[i] = BUTTON_IS_RELEASED;
 80010f0:	4a0c      	ldr	r2, [pc, #48]	; (8001124 <button_reading+0x118>)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4413      	add	r3, r2
 80010f6:	2201      	movs	r2, #1
 80010f8:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < NO_OF_BUTTONS; i++){
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	3301      	adds	r3, #1
 80010fe:	607b      	str	r3, [r7, #4]
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2b02      	cmp	r3, #2
 8001104:	dd88      	ble.n	8001018 <button_reading+0xc>
				}
			}
		}
	}
}
 8001106:	bf00      	nop
 8001108:	bf00      	nop
 800110a:	3708      	adds	r7, #8
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	2000008c 	.word	0x2000008c
 8001114:	20000090 	.word	0x20000090
 8001118:	20000088 	.word	0x20000088
 800111c:	20000038 	.word	0x20000038
 8001120:	20000030 	.word	0x20000030
 8001124:	2000002c 	.word	0x2000002c
 8001128:	20000094 	.word	0x20000094
 800112c:	200000a0 	.word	0x200000a0

08001130 <isButtonPressed>:

int isButtonPressed(int button_index){
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
	if(button_index >= NO_OF_BUTTONS || button_index < 0) return 0;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2b02      	cmp	r3, #2
 800113c:	dc02      	bgt.n	8001144 <isButtonPressed+0x14>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2b00      	cmp	r3, #0
 8001142:	da01      	bge.n	8001148 <isButtonPressed+0x18>
 8001144:	2300      	movs	r3, #0
 8001146:	e00d      	b.n	8001164 <isButtonPressed+0x34>
	if(buttonFlag[button_index] == 1){
 8001148:	4a09      	ldr	r2, [pc, #36]	; (8001170 <isButtonPressed+0x40>)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001150:	2b01      	cmp	r3, #1
 8001152:	d106      	bne.n	8001162 <isButtonPressed+0x32>
		buttonFlag[button_index] = 0;
 8001154:	4a06      	ldr	r2, [pc, #24]	; (8001170 <isButtonPressed+0x40>)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2100      	movs	r1, #0
 800115a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800115e:	2301      	movs	r3, #1
 8001160:	e000      	b.n	8001164 <isButtonPressed+0x34>
	}
	return 0;
 8001162:	2300      	movs	r3, #0
}
 8001164:	4618      	mov	r0, r3
 8001166:	370c      	adds	r7, #12
 8001168:	46bd      	mov	sp, r7
 800116a:	bc80      	pop	{r7}
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	20000094 	.word	0x20000094

08001174 <setBackButtonFlag>:

void setBackButtonFlag(int index){
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
	buttonFlag[index] = 1;
 800117c:	4a04      	ldr	r2, [pc, #16]	; (8001190 <setBackButtonFlag+0x1c>)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2101      	movs	r1, #1
 8001182:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8001186:	bf00      	nop
 8001188:	370c      	adds	r7, #12
 800118a:	46bd      	mov	sp, r7
 800118c:	bc80      	pop	{r7}
 800118e:	4770      	bx	lr
 8001190:	20000094 	.word	0x20000094

08001194 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001198:	f000 fad2 	bl	8001740 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800119c:	f000 f860 	bl	8001260 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011a0:	f000 f8e6 	bl	8001370 <MX_GPIO_Init>
  MX_TIM2_Init();
 80011a4:	f000 f898 	bl	80012d8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80011a8:	4824      	ldr	r0, [pc, #144]	; (800123c <main+0xa8>)
 80011aa:	f001 fa27 	bl	80025fc <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */
  setTimer(2, 10); // This timer will use for buffer
 80011ae:	210a      	movs	r1, #10
 80011b0:	2002      	movs	r0, #2
 80011b2:	f000 f98d 	bl	80014d0 <setTimer>
  setTimer7SEG(10);
 80011b6:	200a      	movs	r0, #10
 80011b8:	f000 f952 	bl	8001460 <setTimer7SEG>
  timerTraffic1 = durationRED / 1000;
 80011bc:	4b20      	ldr	r3, [pc, #128]	; (8001240 <main+0xac>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a20      	ldr	r2, [pc, #128]	; (8001244 <main+0xb0>)
 80011c2:	fb82 1203 	smull	r1, r2, r2, r3
 80011c6:	1192      	asrs	r2, r2, #6
 80011c8:	17db      	asrs	r3, r3, #31
 80011ca:	1ad3      	subs	r3, r2, r3
 80011cc:	4a1e      	ldr	r2, [pc, #120]	; (8001248 <main+0xb4>)
 80011ce:	6013      	str	r3, [r2, #0]
  timerTraffic2 = durationGREEN / 1000;
 80011d0:	4b1e      	ldr	r3, [pc, #120]	; (800124c <main+0xb8>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a1b      	ldr	r2, [pc, #108]	; (8001244 <main+0xb0>)
 80011d6:	fb82 1203 	smull	r1, r2, r2, r3
 80011da:	1192      	asrs	r2, r2, #6
 80011dc:	17db      	asrs	r3, r3, #31
 80011de:	1ad3      	subs	r3, r2, r3
 80011e0:	4a1b      	ldr	r2, [pc, #108]	; (8001250 <main+0xbc>)
 80011e2:	6013      	str	r3, [r2, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
		if(timerFlag[2] == 1){
 80011e4:	4b1b      	ldr	r3, [pc, #108]	; (8001254 <main+0xc0>)
 80011e6:	689b      	ldr	r3, [r3, #8]
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	d10b      	bne.n	8001204 <main+0x70>
			setTimer(2, 100);
 80011ec:	2164      	movs	r1, #100	; 0x64
 80011ee:	2002      	movs	r0, #2
 80011f0:	f000 f96e 	bl	80014d0 <setTimer>
			updateBuffer(timerTraffic1, timerTraffic2);
 80011f4:	4b14      	ldr	r3, [pc, #80]	; (8001248 <main+0xb4>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a15      	ldr	r2, [pc, #84]	; (8001250 <main+0xbc>)
 80011fa:	6812      	ldr	r2, [r2, #0]
 80011fc:	4611      	mov	r1, r2
 80011fe:	4618      	mov	r0, r3
 8001200:	f7ff fec8 	bl	8000f94 <updateBuffer>
		}
		if (timer7SEG == 1){
 8001204:	4b14      	ldr	r3, [pc, #80]	; (8001258 <main+0xc4>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	2b01      	cmp	r3, #1
 800120a:	d111      	bne.n	8001230 <main+0x9c>
			setTimer7SEG(250);
 800120c:	20fa      	movs	r0, #250	; 0xfa
 800120e:	f000 f927 	bl	8001460 <setTimer7SEG>
			if (led_index >= 4) led_index = 0;
 8001212:	4b12      	ldr	r3, [pc, #72]	; (800125c <main+0xc8>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	2b03      	cmp	r3, #3
 8001218:	dd02      	ble.n	8001220 <main+0x8c>
 800121a:	4b10      	ldr	r3, [pc, #64]	; (800125c <main+0xc8>)
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]
			update7SEG(led_index++);
 8001220:	4b0e      	ldr	r3, [pc, #56]	; (800125c <main+0xc8>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	1c5a      	adds	r2, r3, #1
 8001226:	490d      	ldr	r1, [pc, #52]	; (800125c <main+0xc8>)
 8001228:	600a      	str	r2, [r1, #0]
 800122a:	4618      	mov	r0, r3
 800122c:	f7ff fe56 	bl	8000edc <update7SEG>
		}
		fsm_automatic_run();
 8001230:	f7fe ff8c 	bl	800014c <fsm_automatic_run>
		fsm_manual_run();
 8001234:	f7ff f94a 	bl	80004cc <fsm_manual_run>
		if(timerFlag[2] == 1){
 8001238:	e7d4      	b.n	80011e4 <main+0x50>
 800123a:	bf00      	nop
 800123c:	200000e0 	.word	0x200000e0
 8001240:	20000004 	.word	0x20000004
 8001244:	10624dd3 	.word	0x10624dd3
 8001248:	2000006c 	.word	0x2000006c
 800124c:	2000000c 	.word	0x2000000c
 8001250:	20000070 	.word	0x20000070
 8001254:	200000bc 	.word	0x200000bc
 8001258:	200000ac 	.word	0x200000ac
 800125c:	20000074 	.word	0x20000074

08001260 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b090      	sub	sp, #64	; 0x40
 8001264:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001266:	f107 0318 	add.w	r3, r7, #24
 800126a:	2228      	movs	r2, #40	; 0x28
 800126c:	2100      	movs	r1, #0
 800126e:	4618      	mov	r0, r3
 8001270:	f001 fd80 	bl	8002d74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001274:	1d3b      	adds	r3, r7, #4
 8001276:	2200      	movs	r2, #0
 8001278:	601a      	str	r2, [r3, #0]
 800127a:	605a      	str	r2, [r3, #4]
 800127c:	609a      	str	r2, [r3, #8]
 800127e:	60da      	str	r2, [r3, #12]
 8001280:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001282:	2302      	movs	r3, #2
 8001284:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001286:	2301      	movs	r3, #1
 8001288:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800128a:	2310      	movs	r3, #16
 800128c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800128e:	2300      	movs	r3, #0
 8001290:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001292:	f107 0318 	add.w	r3, r7, #24
 8001296:	4618      	mov	r0, r3
 8001298:	f000 fd84 	bl	8001da4 <HAL_RCC_OscConfig>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80012a2:	f000 f8d7 	bl	8001454 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012a6:	230f      	movs	r3, #15
 80012a8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80012aa:	2300      	movs	r3, #0
 80012ac:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012ae:	2300      	movs	r3, #0
 80012b0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012b2:	2300      	movs	r3, #0
 80012b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012b6:	2300      	movs	r3, #0
 80012b8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80012ba:	1d3b      	adds	r3, r7, #4
 80012bc:	2100      	movs	r1, #0
 80012be:	4618      	mov	r0, r3
 80012c0:	f000 fff0 	bl	80022a4 <HAL_RCC_ClockConfig>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80012ca:	f000 f8c3 	bl	8001454 <Error_Handler>
  }
}
 80012ce:	bf00      	nop
 80012d0:	3740      	adds	r7, #64	; 0x40
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
	...

080012d8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b086      	sub	sp, #24
 80012dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012de:	f107 0308 	add.w	r3, r7, #8
 80012e2:	2200      	movs	r2, #0
 80012e4:	601a      	str	r2, [r3, #0]
 80012e6:	605a      	str	r2, [r3, #4]
 80012e8:	609a      	str	r2, [r3, #8]
 80012ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012ec:	463b      	mov	r3, r7
 80012ee:	2200      	movs	r2, #0
 80012f0:	601a      	str	r2, [r3, #0]
 80012f2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012f4:	4b1d      	ldr	r3, [pc, #116]	; (800136c <MX_TIM2_Init+0x94>)
 80012f6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012fa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80012fc:	4b1b      	ldr	r3, [pc, #108]	; (800136c <MX_TIM2_Init+0x94>)
 80012fe:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001302:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001304:	4b19      	ldr	r3, [pc, #100]	; (800136c <MX_TIM2_Init+0x94>)
 8001306:	2200      	movs	r2, #0
 8001308:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800130a:	4b18      	ldr	r3, [pc, #96]	; (800136c <MX_TIM2_Init+0x94>)
 800130c:	2209      	movs	r2, #9
 800130e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001310:	4b16      	ldr	r3, [pc, #88]	; (800136c <MX_TIM2_Init+0x94>)
 8001312:	2200      	movs	r2, #0
 8001314:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001316:	4b15      	ldr	r3, [pc, #84]	; (800136c <MX_TIM2_Init+0x94>)
 8001318:	2200      	movs	r2, #0
 800131a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800131c:	4813      	ldr	r0, [pc, #76]	; (800136c <MX_TIM2_Init+0x94>)
 800131e:	f001 f91d 	bl	800255c <HAL_TIM_Base_Init>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001328:	f000 f894 	bl	8001454 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800132c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001330:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001332:	f107 0308 	add.w	r3, r7, #8
 8001336:	4619      	mov	r1, r3
 8001338:	480c      	ldr	r0, [pc, #48]	; (800136c <MX_TIM2_Init+0x94>)
 800133a:	f001 fab3 	bl	80028a4 <HAL_TIM_ConfigClockSource>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001344:	f000 f886 	bl	8001454 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001348:	2300      	movs	r3, #0
 800134a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800134c:	2300      	movs	r3, #0
 800134e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001350:	463b      	mov	r3, r7
 8001352:	4619      	mov	r1, r3
 8001354:	4805      	ldr	r0, [pc, #20]	; (800136c <MX_TIM2_Init+0x94>)
 8001356:	f001 fc7f 	bl	8002c58 <HAL_TIMEx_MasterConfigSynchronization>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001360:	f000 f878 	bl	8001454 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001364:	bf00      	nop
 8001366:	3718      	adds	r7, #24
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	200000e0 	.word	0x200000e0

08001370 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b086      	sub	sp, #24
 8001374:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001376:	f107 0308 	add.w	r3, r7, #8
 800137a:	2200      	movs	r2, #0
 800137c:	601a      	str	r2, [r3, #0]
 800137e:	605a      	str	r2, [r3, #4]
 8001380:	609a      	str	r2, [r3, #8]
 8001382:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001384:	4b28      	ldr	r3, [pc, #160]	; (8001428 <MX_GPIO_Init+0xb8>)
 8001386:	699b      	ldr	r3, [r3, #24]
 8001388:	4a27      	ldr	r2, [pc, #156]	; (8001428 <MX_GPIO_Init+0xb8>)
 800138a:	f043 0304 	orr.w	r3, r3, #4
 800138e:	6193      	str	r3, [r2, #24]
 8001390:	4b25      	ldr	r3, [pc, #148]	; (8001428 <MX_GPIO_Init+0xb8>)
 8001392:	699b      	ldr	r3, [r3, #24]
 8001394:	f003 0304 	and.w	r3, r3, #4
 8001398:	607b      	str	r3, [r7, #4]
 800139a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800139c:	4b22      	ldr	r3, [pc, #136]	; (8001428 <MX_GPIO_Init+0xb8>)
 800139e:	699b      	ldr	r3, [r3, #24]
 80013a0:	4a21      	ldr	r2, [pc, #132]	; (8001428 <MX_GPIO_Init+0xb8>)
 80013a2:	f043 0308 	orr.w	r3, r3, #8
 80013a6:	6193      	str	r3, [r2, #24]
 80013a8:	4b1f      	ldr	r3, [pc, #124]	; (8001428 <MX_GPIO_Init+0xb8>)
 80013aa:	699b      	ldr	r3, [r3, #24]
 80013ac:	f003 0308 	and.w	r3, r3, #8
 80013b0:	603b      	str	r3, [r7, #0]
 80013b2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED_1_Pin|LED_YELLOW_1_Pin|LED_GREEN_1_Pin|EN0_Pin
 80013b4:	2200      	movs	r2, #0
 80013b6:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80013ba:	481c      	ldr	r0, [pc, #112]	; (800142c <MX_GPIO_Init+0xbc>)
 80013bc:	f000 fcc1 	bl	8001d42 <HAL_GPIO_WritePin>
                          |EN1_Pin|EN2_Pin|EN3_Pin|LED_RED_2_Pin
                          |LED_YELLOW_2_Pin|LED_GREEN_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG1_0_Pin|SEG1_1_Pin|SEG1_2_Pin|SEG1_3_Pin
 80013c0:	2200      	movs	r2, #0
 80013c2:	217f      	movs	r1, #127	; 0x7f
 80013c4:	481a      	ldr	r0, [pc, #104]	; (8001430 <MX_GPIO_Init+0xc0>)
 80013c6:	f000 fcbc 	bl	8001d42 <HAL_GPIO_WritePin>
                          |SEG1_4_Pin|SEG1_5_Pin|SEG1_6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED_RED_1_Pin LED_YELLOW_1_Pin LED_GREEN_1_Pin EN0_Pin
                           EN1_Pin EN2_Pin EN3_Pin LED_RED_2_Pin
                           LED_YELLOW_2_Pin LED_GREEN_2_Pin */
  GPIO_InitStruct.Pin = LED_RED_1_Pin|LED_YELLOW_1_Pin|LED_GREEN_1_Pin|EN0_Pin
 80013ca:	f240 73fe 	movw	r3, #2046	; 0x7fe
 80013ce:	60bb      	str	r3, [r7, #8]
                          |EN1_Pin|EN2_Pin|EN3_Pin|LED_RED_2_Pin
                          |LED_YELLOW_2_Pin|LED_GREEN_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013d0:	2301      	movs	r3, #1
 80013d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d4:	2300      	movs	r3, #0
 80013d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d8:	2302      	movs	r3, #2
 80013da:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013dc:	f107 0308 	add.w	r3, r7, #8
 80013e0:	4619      	mov	r1, r3
 80013e2:	4812      	ldr	r0, [pc, #72]	; (800142c <MX_GPIO_Init+0xbc>)
 80013e4:	f000 fb1c 	bl	8001a20 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG1_0_Pin SEG1_1_Pin SEG1_2_Pin SEG1_3_Pin
                           SEG1_4_Pin SEG1_5_Pin SEG1_6_Pin */
  GPIO_InitStruct.Pin = SEG1_0_Pin|SEG1_1_Pin|SEG1_2_Pin|SEG1_3_Pin
 80013e8:	237f      	movs	r3, #127	; 0x7f
 80013ea:	60bb      	str	r3, [r7, #8]
                          |SEG1_4_Pin|SEG1_5_Pin|SEG1_6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ec:	2301      	movs	r3, #1
 80013ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f0:	2300      	movs	r3, #0
 80013f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f4:	2302      	movs	r3, #2
 80013f6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013f8:	f107 0308 	add.w	r3, r7, #8
 80013fc:	4619      	mov	r1, r3
 80013fe:	480c      	ldr	r0, [pc, #48]	; (8001430 <MX_GPIO_Init+0xc0>)
 8001400:	f000 fb0e 	bl	8001a20 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_MODE_Pin BUTTON_ADD_Pin BUTTON_SET_Pin */
  GPIO_InitStruct.Pin = BUTTON_MODE_Pin|BUTTON_ADD_Pin|BUTTON_SET_Pin;
 8001404:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8001408:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800140a:	2300      	movs	r3, #0
 800140c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800140e:	2301      	movs	r3, #1
 8001410:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001412:	f107 0308 	add.w	r3, r7, #8
 8001416:	4619      	mov	r1, r3
 8001418:	4804      	ldr	r0, [pc, #16]	; (800142c <MX_GPIO_Init+0xbc>)
 800141a:	f000 fb01 	bl	8001a20 <HAL_GPIO_Init>

}
 800141e:	bf00      	nop
 8001420:	3718      	adds	r7, #24
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	40021000 	.word	0x40021000
 800142c:	40010800 	.word	0x40010800
 8001430:	40010c00 	.word	0x40010c00

08001434 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
	timerRun();
 800143c:	f000 f868 	bl	8001510 <timerRun>
	timerRun7SEG();
 8001440:	f000 f8b0 	bl	80015a4 <timerRun7SEG>
	timerRunSecond();
 8001444:	f000 f894 	bl	8001570 <timerRunSecond>
	button_reading();
 8001448:	f7ff fde0 	bl	800100c <button_reading>
}
 800144c:	bf00      	nop
 800144e:	3708      	adds	r7, #8
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}

08001454 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001458:	b672      	cpsid	i
}
 800145a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800145c:	e7fe      	b.n	800145c <Error_Handler+0x8>
	...

08001460 <setTimer7SEG>:
int counterSecond = 0;

int timerFlag[NO_OF_COUNTERS] = {0, 0, 0};
int counter[NO_OF_COUNTERS] = {0, 0, 0};

void setTimer7SEG(int duration){
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
	counter7SEG = duration/PERIOD;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	4a08      	ldr	r2, [pc, #32]	; (800148c <setTimer7SEG+0x2c>)
 800146c:	fb82 1203 	smull	r1, r2, r2, r3
 8001470:	1092      	asrs	r2, r2, #2
 8001472:	17db      	asrs	r3, r3, #31
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	4a06      	ldr	r2, [pc, #24]	; (8001490 <setTimer7SEG+0x30>)
 8001478:	6013      	str	r3, [r2, #0]
	timer7SEG = 0;
 800147a:	4b06      	ldr	r3, [pc, #24]	; (8001494 <setTimer7SEG+0x34>)
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]
}
 8001480:	bf00      	nop
 8001482:	370c      	adds	r7, #12
 8001484:	46bd      	mov	sp, r7
 8001486:	bc80      	pop	{r7}
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	66666667 	.word	0x66666667
 8001490:	200000b0 	.word	0x200000b0
 8001494:	200000ac 	.word	0x200000ac

08001498 <setTimerSecond>:

void setTimerSecond(int duration){
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
	counterSecond = duration/PERIOD;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	4a08      	ldr	r2, [pc, #32]	; (80014c4 <setTimerSecond+0x2c>)
 80014a4:	fb82 1203 	smull	r1, r2, r2, r3
 80014a8:	1092      	asrs	r2, r2, #2
 80014aa:	17db      	asrs	r3, r3, #31
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	4a06      	ldr	r2, [pc, #24]	; (80014c8 <setTimerSecond+0x30>)
 80014b0:	6013      	str	r3, [r2, #0]
	timerSecond = 0;
 80014b2:	4b06      	ldr	r3, [pc, #24]	; (80014cc <setTimerSecond+0x34>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]
}
 80014b8:	bf00      	nop
 80014ba:	370c      	adds	r7, #12
 80014bc:	46bd      	mov	sp, r7
 80014be:	bc80      	pop	{r7}
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	66666667 	.word	0x66666667
 80014c8:	200000b8 	.word	0x200000b8
 80014cc:	200000b4 	.word	0x200000b4

080014d0 <setTimer>:

void setTimer(int index, int duration){
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	6039      	str	r1, [r7, #0]
	counter[index] = duration/PERIOD;
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	4a09      	ldr	r2, [pc, #36]	; (8001504 <setTimer+0x34>)
 80014de:	fb82 1203 	smull	r1, r2, r2, r3
 80014e2:	1092      	asrs	r2, r2, #2
 80014e4:	17db      	asrs	r3, r3, #31
 80014e6:	1ad2      	subs	r2, r2, r3
 80014e8:	4907      	ldr	r1, [pc, #28]	; (8001508 <setTimer+0x38>)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timerFlag[index] = 0;
 80014f0:	4a06      	ldr	r2, [pc, #24]	; (800150c <setTimer+0x3c>)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2100      	movs	r1, #0
 80014f6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80014fa:	bf00      	nop
 80014fc:	370c      	adds	r7, #12
 80014fe:	46bd      	mov	sp, r7
 8001500:	bc80      	pop	{r7}
 8001502:	4770      	bx	lr
 8001504:	66666667 	.word	0x66666667
 8001508:	200000c8 	.word	0x200000c8
 800150c:	200000bc 	.word	0x200000bc

08001510 <timerRun>:

void timerRun(){
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
	for (int i = 0; i < NO_OF_COUNTERS; i++){
 8001516:	2300      	movs	r3, #0
 8001518:	607b      	str	r3, [r7, #4]
 800151a:	e01c      	b.n	8001556 <timerRun+0x46>
		if (counter[i] > 0){
 800151c:	4a12      	ldr	r2, [pc, #72]	; (8001568 <timerRun+0x58>)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001524:	2b00      	cmp	r3, #0
 8001526:	dd13      	ble.n	8001550 <timerRun+0x40>
			counter[i]--;
 8001528:	4a0f      	ldr	r2, [pc, #60]	; (8001568 <timerRun+0x58>)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001530:	1e5a      	subs	r2, r3, #1
 8001532:	490d      	ldr	r1, [pc, #52]	; (8001568 <timerRun+0x58>)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (counter[i] <= 0){
 800153a:	4a0b      	ldr	r2, [pc, #44]	; (8001568 <timerRun+0x58>)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001542:	2b00      	cmp	r3, #0
 8001544:	dc04      	bgt.n	8001550 <timerRun+0x40>
				timerFlag[i] = 1;
 8001546:	4a09      	ldr	r2, [pc, #36]	; (800156c <timerRun+0x5c>)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2101      	movs	r1, #1
 800154c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < NO_OF_COUNTERS; i++){
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	3301      	adds	r3, #1
 8001554:	607b      	str	r3, [r7, #4]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2b02      	cmp	r3, #2
 800155a:	dddf      	ble.n	800151c <timerRun+0xc>
			}
		}
	}
}
 800155c:	bf00      	nop
 800155e:	bf00      	nop
 8001560:	370c      	adds	r7, #12
 8001562:	46bd      	mov	sp, r7
 8001564:	bc80      	pop	{r7}
 8001566:	4770      	bx	lr
 8001568:	200000c8 	.word	0x200000c8
 800156c:	200000bc 	.word	0x200000bc

08001570 <timerRunSecond>:

void timerRunSecond(){
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
	if (counterSecond > 0){
 8001574:	4b09      	ldr	r3, [pc, #36]	; (800159c <timerRunSecond+0x2c>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	2b00      	cmp	r3, #0
 800157a:	dd0b      	ble.n	8001594 <timerRunSecond+0x24>
		counterSecond--;
 800157c:	4b07      	ldr	r3, [pc, #28]	; (800159c <timerRunSecond+0x2c>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	3b01      	subs	r3, #1
 8001582:	4a06      	ldr	r2, [pc, #24]	; (800159c <timerRunSecond+0x2c>)
 8001584:	6013      	str	r3, [r2, #0]
		if (counterSecond <= 0){
 8001586:	4b05      	ldr	r3, [pc, #20]	; (800159c <timerRunSecond+0x2c>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	2b00      	cmp	r3, #0
 800158c:	dc02      	bgt.n	8001594 <timerRunSecond+0x24>
			timerSecond = 1;
 800158e:	4b04      	ldr	r3, [pc, #16]	; (80015a0 <timerRunSecond+0x30>)
 8001590:	2201      	movs	r2, #1
 8001592:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001594:	bf00      	nop
 8001596:	46bd      	mov	sp, r7
 8001598:	bc80      	pop	{r7}
 800159a:	4770      	bx	lr
 800159c:	200000b8 	.word	0x200000b8
 80015a0:	200000b4 	.word	0x200000b4

080015a4 <timerRun7SEG>:

void timerRun7SEG(){
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
	if (counter7SEG > 0){
 80015a8:	4b09      	ldr	r3, [pc, #36]	; (80015d0 <timerRun7SEG+0x2c>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	dd0b      	ble.n	80015c8 <timerRun7SEG+0x24>
		counter7SEG--;
 80015b0:	4b07      	ldr	r3, [pc, #28]	; (80015d0 <timerRun7SEG+0x2c>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	3b01      	subs	r3, #1
 80015b6:	4a06      	ldr	r2, [pc, #24]	; (80015d0 <timerRun7SEG+0x2c>)
 80015b8:	6013      	str	r3, [r2, #0]
		if (counter7SEG <= 0){
 80015ba:	4b05      	ldr	r3, [pc, #20]	; (80015d0 <timerRun7SEG+0x2c>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	dc02      	bgt.n	80015c8 <timerRun7SEG+0x24>
			timer7SEG = 1;
 80015c2:	4b04      	ldr	r3, [pc, #16]	; (80015d4 <timerRun7SEG+0x30>)
 80015c4:	2201      	movs	r2, #1
 80015c6:	601a      	str	r2, [r3, #0]
		}
	}
}
 80015c8:	bf00      	nop
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bc80      	pop	{r7}
 80015ce:	4770      	bx	lr
 80015d0:	200000b0 	.word	0x200000b0
 80015d4:	200000ac 	.word	0x200000ac

080015d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	b085      	sub	sp, #20
 80015dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80015de:	4b15      	ldr	r3, [pc, #84]	; (8001634 <HAL_MspInit+0x5c>)
 80015e0:	699b      	ldr	r3, [r3, #24]
 80015e2:	4a14      	ldr	r2, [pc, #80]	; (8001634 <HAL_MspInit+0x5c>)
 80015e4:	f043 0301 	orr.w	r3, r3, #1
 80015e8:	6193      	str	r3, [r2, #24]
 80015ea:	4b12      	ldr	r3, [pc, #72]	; (8001634 <HAL_MspInit+0x5c>)
 80015ec:	699b      	ldr	r3, [r3, #24]
 80015ee:	f003 0301 	and.w	r3, r3, #1
 80015f2:	60bb      	str	r3, [r7, #8]
 80015f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015f6:	4b0f      	ldr	r3, [pc, #60]	; (8001634 <HAL_MspInit+0x5c>)
 80015f8:	69db      	ldr	r3, [r3, #28]
 80015fa:	4a0e      	ldr	r2, [pc, #56]	; (8001634 <HAL_MspInit+0x5c>)
 80015fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001600:	61d3      	str	r3, [r2, #28]
 8001602:	4b0c      	ldr	r3, [pc, #48]	; (8001634 <HAL_MspInit+0x5c>)
 8001604:	69db      	ldr	r3, [r3, #28]
 8001606:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800160a:	607b      	str	r3, [r7, #4]
 800160c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800160e:	4b0a      	ldr	r3, [pc, #40]	; (8001638 <HAL_MspInit+0x60>)
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	60fb      	str	r3, [r7, #12]
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800161a:	60fb      	str	r3, [r7, #12]
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001622:	60fb      	str	r3, [r7, #12]
 8001624:	4a04      	ldr	r2, [pc, #16]	; (8001638 <HAL_MspInit+0x60>)
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800162a:	bf00      	nop
 800162c:	3714      	adds	r7, #20
 800162e:	46bd      	mov	sp, r7
 8001630:	bc80      	pop	{r7}
 8001632:	4770      	bx	lr
 8001634:	40021000 	.word	0x40021000
 8001638:	40010000 	.word	0x40010000

0800163c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800164c:	d113      	bne.n	8001676 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800164e:	4b0c      	ldr	r3, [pc, #48]	; (8001680 <HAL_TIM_Base_MspInit+0x44>)
 8001650:	69db      	ldr	r3, [r3, #28]
 8001652:	4a0b      	ldr	r2, [pc, #44]	; (8001680 <HAL_TIM_Base_MspInit+0x44>)
 8001654:	f043 0301 	orr.w	r3, r3, #1
 8001658:	61d3      	str	r3, [r2, #28]
 800165a:	4b09      	ldr	r3, [pc, #36]	; (8001680 <HAL_TIM_Base_MspInit+0x44>)
 800165c:	69db      	ldr	r3, [r3, #28]
 800165e:	f003 0301 	and.w	r3, r3, #1
 8001662:	60fb      	str	r3, [r7, #12]
 8001664:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001666:	2200      	movs	r2, #0
 8001668:	2100      	movs	r1, #0
 800166a:	201c      	movs	r0, #28
 800166c:	f000 f9a1 	bl	80019b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001670:	201c      	movs	r0, #28
 8001672:	f000 f9ba 	bl	80019ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001676:	bf00      	nop
 8001678:	3710      	adds	r7, #16
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	40021000 	.word	0x40021000

08001684 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001688:	e7fe      	b.n	8001688 <NMI_Handler+0x4>

0800168a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800168a:	b480      	push	{r7}
 800168c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800168e:	e7fe      	b.n	800168e <HardFault_Handler+0x4>

08001690 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001694:	e7fe      	b.n	8001694 <MemManage_Handler+0x4>

08001696 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001696:	b480      	push	{r7}
 8001698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800169a:	e7fe      	b.n	800169a <BusFault_Handler+0x4>

0800169c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016a0:	e7fe      	b.n	80016a0 <UsageFault_Handler+0x4>

080016a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016a2:	b480      	push	{r7}
 80016a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016a6:	bf00      	nop
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bc80      	pop	{r7}
 80016ac:	4770      	bx	lr

080016ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016ae:	b480      	push	{r7}
 80016b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016b2:	bf00      	nop
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bc80      	pop	{r7}
 80016b8:	4770      	bx	lr

080016ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016ba:	b480      	push	{r7}
 80016bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016be:	bf00      	nop
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bc80      	pop	{r7}
 80016c4:	4770      	bx	lr

080016c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016c6:	b580      	push	{r7, lr}
 80016c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016ca:	f000 f87f 	bl	80017cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016ce:	bf00      	nop
 80016d0:	bd80      	pop	{r7, pc}
	...

080016d4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80016d8:	4802      	ldr	r0, [pc, #8]	; (80016e4 <TIM2_IRQHandler+0x10>)
 80016da:	f000 ffdb 	bl	8002694 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80016de:	bf00      	nop
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	200000e0 	.word	0x200000e0

080016e8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016ec:	bf00      	nop
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bc80      	pop	{r7}
 80016f2:	4770      	bx	lr

080016f4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80016f4:	f7ff fff8 	bl	80016e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016f8:	480b      	ldr	r0, [pc, #44]	; (8001728 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80016fa:	490c      	ldr	r1, [pc, #48]	; (800172c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80016fc:	4a0c      	ldr	r2, [pc, #48]	; (8001730 <LoopFillZerobss+0x16>)
  movs r3, #0
 80016fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001700:	e002      	b.n	8001708 <LoopCopyDataInit>

08001702 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001702:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001704:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001706:	3304      	adds	r3, #4

08001708 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001708:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800170a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800170c:	d3f9      	bcc.n	8001702 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800170e:	4a09      	ldr	r2, [pc, #36]	; (8001734 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001710:	4c09      	ldr	r4, [pc, #36]	; (8001738 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001712:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001714:	e001      	b.n	800171a <LoopFillZerobss>

08001716 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001716:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001718:	3204      	adds	r2, #4

0800171a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800171a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800171c:	d3fb      	bcc.n	8001716 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800171e:	f001 fb05 	bl	8002d2c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001722:	f7ff fd37 	bl	8001194 <main>
  bx lr
 8001726:	4770      	bx	lr
  ldr r0, =_sdata
 8001728:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800172c:	20000050 	.word	0x20000050
  ldr r2, =_sidata
 8001730:	08002dc8 	.word	0x08002dc8
  ldr r2, =_sbss
 8001734:	20000050 	.word	0x20000050
  ldr r4, =_ebss
 8001738:	2000012c 	.word	0x2000012c

0800173c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800173c:	e7fe      	b.n	800173c <ADC1_2_IRQHandler>
	...

08001740 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001744:	4b08      	ldr	r3, [pc, #32]	; (8001768 <HAL_Init+0x28>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a07      	ldr	r2, [pc, #28]	; (8001768 <HAL_Init+0x28>)
 800174a:	f043 0310 	orr.w	r3, r3, #16
 800174e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001750:	2003      	movs	r0, #3
 8001752:	f000 f923 	bl	800199c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001756:	200f      	movs	r0, #15
 8001758:	f000 f808 	bl	800176c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800175c:	f7ff ff3c 	bl	80015d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001760:	2300      	movs	r3, #0
}
 8001762:	4618      	mov	r0, r3
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	40022000 	.word	0x40022000

0800176c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001774:	4b12      	ldr	r3, [pc, #72]	; (80017c0 <HAL_InitTick+0x54>)
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	4b12      	ldr	r3, [pc, #72]	; (80017c4 <HAL_InitTick+0x58>)
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	4619      	mov	r1, r3
 800177e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001782:	fbb3 f3f1 	udiv	r3, r3, r1
 8001786:	fbb2 f3f3 	udiv	r3, r2, r3
 800178a:	4618      	mov	r0, r3
 800178c:	f000 f93b 	bl	8001a06 <HAL_SYSTICK_Config>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e00e      	b.n	80017b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2b0f      	cmp	r3, #15
 800179e:	d80a      	bhi.n	80017b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017a0:	2200      	movs	r2, #0
 80017a2:	6879      	ldr	r1, [r7, #4]
 80017a4:	f04f 30ff 	mov.w	r0, #4294967295
 80017a8:	f000 f903 	bl	80019b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017ac:	4a06      	ldr	r2, [pc, #24]	; (80017c8 <HAL_InitTick+0x5c>)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017b2:	2300      	movs	r3, #0
 80017b4:	e000      	b.n	80017b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	3708      	adds	r7, #8
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	20000044 	.word	0x20000044
 80017c4:	2000004c 	.word	0x2000004c
 80017c8:	20000048 	.word	0x20000048

080017cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017d0:	4b05      	ldr	r3, [pc, #20]	; (80017e8 <HAL_IncTick+0x1c>)
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	461a      	mov	r2, r3
 80017d6:	4b05      	ldr	r3, [pc, #20]	; (80017ec <HAL_IncTick+0x20>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4413      	add	r3, r2
 80017dc:	4a03      	ldr	r2, [pc, #12]	; (80017ec <HAL_IncTick+0x20>)
 80017de:	6013      	str	r3, [r2, #0]
}
 80017e0:	bf00      	nop
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bc80      	pop	{r7}
 80017e6:	4770      	bx	lr
 80017e8:	2000004c 	.word	0x2000004c
 80017ec:	20000128 	.word	0x20000128

080017f0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  return uwTick;
 80017f4:	4b02      	ldr	r3, [pc, #8]	; (8001800 <HAL_GetTick+0x10>)
 80017f6:	681b      	ldr	r3, [r3, #0]
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bc80      	pop	{r7}
 80017fe:	4770      	bx	lr
 8001800:	20000128 	.word	0x20000128

08001804 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001804:	b480      	push	{r7}
 8001806:	b085      	sub	sp, #20
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	f003 0307 	and.w	r3, r3, #7
 8001812:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001814:	4b0c      	ldr	r3, [pc, #48]	; (8001848 <__NVIC_SetPriorityGrouping+0x44>)
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800181a:	68ba      	ldr	r2, [r7, #8]
 800181c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001820:	4013      	ands	r3, r2
 8001822:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800182c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001830:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001834:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001836:	4a04      	ldr	r2, [pc, #16]	; (8001848 <__NVIC_SetPriorityGrouping+0x44>)
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	60d3      	str	r3, [r2, #12]
}
 800183c:	bf00      	nop
 800183e:	3714      	adds	r7, #20
 8001840:	46bd      	mov	sp, r7
 8001842:	bc80      	pop	{r7}
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	e000ed00 	.word	0xe000ed00

0800184c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001850:	4b04      	ldr	r3, [pc, #16]	; (8001864 <__NVIC_GetPriorityGrouping+0x18>)
 8001852:	68db      	ldr	r3, [r3, #12]
 8001854:	0a1b      	lsrs	r3, r3, #8
 8001856:	f003 0307 	and.w	r3, r3, #7
}
 800185a:	4618      	mov	r0, r3
 800185c:	46bd      	mov	sp, r7
 800185e:	bc80      	pop	{r7}
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop
 8001864:	e000ed00 	.word	0xe000ed00

08001868 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	4603      	mov	r3, r0
 8001870:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001876:	2b00      	cmp	r3, #0
 8001878:	db0b      	blt.n	8001892 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800187a:	79fb      	ldrb	r3, [r7, #7]
 800187c:	f003 021f 	and.w	r2, r3, #31
 8001880:	4906      	ldr	r1, [pc, #24]	; (800189c <__NVIC_EnableIRQ+0x34>)
 8001882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001886:	095b      	lsrs	r3, r3, #5
 8001888:	2001      	movs	r0, #1
 800188a:	fa00 f202 	lsl.w	r2, r0, r2
 800188e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001892:	bf00      	nop
 8001894:	370c      	adds	r7, #12
 8001896:	46bd      	mov	sp, r7
 8001898:	bc80      	pop	{r7}
 800189a:	4770      	bx	lr
 800189c:	e000e100 	.word	0xe000e100

080018a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	4603      	mov	r3, r0
 80018a8:	6039      	str	r1, [r7, #0]
 80018aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	db0a      	blt.n	80018ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	b2da      	uxtb	r2, r3
 80018b8:	490c      	ldr	r1, [pc, #48]	; (80018ec <__NVIC_SetPriority+0x4c>)
 80018ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018be:	0112      	lsls	r2, r2, #4
 80018c0:	b2d2      	uxtb	r2, r2
 80018c2:	440b      	add	r3, r1
 80018c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018c8:	e00a      	b.n	80018e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	b2da      	uxtb	r2, r3
 80018ce:	4908      	ldr	r1, [pc, #32]	; (80018f0 <__NVIC_SetPriority+0x50>)
 80018d0:	79fb      	ldrb	r3, [r7, #7]
 80018d2:	f003 030f 	and.w	r3, r3, #15
 80018d6:	3b04      	subs	r3, #4
 80018d8:	0112      	lsls	r2, r2, #4
 80018da:	b2d2      	uxtb	r2, r2
 80018dc:	440b      	add	r3, r1
 80018de:	761a      	strb	r2, [r3, #24]
}
 80018e0:	bf00      	nop
 80018e2:	370c      	adds	r7, #12
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bc80      	pop	{r7}
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop
 80018ec:	e000e100 	.word	0xe000e100
 80018f0:	e000ed00 	.word	0xe000ed00

080018f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b089      	sub	sp, #36	; 0x24
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	60f8      	str	r0, [r7, #12]
 80018fc:	60b9      	str	r1, [r7, #8]
 80018fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	f003 0307 	and.w	r3, r3, #7
 8001906:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001908:	69fb      	ldr	r3, [r7, #28]
 800190a:	f1c3 0307 	rsb	r3, r3, #7
 800190e:	2b04      	cmp	r3, #4
 8001910:	bf28      	it	cs
 8001912:	2304      	movcs	r3, #4
 8001914:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	3304      	adds	r3, #4
 800191a:	2b06      	cmp	r3, #6
 800191c:	d902      	bls.n	8001924 <NVIC_EncodePriority+0x30>
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	3b03      	subs	r3, #3
 8001922:	e000      	b.n	8001926 <NVIC_EncodePriority+0x32>
 8001924:	2300      	movs	r3, #0
 8001926:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001928:	f04f 32ff 	mov.w	r2, #4294967295
 800192c:	69bb      	ldr	r3, [r7, #24]
 800192e:	fa02 f303 	lsl.w	r3, r2, r3
 8001932:	43da      	mvns	r2, r3
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	401a      	ands	r2, r3
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800193c:	f04f 31ff 	mov.w	r1, #4294967295
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	fa01 f303 	lsl.w	r3, r1, r3
 8001946:	43d9      	mvns	r1, r3
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800194c:	4313      	orrs	r3, r2
         );
}
 800194e:	4618      	mov	r0, r3
 8001950:	3724      	adds	r7, #36	; 0x24
 8001952:	46bd      	mov	sp, r7
 8001954:	bc80      	pop	{r7}
 8001956:	4770      	bx	lr

08001958 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	3b01      	subs	r3, #1
 8001964:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001968:	d301      	bcc.n	800196e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800196a:	2301      	movs	r3, #1
 800196c:	e00f      	b.n	800198e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800196e:	4a0a      	ldr	r2, [pc, #40]	; (8001998 <SysTick_Config+0x40>)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	3b01      	subs	r3, #1
 8001974:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001976:	210f      	movs	r1, #15
 8001978:	f04f 30ff 	mov.w	r0, #4294967295
 800197c:	f7ff ff90 	bl	80018a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001980:	4b05      	ldr	r3, [pc, #20]	; (8001998 <SysTick_Config+0x40>)
 8001982:	2200      	movs	r2, #0
 8001984:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001986:	4b04      	ldr	r3, [pc, #16]	; (8001998 <SysTick_Config+0x40>)
 8001988:	2207      	movs	r2, #7
 800198a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800198c:	2300      	movs	r3, #0
}
 800198e:	4618      	mov	r0, r3
 8001990:	3708      	adds	r7, #8
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	e000e010 	.word	0xe000e010

0800199c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019a4:	6878      	ldr	r0, [r7, #4]
 80019a6:	f7ff ff2d 	bl	8001804 <__NVIC_SetPriorityGrouping>
}
 80019aa:	bf00      	nop
 80019ac:	3708      	adds	r7, #8
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}

080019b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019b2:	b580      	push	{r7, lr}
 80019b4:	b086      	sub	sp, #24
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	4603      	mov	r3, r0
 80019ba:	60b9      	str	r1, [r7, #8]
 80019bc:	607a      	str	r2, [r7, #4]
 80019be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019c0:	2300      	movs	r3, #0
 80019c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019c4:	f7ff ff42 	bl	800184c <__NVIC_GetPriorityGrouping>
 80019c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019ca:	687a      	ldr	r2, [r7, #4]
 80019cc:	68b9      	ldr	r1, [r7, #8]
 80019ce:	6978      	ldr	r0, [r7, #20]
 80019d0:	f7ff ff90 	bl	80018f4 <NVIC_EncodePriority>
 80019d4:	4602      	mov	r2, r0
 80019d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019da:	4611      	mov	r1, r2
 80019dc:	4618      	mov	r0, r3
 80019de:	f7ff ff5f 	bl	80018a0 <__NVIC_SetPriority>
}
 80019e2:	bf00      	nop
 80019e4:	3718      	adds	r7, #24
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}

080019ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019ea:	b580      	push	{r7, lr}
 80019ec:	b082      	sub	sp, #8
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	4603      	mov	r3, r0
 80019f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7ff ff35 	bl	8001868 <__NVIC_EnableIRQ>
}
 80019fe:	bf00      	nop
 8001a00:	3708      	adds	r7, #8
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}

08001a06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a06:	b580      	push	{r7, lr}
 8001a08:	b082      	sub	sp, #8
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	f7ff ffa2 	bl	8001958 <SysTick_Config>
 8001a14:	4603      	mov	r3, r0
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3708      	adds	r7, #8
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
	...

08001a20 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b08b      	sub	sp, #44	; 0x2c
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
 8001a28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a32:	e148      	b.n	8001cc6 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001a34:	2201      	movs	r2, #1
 8001a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a38:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	69fa      	ldr	r2, [r7, #28]
 8001a44:	4013      	ands	r3, r2
 8001a46:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001a48:	69ba      	ldr	r2, [r7, #24]
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	f040 8137 	bne.w	8001cc0 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	4aa3      	ldr	r2, [pc, #652]	; (8001ce4 <HAL_GPIO_Init+0x2c4>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d05e      	beq.n	8001b1a <HAL_GPIO_Init+0xfa>
 8001a5c:	4aa1      	ldr	r2, [pc, #644]	; (8001ce4 <HAL_GPIO_Init+0x2c4>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d875      	bhi.n	8001b4e <HAL_GPIO_Init+0x12e>
 8001a62:	4aa1      	ldr	r2, [pc, #644]	; (8001ce8 <HAL_GPIO_Init+0x2c8>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d058      	beq.n	8001b1a <HAL_GPIO_Init+0xfa>
 8001a68:	4a9f      	ldr	r2, [pc, #636]	; (8001ce8 <HAL_GPIO_Init+0x2c8>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d86f      	bhi.n	8001b4e <HAL_GPIO_Init+0x12e>
 8001a6e:	4a9f      	ldr	r2, [pc, #636]	; (8001cec <HAL_GPIO_Init+0x2cc>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d052      	beq.n	8001b1a <HAL_GPIO_Init+0xfa>
 8001a74:	4a9d      	ldr	r2, [pc, #628]	; (8001cec <HAL_GPIO_Init+0x2cc>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d869      	bhi.n	8001b4e <HAL_GPIO_Init+0x12e>
 8001a7a:	4a9d      	ldr	r2, [pc, #628]	; (8001cf0 <HAL_GPIO_Init+0x2d0>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d04c      	beq.n	8001b1a <HAL_GPIO_Init+0xfa>
 8001a80:	4a9b      	ldr	r2, [pc, #620]	; (8001cf0 <HAL_GPIO_Init+0x2d0>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d863      	bhi.n	8001b4e <HAL_GPIO_Init+0x12e>
 8001a86:	4a9b      	ldr	r2, [pc, #620]	; (8001cf4 <HAL_GPIO_Init+0x2d4>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d046      	beq.n	8001b1a <HAL_GPIO_Init+0xfa>
 8001a8c:	4a99      	ldr	r2, [pc, #612]	; (8001cf4 <HAL_GPIO_Init+0x2d4>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d85d      	bhi.n	8001b4e <HAL_GPIO_Init+0x12e>
 8001a92:	2b12      	cmp	r3, #18
 8001a94:	d82a      	bhi.n	8001aec <HAL_GPIO_Init+0xcc>
 8001a96:	2b12      	cmp	r3, #18
 8001a98:	d859      	bhi.n	8001b4e <HAL_GPIO_Init+0x12e>
 8001a9a:	a201      	add	r2, pc, #4	; (adr r2, 8001aa0 <HAL_GPIO_Init+0x80>)
 8001a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001aa0:	08001b1b 	.word	0x08001b1b
 8001aa4:	08001af5 	.word	0x08001af5
 8001aa8:	08001b07 	.word	0x08001b07
 8001aac:	08001b49 	.word	0x08001b49
 8001ab0:	08001b4f 	.word	0x08001b4f
 8001ab4:	08001b4f 	.word	0x08001b4f
 8001ab8:	08001b4f 	.word	0x08001b4f
 8001abc:	08001b4f 	.word	0x08001b4f
 8001ac0:	08001b4f 	.word	0x08001b4f
 8001ac4:	08001b4f 	.word	0x08001b4f
 8001ac8:	08001b4f 	.word	0x08001b4f
 8001acc:	08001b4f 	.word	0x08001b4f
 8001ad0:	08001b4f 	.word	0x08001b4f
 8001ad4:	08001b4f 	.word	0x08001b4f
 8001ad8:	08001b4f 	.word	0x08001b4f
 8001adc:	08001b4f 	.word	0x08001b4f
 8001ae0:	08001b4f 	.word	0x08001b4f
 8001ae4:	08001afd 	.word	0x08001afd
 8001ae8:	08001b11 	.word	0x08001b11
 8001aec:	4a82      	ldr	r2, [pc, #520]	; (8001cf8 <HAL_GPIO_Init+0x2d8>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d013      	beq.n	8001b1a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001af2:	e02c      	b.n	8001b4e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	623b      	str	r3, [r7, #32]
          break;
 8001afa:	e029      	b.n	8001b50 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	3304      	adds	r3, #4
 8001b02:	623b      	str	r3, [r7, #32]
          break;
 8001b04:	e024      	b.n	8001b50 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	68db      	ldr	r3, [r3, #12]
 8001b0a:	3308      	adds	r3, #8
 8001b0c:	623b      	str	r3, [r7, #32]
          break;
 8001b0e:	e01f      	b.n	8001b50 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	68db      	ldr	r3, [r3, #12]
 8001b14:	330c      	adds	r3, #12
 8001b16:	623b      	str	r3, [r7, #32]
          break;
 8001b18:	e01a      	b.n	8001b50 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d102      	bne.n	8001b28 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b22:	2304      	movs	r3, #4
 8001b24:	623b      	str	r3, [r7, #32]
          break;
 8001b26:	e013      	b.n	8001b50 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d105      	bne.n	8001b3c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b30:	2308      	movs	r3, #8
 8001b32:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	69fa      	ldr	r2, [r7, #28]
 8001b38:	611a      	str	r2, [r3, #16]
          break;
 8001b3a:	e009      	b.n	8001b50 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b3c:	2308      	movs	r3, #8
 8001b3e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	69fa      	ldr	r2, [r7, #28]
 8001b44:	615a      	str	r2, [r3, #20]
          break;
 8001b46:	e003      	b.n	8001b50 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	623b      	str	r3, [r7, #32]
          break;
 8001b4c:	e000      	b.n	8001b50 <HAL_GPIO_Init+0x130>
          break;
 8001b4e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001b50:	69bb      	ldr	r3, [r7, #24]
 8001b52:	2bff      	cmp	r3, #255	; 0xff
 8001b54:	d801      	bhi.n	8001b5a <HAL_GPIO_Init+0x13a>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	e001      	b.n	8001b5e <HAL_GPIO_Init+0x13e>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	3304      	adds	r3, #4
 8001b5e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001b60:	69bb      	ldr	r3, [r7, #24]
 8001b62:	2bff      	cmp	r3, #255	; 0xff
 8001b64:	d802      	bhi.n	8001b6c <HAL_GPIO_Init+0x14c>
 8001b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b68:	009b      	lsls	r3, r3, #2
 8001b6a:	e002      	b.n	8001b72 <HAL_GPIO_Init+0x152>
 8001b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b6e:	3b08      	subs	r3, #8
 8001b70:	009b      	lsls	r3, r3, #2
 8001b72:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	210f      	movs	r1, #15
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b80:	43db      	mvns	r3, r3
 8001b82:	401a      	ands	r2, r3
 8001b84:	6a39      	ldr	r1, [r7, #32]
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	fa01 f303 	lsl.w	r3, r1, r3
 8001b8c:	431a      	orrs	r2, r3
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	f000 8090 	beq.w	8001cc0 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ba0:	4b56      	ldr	r3, [pc, #344]	; (8001cfc <HAL_GPIO_Init+0x2dc>)
 8001ba2:	699b      	ldr	r3, [r3, #24]
 8001ba4:	4a55      	ldr	r2, [pc, #340]	; (8001cfc <HAL_GPIO_Init+0x2dc>)
 8001ba6:	f043 0301 	orr.w	r3, r3, #1
 8001baa:	6193      	str	r3, [r2, #24]
 8001bac:	4b53      	ldr	r3, [pc, #332]	; (8001cfc <HAL_GPIO_Init+0x2dc>)
 8001bae:	699b      	ldr	r3, [r3, #24]
 8001bb0:	f003 0301 	and.w	r3, r3, #1
 8001bb4:	60bb      	str	r3, [r7, #8]
 8001bb6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001bb8:	4a51      	ldr	r2, [pc, #324]	; (8001d00 <HAL_GPIO_Init+0x2e0>)
 8001bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bbc:	089b      	lsrs	r3, r3, #2
 8001bbe:	3302      	adds	r3, #2
 8001bc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bc4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc8:	f003 0303 	and.w	r3, r3, #3
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	220f      	movs	r2, #15
 8001bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd4:	43db      	mvns	r3, r3
 8001bd6:	68fa      	ldr	r2, [r7, #12]
 8001bd8:	4013      	ands	r3, r2
 8001bda:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	4a49      	ldr	r2, [pc, #292]	; (8001d04 <HAL_GPIO_Init+0x2e4>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d00d      	beq.n	8001c00 <HAL_GPIO_Init+0x1e0>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	4a48      	ldr	r2, [pc, #288]	; (8001d08 <HAL_GPIO_Init+0x2e8>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d007      	beq.n	8001bfc <HAL_GPIO_Init+0x1dc>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	4a47      	ldr	r2, [pc, #284]	; (8001d0c <HAL_GPIO_Init+0x2ec>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d101      	bne.n	8001bf8 <HAL_GPIO_Init+0x1d8>
 8001bf4:	2302      	movs	r3, #2
 8001bf6:	e004      	b.n	8001c02 <HAL_GPIO_Init+0x1e2>
 8001bf8:	2303      	movs	r3, #3
 8001bfa:	e002      	b.n	8001c02 <HAL_GPIO_Init+0x1e2>
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	e000      	b.n	8001c02 <HAL_GPIO_Init+0x1e2>
 8001c00:	2300      	movs	r3, #0
 8001c02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c04:	f002 0203 	and.w	r2, r2, #3
 8001c08:	0092      	lsls	r2, r2, #2
 8001c0a:	4093      	lsls	r3, r2
 8001c0c:	68fa      	ldr	r2, [r7, #12]
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001c12:	493b      	ldr	r1, [pc, #236]	; (8001d00 <HAL_GPIO_Init+0x2e0>)
 8001c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c16:	089b      	lsrs	r3, r3, #2
 8001c18:	3302      	adds	r3, #2
 8001c1a:	68fa      	ldr	r2, [r7, #12]
 8001c1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d006      	beq.n	8001c3a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001c2c:	4b38      	ldr	r3, [pc, #224]	; (8001d10 <HAL_GPIO_Init+0x2f0>)
 8001c2e:	689a      	ldr	r2, [r3, #8]
 8001c30:	4937      	ldr	r1, [pc, #220]	; (8001d10 <HAL_GPIO_Init+0x2f0>)
 8001c32:	69bb      	ldr	r3, [r7, #24]
 8001c34:	4313      	orrs	r3, r2
 8001c36:	608b      	str	r3, [r1, #8]
 8001c38:	e006      	b.n	8001c48 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001c3a:	4b35      	ldr	r3, [pc, #212]	; (8001d10 <HAL_GPIO_Init+0x2f0>)
 8001c3c:	689a      	ldr	r2, [r3, #8]
 8001c3e:	69bb      	ldr	r3, [r7, #24]
 8001c40:	43db      	mvns	r3, r3
 8001c42:	4933      	ldr	r1, [pc, #204]	; (8001d10 <HAL_GPIO_Init+0x2f0>)
 8001c44:	4013      	ands	r3, r2
 8001c46:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d006      	beq.n	8001c62 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001c54:	4b2e      	ldr	r3, [pc, #184]	; (8001d10 <HAL_GPIO_Init+0x2f0>)
 8001c56:	68da      	ldr	r2, [r3, #12]
 8001c58:	492d      	ldr	r1, [pc, #180]	; (8001d10 <HAL_GPIO_Init+0x2f0>)
 8001c5a:	69bb      	ldr	r3, [r7, #24]
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	60cb      	str	r3, [r1, #12]
 8001c60:	e006      	b.n	8001c70 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001c62:	4b2b      	ldr	r3, [pc, #172]	; (8001d10 <HAL_GPIO_Init+0x2f0>)
 8001c64:	68da      	ldr	r2, [r3, #12]
 8001c66:	69bb      	ldr	r3, [r7, #24]
 8001c68:	43db      	mvns	r3, r3
 8001c6a:	4929      	ldr	r1, [pc, #164]	; (8001d10 <HAL_GPIO_Init+0x2f0>)
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d006      	beq.n	8001c8a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001c7c:	4b24      	ldr	r3, [pc, #144]	; (8001d10 <HAL_GPIO_Init+0x2f0>)
 8001c7e:	685a      	ldr	r2, [r3, #4]
 8001c80:	4923      	ldr	r1, [pc, #140]	; (8001d10 <HAL_GPIO_Init+0x2f0>)
 8001c82:	69bb      	ldr	r3, [r7, #24]
 8001c84:	4313      	orrs	r3, r2
 8001c86:	604b      	str	r3, [r1, #4]
 8001c88:	e006      	b.n	8001c98 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001c8a:	4b21      	ldr	r3, [pc, #132]	; (8001d10 <HAL_GPIO_Init+0x2f0>)
 8001c8c:	685a      	ldr	r2, [r3, #4]
 8001c8e:	69bb      	ldr	r3, [r7, #24]
 8001c90:	43db      	mvns	r3, r3
 8001c92:	491f      	ldr	r1, [pc, #124]	; (8001d10 <HAL_GPIO_Init+0x2f0>)
 8001c94:	4013      	ands	r3, r2
 8001c96:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d006      	beq.n	8001cb2 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ca4:	4b1a      	ldr	r3, [pc, #104]	; (8001d10 <HAL_GPIO_Init+0x2f0>)
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	4919      	ldr	r1, [pc, #100]	; (8001d10 <HAL_GPIO_Init+0x2f0>)
 8001caa:	69bb      	ldr	r3, [r7, #24]
 8001cac:	4313      	orrs	r3, r2
 8001cae:	600b      	str	r3, [r1, #0]
 8001cb0:	e006      	b.n	8001cc0 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001cb2:	4b17      	ldr	r3, [pc, #92]	; (8001d10 <HAL_GPIO_Init+0x2f0>)
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	69bb      	ldr	r3, [r7, #24]
 8001cb8:	43db      	mvns	r3, r3
 8001cba:	4915      	ldr	r1, [pc, #84]	; (8001d10 <HAL_GPIO_Init+0x2f0>)
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ccc:	fa22 f303 	lsr.w	r3, r2, r3
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	f47f aeaf 	bne.w	8001a34 <HAL_GPIO_Init+0x14>
  }
}
 8001cd6:	bf00      	nop
 8001cd8:	bf00      	nop
 8001cda:	372c      	adds	r7, #44	; 0x2c
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bc80      	pop	{r7}
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	10320000 	.word	0x10320000
 8001ce8:	10310000 	.word	0x10310000
 8001cec:	10220000 	.word	0x10220000
 8001cf0:	10210000 	.word	0x10210000
 8001cf4:	10120000 	.word	0x10120000
 8001cf8:	10110000 	.word	0x10110000
 8001cfc:	40021000 	.word	0x40021000
 8001d00:	40010000 	.word	0x40010000
 8001d04:	40010800 	.word	0x40010800
 8001d08:	40010c00 	.word	0x40010c00
 8001d0c:	40011000 	.word	0x40011000
 8001d10:	40010400 	.word	0x40010400

08001d14 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b085      	sub	sp, #20
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
 8001d1c:	460b      	mov	r3, r1
 8001d1e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	689a      	ldr	r2, [r3, #8]
 8001d24:	887b      	ldrh	r3, [r7, #2]
 8001d26:	4013      	ands	r3, r2
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d002      	beq.n	8001d32 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	73fb      	strb	r3, [r7, #15]
 8001d30:	e001      	b.n	8001d36 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d32:	2300      	movs	r3, #0
 8001d34:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d36:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	3714      	adds	r7, #20
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bc80      	pop	{r7}
 8001d40:	4770      	bx	lr

08001d42 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d42:	b480      	push	{r7}
 8001d44:	b083      	sub	sp, #12
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	6078      	str	r0, [r7, #4]
 8001d4a:	460b      	mov	r3, r1
 8001d4c:	807b      	strh	r3, [r7, #2]
 8001d4e:	4613      	mov	r3, r2
 8001d50:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d52:	787b      	ldrb	r3, [r7, #1]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d003      	beq.n	8001d60 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d58:	887a      	ldrh	r2, [r7, #2]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001d5e:	e003      	b.n	8001d68 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d60:	887b      	ldrh	r3, [r7, #2]
 8001d62:	041a      	lsls	r2, r3, #16
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	611a      	str	r2, [r3, #16]
}
 8001d68:	bf00      	nop
 8001d6a:	370c      	adds	r7, #12
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bc80      	pop	{r7}
 8001d70:	4770      	bx	lr

08001d72 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d72:	b480      	push	{r7}
 8001d74:	b085      	sub	sp, #20
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	6078      	str	r0, [r7, #4]
 8001d7a:	460b      	mov	r3, r1
 8001d7c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	68db      	ldr	r3, [r3, #12]
 8001d82:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d84:	887a      	ldrh	r2, [r7, #2]
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	4013      	ands	r3, r2
 8001d8a:	041a      	lsls	r2, r3, #16
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	43d9      	mvns	r1, r3
 8001d90:	887b      	ldrh	r3, [r7, #2]
 8001d92:	400b      	ands	r3, r1
 8001d94:	431a      	orrs	r2, r3
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	611a      	str	r2, [r3, #16]
}
 8001d9a:	bf00      	nop
 8001d9c:	3714      	adds	r7, #20
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bc80      	pop	{r7}
 8001da2:	4770      	bx	lr

08001da4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b086      	sub	sp, #24
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d101      	bne.n	8001db6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e26c      	b.n	8002290 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 0301 	and.w	r3, r3, #1
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	f000 8087 	beq.w	8001ed2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001dc4:	4b92      	ldr	r3, [pc, #584]	; (8002010 <HAL_RCC_OscConfig+0x26c>)
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f003 030c 	and.w	r3, r3, #12
 8001dcc:	2b04      	cmp	r3, #4
 8001dce:	d00c      	beq.n	8001dea <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001dd0:	4b8f      	ldr	r3, [pc, #572]	; (8002010 <HAL_RCC_OscConfig+0x26c>)
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f003 030c 	and.w	r3, r3, #12
 8001dd8:	2b08      	cmp	r3, #8
 8001dda:	d112      	bne.n	8001e02 <HAL_RCC_OscConfig+0x5e>
 8001ddc:	4b8c      	ldr	r3, [pc, #560]	; (8002010 <HAL_RCC_OscConfig+0x26c>)
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001de4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001de8:	d10b      	bne.n	8001e02 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dea:	4b89      	ldr	r3, [pc, #548]	; (8002010 <HAL_RCC_OscConfig+0x26c>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d06c      	beq.n	8001ed0 <HAL_RCC_OscConfig+0x12c>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d168      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e246      	b.n	8002290 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e0a:	d106      	bne.n	8001e1a <HAL_RCC_OscConfig+0x76>
 8001e0c:	4b80      	ldr	r3, [pc, #512]	; (8002010 <HAL_RCC_OscConfig+0x26c>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a7f      	ldr	r2, [pc, #508]	; (8002010 <HAL_RCC_OscConfig+0x26c>)
 8001e12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e16:	6013      	str	r3, [r2, #0]
 8001e18:	e02e      	b.n	8001e78 <HAL_RCC_OscConfig+0xd4>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d10c      	bne.n	8001e3c <HAL_RCC_OscConfig+0x98>
 8001e22:	4b7b      	ldr	r3, [pc, #492]	; (8002010 <HAL_RCC_OscConfig+0x26c>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a7a      	ldr	r2, [pc, #488]	; (8002010 <HAL_RCC_OscConfig+0x26c>)
 8001e28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e2c:	6013      	str	r3, [r2, #0]
 8001e2e:	4b78      	ldr	r3, [pc, #480]	; (8002010 <HAL_RCC_OscConfig+0x26c>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a77      	ldr	r2, [pc, #476]	; (8002010 <HAL_RCC_OscConfig+0x26c>)
 8001e34:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e38:	6013      	str	r3, [r2, #0]
 8001e3a:	e01d      	b.n	8001e78 <HAL_RCC_OscConfig+0xd4>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e44:	d10c      	bne.n	8001e60 <HAL_RCC_OscConfig+0xbc>
 8001e46:	4b72      	ldr	r3, [pc, #456]	; (8002010 <HAL_RCC_OscConfig+0x26c>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a71      	ldr	r2, [pc, #452]	; (8002010 <HAL_RCC_OscConfig+0x26c>)
 8001e4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e50:	6013      	str	r3, [r2, #0]
 8001e52:	4b6f      	ldr	r3, [pc, #444]	; (8002010 <HAL_RCC_OscConfig+0x26c>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a6e      	ldr	r2, [pc, #440]	; (8002010 <HAL_RCC_OscConfig+0x26c>)
 8001e58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e5c:	6013      	str	r3, [r2, #0]
 8001e5e:	e00b      	b.n	8001e78 <HAL_RCC_OscConfig+0xd4>
 8001e60:	4b6b      	ldr	r3, [pc, #428]	; (8002010 <HAL_RCC_OscConfig+0x26c>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a6a      	ldr	r2, [pc, #424]	; (8002010 <HAL_RCC_OscConfig+0x26c>)
 8001e66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e6a:	6013      	str	r3, [r2, #0]
 8001e6c:	4b68      	ldr	r3, [pc, #416]	; (8002010 <HAL_RCC_OscConfig+0x26c>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a67      	ldr	r2, [pc, #412]	; (8002010 <HAL_RCC_OscConfig+0x26c>)
 8001e72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e76:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d013      	beq.n	8001ea8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e80:	f7ff fcb6 	bl	80017f0 <HAL_GetTick>
 8001e84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e86:	e008      	b.n	8001e9a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e88:	f7ff fcb2 	bl	80017f0 <HAL_GetTick>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	2b64      	cmp	r3, #100	; 0x64
 8001e94:	d901      	bls.n	8001e9a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001e96:	2303      	movs	r3, #3
 8001e98:	e1fa      	b.n	8002290 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e9a:	4b5d      	ldr	r3, [pc, #372]	; (8002010 <HAL_RCC_OscConfig+0x26c>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d0f0      	beq.n	8001e88 <HAL_RCC_OscConfig+0xe4>
 8001ea6:	e014      	b.n	8001ed2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ea8:	f7ff fca2 	bl	80017f0 <HAL_GetTick>
 8001eac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eae:	e008      	b.n	8001ec2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001eb0:	f7ff fc9e 	bl	80017f0 <HAL_GetTick>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	2b64      	cmp	r3, #100	; 0x64
 8001ebc:	d901      	bls.n	8001ec2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	e1e6      	b.n	8002290 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ec2:	4b53      	ldr	r3, [pc, #332]	; (8002010 <HAL_RCC_OscConfig+0x26c>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d1f0      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x10c>
 8001ece:	e000      	b.n	8001ed2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ed0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 0302 	and.w	r3, r3, #2
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d063      	beq.n	8001fa6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ede:	4b4c      	ldr	r3, [pc, #304]	; (8002010 <HAL_RCC_OscConfig+0x26c>)
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	f003 030c 	and.w	r3, r3, #12
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d00b      	beq.n	8001f02 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001eea:	4b49      	ldr	r3, [pc, #292]	; (8002010 <HAL_RCC_OscConfig+0x26c>)
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	f003 030c 	and.w	r3, r3, #12
 8001ef2:	2b08      	cmp	r3, #8
 8001ef4:	d11c      	bne.n	8001f30 <HAL_RCC_OscConfig+0x18c>
 8001ef6:	4b46      	ldr	r3, [pc, #280]	; (8002010 <HAL_RCC_OscConfig+0x26c>)
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d116      	bne.n	8001f30 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f02:	4b43      	ldr	r3, [pc, #268]	; (8002010 <HAL_RCC_OscConfig+0x26c>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 0302 	and.w	r3, r3, #2
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d005      	beq.n	8001f1a <HAL_RCC_OscConfig+0x176>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	691b      	ldr	r3, [r3, #16]
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d001      	beq.n	8001f1a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e1ba      	b.n	8002290 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f1a:	4b3d      	ldr	r3, [pc, #244]	; (8002010 <HAL_RCC_OscConfig+0x26c>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	695b      	ldr	r3, [r3, #20]
 8001f26:	00db      	lsls	r3, r3, #3
 8001f28:	4939      	ldr	r1, [pc, #228]	; (8002010 <HAL_RCC_OscConfig+0x26c>)
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f2e:	e03a      	b.n	8001fa6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	691b      	ldr	r3, [r3, #16]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d020      	beq.n	8001f7a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f38:	4b36      	ldr	r3, [pc, #216]	; (8002014 <HAL_RCC_OscConfig+0x270>)
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f3e:	f7ff fc57 	bl	80017f0 <HAL_GetTick>
 8001f42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f44:	e008      	b.n	8001f58 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f46:	f7ff fc53 	bl	80017f0 <HAL_GetTick>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	1ad3      	subs	r3, r2, r3
 8001f50:	2b02      	cmp	r3, #2
 8001f52:	d901      	bls.n	8001f58 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001f54:	2303      	movs	r3, #3
 8001f56:	e19b      	b.n	8002290 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f58:	4b2d      	ldr	r3, [pc, #180]	; (8002010 <HAL_RCC_OscConfig+0x26c>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 0302 	and.w	r3, r3, #2
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d0f0      	beq.n	8001f46 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f64:	4b2a      	ldr	r3, [pc, #168]	; (8002010 <HAL_RCC_OscConfig+0x26c>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	695b      	ldr	r3, [r3, #20]
 8001f70:	00db      	lsls	r3, r3, #3
 8001f72:	4927      	ldr	r1, [pc, #156]	; (8002010 <HAL_RCC_OscConfig+0x26c>)
 8001f74:	4313      	orrs	r3, r2
 8001f76:	600b      	str	r3, [r1, #0]
 8001f78:	e015      	b.n	8001fa6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f7a:	4b26      	ldr	r3, [pc, #152]	; (8002014 <HAL_RCC_OscConfig+0x270>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f80:	f7ff fc36 	bl	80017f0 <HAL_GetTick>
 8001f84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f86:	e008      	b.n	8001f9a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f88:	f7ff fc32 	bl	80017f0 <HAL_GetTick>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	2b02      	cmp	r3, #2
 8001f94:	d901      	bls.n	8001f9a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001f96:	2303      	movs	r3, #3
 8001f98:	e17a      	b.n	8002290 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f9a:	4b1d      	ldr	r3, [pc, #116]	; (8002010 <HAL_RCC_OscConfig+0x26c>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 0302 	and.w	r3, r3, #2
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d1f0      	bne.n	8001f88 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 0308 	and.w	r3, r3, #8
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d03a      	beq.n	8002028 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	699b      	ldr	r3, [r3, #24]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d019      	beq.n	8001fee <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fba:	4b17      	ldr	r3, [pc, #92]	; (8002018 <HAL_RCC_OscConfig+0x274>)
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fc0:	f7ff fc16 	bl	80017f0 <HAL_GetTick>
 8001fc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fc6:	e008      	b.n	8001fda <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fc8:	f7ff fc12 	bl	80017f0 <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	2b02      	cmp	r3, #2
 8001fd4:	d901      	bls.n	8001fda <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	e15a      	b.n	8002290 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fda:	4b0d      	ldr	r3, [pc, #52]	; (8002010 <HAL_RCC_OscConfig+0x26c>)
 8001fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fde:	f003 0302 	and.w	r3, r3, #2
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d0f0      	beq.n	8001fc8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001fe6:	2001      	movs	r0, #1
 8001fe8:	f000 fa9a 	bl	8002520 <RCC_Delay>
 8001fec:	e01c      	b.n	8002028 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fee:	4b0a      	ldr	r3, [pc, #40]	; (8002018 <HAL_RCC_OscConfig+0x274>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ff4:	f7ff fbfc 	bl	80017f0 <HAL_GetTick>
 8001ff8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ffa:	e00f      	b.n	800201c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ffc:	f7ff fbf8 	bl	80017f0 <HAL_GetTick>
 8002000:	4602      	mov	r2, r0
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	2b02      	cmp	r3, #2
 8002008:	d908      	bls.n	800201c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800200a:	2303      	movs	r3, #3
 800200c:	e140      	b.n	8002290 <HAL_RCC_OscConfig+0x4ec>
 800200e:	bf00      	nop
 8002010:	40021000 	.word	0x40021000
 8002014:	42420000 	.word	0x42420000
 8002018:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800201c:	4b9e      	ldr	r3, [pc, #632]	; (8002298 <HAL_RCC_OscConfig+0x4f4>)
 800201e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002020:	f003 0302 	and.w	r3, r3, #2
 8002024:	2b00      	cmp	r3, #0
 8002026:	d1e9      	bne.n	8001ffc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 0304 	and.w	r3, r3, #4
 8002030:	2b00      	cmp	r3, #0
 8002032:	f000 80a6 	beq.w	8002182 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002036:	2300      	movs	r3, #0
 8002038:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800203a:	4b97      	ldr	r3, [pc, #604]	; (8002298 <HAL_RCC_OscConfig+0x4f4>)
 800203c:	69db      	ldr	r3, [r3, #28]
 800203e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002042:	2b00      	cmp	r3, #0
 8002044:	d10d      	bne.n	8002062 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002046:	4b94      	ldr	r3, [pc, #592]	; (8002298 <HAL_RCC_OscConfig+0x4f4>)
 8002048:	69db      	ldr	r3, [r3, #28]
 800204a:	4a93      	ldr	r2, [pc, #588]	; (8002298 <HAL_RCC_OscConfig+0x4f4>)
 800204c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002050:	61d3      	str	r3, [r2, #28]
 8002052:	4b91      	ldr	r3, [pc, #580]	; (8002298 <HAL_RCC_OscConfig+0x4f4>)
 8002054:	69db      	ldr	r3, [r3, #28]
 8002056:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800205a:	60bb      	str	r3, [r7, #8]
 800205c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800205e:	2301      	movs	r3, #1
 8002060:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002062:	4b8e      	ldr	r3, [pc, #568]	; (800229c <HAL_RCC_OscConfig+0x4f8>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800206a:	2b00      	cmp	r3, #0
 800206c:	d118      	bne.n	80020a0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800206e:	4b8b      	ldr	r3, [pc, #556]	; (800229c <HAL_RCC_OscConfig+0x4f8>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a8a      	ldr	r2, [pc, #552]	; (800229c <HAL_RCC_OscConfig+0x4f8>)
 8002074:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002078:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800207a:	f7ff fbb9 	bl	80017f0 <HAL_GetTick>
 800207e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002080:	e008      	b.n	8002094 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002082:	f7ff fbb5 	bl	80017f0 <HAL_GetTick>
 8002086:	4602      	mov	r2, r0
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	1ad3      	subs	r3, r2, r3
 800208c:	2b64      	cmp	r3, #100	; 0x64
 800208e:	d901      	bls.n	8002094 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002090:	2303      	movs	r3, #3
 8002092:	e0fd      	b.n	8002290 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002094:	4b81      	ldr	r3, [pc, #516]	; (800229c <HAL_RCC_OscConfig+0x4f8>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800209c:	2b00      	cmp	r3, #0
 800209e:	d0f0      	beq.n	8002082 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d106      	bne.n	80020b6 <HAL_RCC_OscConfig+0x312>
 80020a8:	4b7b      	ldr	r3, [pc, #492]	; (8002298 <HAL_RCC_OscConfig+0x4f4>)
 80020aa:	6a1b      	ldr	r3, [r3, #32]
 80020ac:	4a7a      	ldr	r2, [pc, #488]	; (8002298 <HAL_RCC_OscConfig+0x4f4>)
 80020ae:	f043 0301 	orr.w	r3, r3, #1
 80020b2:	6213      	str	r3, [r2, #32]
 80020b4:	e02d      	b.n	8002112 <HAL_RCC_OscConfig+0x36e>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	68db      	ldr	r3, [r3, #12]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d10c      	bne.n	80020d8 <HAL_RCC_OscConfig+0x334>
 80020be:	4b76      	ldr	r3, [pc, #472]	; (8002298 <HAL_RCC_OscConfig+0x4f4>)
 80020c0:	6a1b      	ldr	r3, [r3, #32]
 80020c2:	4a75      	ldr	r2, [pc, #468]	; (8002298 <HAL_RCC_OscConfig+0x4f4>)
 80020c4:	f023 0301 	bic.w	r3, r3, #1
 80020c8:	6213      	str	r3, [r2, #32]
 80020ca:	4b73      	ldr	r3, [pc, #460]	; (8002298 <HAL_RCC_OscConfig+0x4f4>)
 80020cc:	6a1b      	ldr	r3, [r3, #32]
 80020ce:	4a72      	ldr	r2, [pc, #456]	; (8002298 <HAL_RCC_OscConfig+0x4f4>)
 80020d0:	f023 0304 	bic.w	r3, r3, #4
 80020d4:	6213      	str	r3, [r2, #32]
 80020d6:	e01c      	b.n	8002112 <HAL_RCC_OscConfig+0x36e>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	2b05      	cmp	r3, #5
 80020de:	d10c      	bne.n	80020fa <HAL_RCC_OscConfig+0x356>
 80020e0:	4b6d      	ldr	r3, [pc, #436]	; (8002298 <HAL_RCC_OscConfig+0x4f4>)
 80020e2:	6a1b      	ldr	r3, [r3, #32]
 80020e4:	4a6c      	ldr	r2, [pc, #432]	; (8002298 <HAL_RCC_OscConfig+0x4f4>)
 80020e6:	f043 0304 	orr.w	r3, r3, #4
 80020ea:	6213      	str	r3, [r2, #32]
 80020ec:	4b6a      	ldr	r3, [pc, #424]	; (8002298 <HAL_RCC_OscConfig+0x4f4>)
 80020ee:	6a1b      	ldr	r3, [r3, #32]
 80020f0:	4a69      	ldr	r2, [pc, #420]	; (8002298 <HAL_RCC_OscConfig+0x4f4>)
 80020f2:	f043 0301 	orr.w	r3, r3, #1
 80020f6:	6213      	str	r3, [r2, #32]
 80020f8:	e00b      	b.n	8002112 <HAL_RCC_OscConfig+0x36e>
 80020fa:	4b67      	ldr	r3, [pc, #412]	; (8002298 <HAL_RCC_OscConfig+0x4f4>)
 80020fc:	6a1b      	ldr	r3, [r3, #32]
 80020fe:	4a66      	ldr	r2, [pc, #408]	; (8002298 <HAL_RCC_OscConfig+0x4f4>)
 8002100:	f023 0301 	bic.w	r3, r3, #1
 8002104:	6213      	str	r3, [r2, #32]
 8002106:	4b64      	ldr	r3, [pc, #400]	; (8002298 <HAL_RCC_OscConfig+0x4f4>)
 8002108:	6a1b      	ldr	r3, [r3, #32]
 800210a:	4a63      	ldr	r2, [pc, #396]	; (8002298 <HAL_RCC_OscConfig+0x4f4>)
 800210c:	f023 0304 	bic.w	r3, r3, #4
 8002110:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	68db      	ldr	r3, [r3, #12]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d015      	beq.n	8002146 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800211a:	f7ff fb69 	bl	80017f0 <HAL_GetTick>
 800211e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002120:	e00a      	b.n	8002138 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002122:	f7ff fb65 	bl	80017f0 <HAL_GetTick>
 8002126:	4602      	mov	r2, r0
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	1ad3      	subs	r3, r2, r3
 800212c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002130:	4293      	cmp	r3, r2
 8002132:	d901      	bls.n	8002138 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002134:	2303      	movs	r3, #3
 8002136:	e0ab      	b.n	8002290 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002138:	4b57      	ldr	r3, [pc, #348]	; (8002298 <HAL_RCC_OscConfig+0x4f4>)
 800213a:	6a1b      	ldr	r3, [r3, #32]
 800213c:	f003 0302 	and.w	r3, r3, #2
 8002140:	2b00      	cmp	r3, #0
 8002142:	d0ee      	beq.n	8002122 <HAL_RCC_OscConfig+0x37e>
 8002144:	e014      	b.n	8002170 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002146:	f7ff fb53 	bl	80017f0 <HAL_GetTick>
 800214a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800214c:	e00a      	b.n	8002164 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800214e:	f7ff fb4f 	bl	80017f0 <HAL_GetTick>
 8002152:	4602      	mov	r2, r0
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	1ad3      	subs	r3, r2, r3
 8002158:	f241 3288 	movw	r2, #5000	; 0x1388
 800215c:	4293      	cmp	r3, r2
 800215e:	d901      	bls.n	8002164 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002160:	2303      	movs	r3, #3
 8002162:	e095      	b.n	8002290 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002164:	4b4c      	ldr	r3, [pc, #304]	; (8002298 <HAL_RCC_OscConfig+0x4f4>)
 8002166:	6a1b      	ldr	r3, [r3, #32]
 8002168:	f003 0302 	and.w	r3, r3, #2
 800216c:	2b00      	cmp	r3, #0
 800216e:	d1ee      	bne.n	800214e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002170:	7dfb      	ldrb	r3, [r7, #23]
 8002172:	2b01      	cmp	r3, #1
 8002174:	d105      	bne.n	8002182 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002176:	4b48      	ldr	r3, [pc, #288]	; (8002298 <HAL_RCC_OscConfig+0x4f4>)
 8002178:	69db      	ldr	r3, [r3, #28]
 800217a:	4a47      	ldr	r2, [pc, #284]	; (8002298 <HAL_RCC_OscConfig+0x4f4>)
 800217c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002180:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	69db      	ldr	r3, [r3, #28]
 8002186:	2b00      	cmp	r3, #0
 8002188:	f000 8081 	beq.w	800228e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800218c:	4b42      	ldr	r3, [pc, #264]	; (8002298 <HAL_RCC_OscConfig+0x4f4>)
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f003 030c 	and.w	r3, r3, #12
 8002194:	2b08      	cmp	r3, #8
 8002196:	d061      	beq.n	800225c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	69db      	ldr	r3, [r3, #28]
 800219c:	2b02      	cmp	r3, #2
 800219e:	d146      	bne.n	800222e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021a0:	4b3f      	ldr	r3, [pc, #252]	; (80022a0 <HAL_RCC_OscConfig+0x4fc>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021a6:	f7ff fb23 	bl	80017f0 <HAL_GetTick>
 80021aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021ac:	e008      	b.n	80021c0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021ae:	f7ff fb1f 	bl	80017f0 <HAL_GetTick>
 80021b2:	4602      	mov	r2, r0
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	1ad3      	subs	r3, r2, r3
 80021b8:	2b02      	cmp	r3, #2
 80021ba:	d901      	bls.n	80021c0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80021bc:	2303      	movs	r3, #3
 80021be:	e067      	b.n	8002290 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021c0:	4b35      	ldr	r3, [pc, #212]	; (8002298 <HAL_RCC_OscConfig+0x4f4>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d1f0      	bne.n	80021ae <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6a1b      	ldr	r3, [r3, #32]
 80021d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021d4:	d108      	bne.n	80021e8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80021d6:	4b30      	ldr	r3, [pc, #192]	; (8002298 <HAL_RCC_OscConfig+0x4f4>)
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	492d      	ldr	r1, [pc, #180]	; (8002298 <HAL_RCC_OscConfig+0x4f4>)
 80021e4:	4313      	orrs	r3, r2
 80021e6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021e8:	4b2b      	ldr	r3, [pc, #172]	; (8002298 <HAL_RCC_OscConfig+0x4f4>)
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6a19      	ldr	r1, [r3, #32]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f8:	430b      	orrs	r3, r1
 80021fa:	4927      	ldr	r1, [pc, #156]	; (8002298 <HAL_RCC_OscConfig+0x4f4>)
 80021fc:	4313      	orrs	r3, r2
 80021fe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002200:	4b27      	ldr	r3, [pc, #156]	; (80022a0 <HAL_RCC_OscConfig+0x4fc>)
 8002202:	2201      	movs	r2, #1
 8002204:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002206:	f7ff faf3 	bl	80017f0 <HAL_GetTick>
 800220a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800220c:	e008      	b.n	8002220 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800220e:	f7ff faef 	bl	80017f0 <HAL_GetTick>
 8002212:	4602      	mov	r2, r0
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	1ad3      	subs	r3, r2, r3
 8002218:	2b02      	cmp	r3, #2
 800221a:	d901      	bls.n	8002220 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800221c:	2303      	movs	r3, #3
 800221e:	e037      	b.n	8002290 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002220:	4b1d      	ldr	r3, [pc, #116]	; (8002298 <HAL_RCC_OscConfig+0x4f4>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002228:	2b00      	cmp	r3, #0
 800222a:	d0f0      	beq.n	800220e <HAL_RCC_OscConfig+0x46a>
 800222c:	e02f      	b.n	800228e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800222e:	4b1c      	ldr	r3, [pc, #112]	; (80022a0 <HAL_RCC_OscConfig+0x4fc>)
 8002230:	2200      	movs	r2, #0
 8002232:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002234:	f7ff fadc 	bl	80017f0 <HAL_GetTick>
 8002238:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800223a:	e008      	b.n	800224e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800223c:	f7ff fad8 	bl	80017f0 <HAL_GetTick>
 8002240:	4602      	mov	r2, r0
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	2b02      	cmp	r3, #2
 8002248:	d901      	bls.n	800224e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800224a:	2303      	movs	r3, #3
 800224c:	e020      	b.n	8002290 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800224e:	4b12      	ldr	r3, [pc, #72]	; (8002298 <HAL_RCC_OscConfig+0x4f4>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d1f0      	bne.n	800223c <HAL_RCC_OscConfig+0x498>
 800225a:	e018      	b.n	800228e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	69db      	ldr	r3, [r3, #28]
 8002260:	2b01      	cmp	r3, #1
 8002262:	d101      	bne.n	8002268 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	e013      	b.n	8002290 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002268:	4b0b      	ldr	r3, [pc, #44]	; (8002298 <HAL_RCC_OscConfig+0x4f4>)
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6a1b      	ldr	r3, [r3, #32]
 8002278:	429a      	cmp	r2, r3
 800227a:	d106      	bne.n	800228a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002286:	429a      	cmp	r2, r3
 8002288:	d001      	beq.n	800228e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e000      	b.n	8002290 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800228e:	2300      	movs	r3, #0
}
 8002290:	4618      	mov	r0, r3
 8002292:	3718      	adds	r7, #24
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}
 8002298:	40021000 	.word	0x40021000
 800229c:	40007000 	.word	0x40007000
 80022a0:	42420060 	.word	0x42420060

080022a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b084      	sub	sp, #16
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d101      	bne.n	80022b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	e0d0      	b.n	800245a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022b8:	4b6a      	ldr	r3, [pc, #424]	; (8002464 <HAL_RCC_ClockConfig+0x1c0>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f003 0307 	and.w	r3, r3, #7
 80022c0:	683a      	ldr	r2, [r7, #0]
 80022c2:	429a      	cmp	r2, r3
 80022c4:	d910      	bls.n	80022e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022c6:	4b67      	ldr	r3, [pc, #412]	; (8002464 <HAL_RCC_ClockConfig+0x1c0>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f023 0207 	bic.w	r2, r3, #7
 80022ce:	4965      	ldr	r1, [pc, #404]	; (8002464 <HAL_RCC_ClockConfig+0x1c0>)
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	4313      	orrs	r3, r2
 80022d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022d6:	4b63      	ldr	r3, [pc, #396]	; (8002464 <HAL_RCC_ClockConfig+0x1c0>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 0307 	and.w	r3, r3, #7
 80022de:	683a      	ldr	r2, [r7, #0]
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d001      	beq.n	80022e8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	e0b8      	b.n	800245a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 0302 	and.w	r3, r3, #2
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d020      	beq.n	8002336 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0304 	and.w	r3, r3, #4
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d005      	beq.n	800230c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002300:	4b59      	ldr	r3, [pc, #356]	; (8002468 <HAL_RCC_ClockConfig+0x1c4>)
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	4a58      	ldr	r2, [pc, #352]	; (8002468 <HAL_RCC_ClockConfig+0x1c4>)
 8002306:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800230a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 0308 	and.w	r3, r3, #8
 8002314:	2b00      	cmp	r3, #0
 8002316:	d005      	beq.n	8002324 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002318:	4b53      	ldr	r3, [pc, #332]	; (8002468 <HAL_RCC_ClockConfig+0x1c4>)
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	4a52      	ldr	r2, [pc, #328]	; (8002468 <HAL_RCC_ClockConfig+0x1c4>)
 800231e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002322:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002324:	4b50      	ldr	r3, [pc, #320]	; (8002468 <HAL_RCC_ClockConfig+0x1c4>)
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	494d      	ldr	r1, [pc, #308]	; (8002468 <HAL_RCC_ClockConfig+0x1c4>)
 8002332:	4313      	orrs	r3, r2
 8002334:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 0301 	and.w	r3, r3, #1
 800233e:	2b00      	cmp	r3, #0
 8002340:	d040      	beq.n	80023c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	2b01      	cmp	r3, #1
 8002348:	d107      	bne.n	800235a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800234a:	4b47      	ldr	r3, [pc, #284]	; (8002468 <HAL_RCC_ClockConfig+0x1c4>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d115      	bne.n	8002382 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e07f      	b.n	800245a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	2b02      	cmp	r3, #2
 8002360:	d107      	bne.n	8002372 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002362:	4b41      	ldr	r3, [pc, #260]	; (8002468 <HAL_RCC_ClockConfig+0x1c4>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d109      	bne.n	8002382 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e073      	b.n	800245a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002372:	4b3d      	ldr	r3, [pc, #244]	; (8002468 <HAL_RCC_ClockConfig+0x1c4>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0302 	and.w	r3, r3, #2
 800237a:	2b00      	cmp	r3, #0
 800237c:	d101      	bne.n	8002382 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e06b      	b.n	800245a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002382:	4b39      	ldr	r3, [pc, #228]	; (8002468 <HAL_RCC_ClockConfig+0x1c4>)
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	f023 0203 	bic.w	r2, r3, #3
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	4936      	ldr	r1, [pc, #216]	; (8002468 <HAL_RCC_ClockConfig+0x1c4>)
 8002390:	4313      	orrs	r3, r2
 8002392:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002394:	f7ff fa2c 	bl	80017f0 <HAL_GetTick>
 8002398:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800239a:	e00a      	b.n	80023b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800239c:	f7ff fa28 	bl	80017f0 <HAL_GetTick>
 80023a0:	4602      	mov	r2, r0
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d901      	bls.n	80023b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023ae:	2303      	movs	r3, #3
 80023b0:	e053      	b.n	800245a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023b2:	4b2d      	ldr	r3, [pc, #180]	; (8002468 <HAL_RCC_ClockConfig+0x1c4>)
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	f003 020c 	and.w	r2, r3, #12
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d1eb      	bne.n	800239c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023c4:	4b27      	ldr	r3, [pc, #156]	; (8002464 <HAL_RCC_ClockConfig+0x1c0>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0307 	and.w	r3, r3, #7
 80023cc:	683a      	ldr	r2, [r7, #0]
 80023ce:	429a      	cmp	r2, r3
 80023d0:	d210      	bcs.n	80023f4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023d2:	4b24      	ldr	r3, [pc, #144]	; (8002464 <HAL_RCC_ClockConfig+0x1c0>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f023 0207 	bic.w	r2, r3, #7
 80023da:	4922      	ldr	r1, [pc, #136]	; (8002464 <HAL_RCC_ClockConfig+0x1c0>)
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	4313      	orrs	r3, r2
 80023e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023e2:	4b20      	ldr	r3, [pc, #128]	; (8002464 <HAL_RCC_ClockConfig+0x1c0>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0307 	and.w	r3, r3, #7
 80023ea:	683a      	ldr	r2, [r7, #0]
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d001      	beq.n	80023f4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e032      	b.n	800245a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 0304 	and.w	r3, r3, #4
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d008      	beq.n	8002412 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002400:	4b19      	ldr	r3, [pc, #100]	; (8002468 <HAL_RCC_ClockConfig+0x1c4>)
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	4916      	ldr	r1, [pc, #88]	; (8002468 <HAL_RCC_ClockConfig+0x1c4>)
 800240e:	4313      	orrs	r3, r2
 8002410:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0308 	and.w	r3, r3, #8
 800241a:	2b00      	cmp	r3, #0
 800241c:	d009      	beq.n	8002432 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800241e:	4b12      	ldr	r3, [pc, #72]	; (8002468 <HAL_RCC_ClockConfig+0x1c4>)
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	691b      	ldr	r3, [r3, #16]
 800242a:	00db      	lsls	r3, r3, #3
 800242c:	490e      	ldr	r1, [pc, #56]	; (8002468 <HAL_RCC_ClockConfig+0x1c4>)
 800242e:	4313      	orrs	r3, r2
 8002430:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002432:	f000 f821 	bl	8002478 <HAL_RCC_GetSysClockFreq>
 8002436:	4602      	mov	r2, r0
 8002438:	4b0b      	ldr	r3, [pc, #44]	; (8002468 <HAL_RCC_ClockConfig+0x1c4>)
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	091b      	lsrs	r3, r3, #4
 800243e:	f003 030f 	and.w	r3, r3, #15
 8002442:	490a      	ldr	r1, [pc, #40]	; (800246c <HAL_RCC_ClockConfig+0x1c8>)
 8002444:	5ccb      	ldrb	r3, [r1, r3]
 8002446:	fa22 f303 	lsr.w	r3, r2, r3
 800244a:	4a09      	ldr	r2, [pc, #36]	; (8002470 <HAL_RCC_ClockConfig+0x1cc>)
 800244c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800244e:	4b09      	ldr	r3, [pc, #36]	; (8002474 <HAL_RCC_ClockConfig+0x1d0>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4618      	mov	r0, r3
 8002454:	f7ff f98a 	bl	800176c <HAL_InitTick>

  return HAL_OK;
 8002458:	2300      	movs	r3, #0
}
 800245a:	4618      	mov	r0, r3
 800245c:	3710      	adds	r7, #16
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	40022000 	.word	0x40022000
 8002468:	40021000 	.word	0x40021000
 800246c:	08002d9c 	.word	0x08002d9c
 8002470:	20000044 	.word	0x20000044
 8002474:	20000048 	.word	0x20000048

08002478 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002478:	b480      	push	{r7}
 800247a:	b087      	sub	sp, #28
 800247c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800247e:	2300      	movs	r3, #0
 8002480:	60fb      	str	r3, [r7, #12]
 8002482:	2300      	movs	r3, #0
 8002484:	60bb      	str	r3, [r7, #8]
 8002486:	2300      	movs	r3, #0
 8002488:	617b      	str	r3, [r7, #20]
 800248a:	2300      	movs	r3, #0
 800248c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800248e:	2300      	movs	r3, #0
 8002490:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002492:	4b1e      	ldr	r3, [pc, #120]	; (800250c <HAL_RCC_GetSysClockFreq+0x94>)
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	f003 030c 	and.w	r3, r3, #12
 800249e:	2b04      	cmp	r3, #4
 80024a0:	d002      	beq.n	80024a8 <HAL_RCC_GetSysClockFreq+0x30>
 80024a2:	2b08      	cmp	r3, #8
 80024a4:	d003      	beq.n	80024ae <HAL_RCC_GetSysClockFreq+0x36>
 80024a6:	e027      	b.n	80024f8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80024a8:	4b19      	ldr	r3, [pc, #100]	; (8002510 <HAL_RCC_GetSysClockFreq+0x98>)
 80024aa:	613b      	str	r3, [r7, #16]
      break;
 80024ac:	e027      	b.n	80024fe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	0c9b      	lsrs	r3, r3, #18
 80024b2:	f003 030f 	and.w	r3, r3, #15
 80024b6:	4a17      	ldr	r2, [pc, #92]	; (8002514 <HAL_RCC_GetSysClockFreq+0x9c>)
 80024b8:	5cd3      	ldrb	r3, [r2, r3]
 80024ba:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d010      	beq.n	80024e8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80024c6:	4b11      	ldr	r3, [pc, #68]	; (800250c <HAL_RCC_GetSysClockFreq+0x94>)
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	0c5b      	lsrs	r3, r3, #17
 80024cc:	f003 0301 	and.w	r3, r3, #1
 80024d0:	4a11      	ldr	r2, [pc, #68]	; (8002518 <HAL_RCC_GetSysClockFreq+0xa0>)
 80024d2:	5cd3      	ldrb	r3, [r2, r3]
 80024d4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4a0d      	ldr	r2, [pc, #52]	; (8002510 <HAL_RCC_GetSysClockFreq+0x98>)
 80024da:	fb02 f203 	mul.w	r2, r2, r3
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80024e4:	617b      	str	r3, [r7, #20]
 80024e6:	e004      	b.n	80024f2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	4a0c      	ldr	r2, [pc, #48]	; (800251c <HAL_RCC_GetSysClockFreq+0xa4>)
 80024ec:	fb02 f303 	mul.w	r3, r2, r3
 80024f0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	613b      	str	r3, [r7, #16]
      break;
 80024f6:	e002      	b.n	80024fe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80024f8:	4b05      	ldr	r3, [pc, #20]	; (8002510 <HAL_RCC_GetSysClockFreq+0x98>)
 80024fa:	613b      	str	r3, [r7, #16]
      break;
 80024fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024fe:	693b      	ldr	r3, [r7, #16]
}
 8002500:	4618      	mov	r0, r3
 8002502:	371c      	adds	r7, #28
 8002504:	46bd      	mov	sp, r7
 8002506:	bc80      	pop	{r7}
 8002508:	4770      	bx	lr
 800250a:	bf00      	nop
 800250c:	40021000 	.word	0x40021000
 8002510:	007a1200 	.word	0x007a1200
 8002514:	08002dac 	.word	0x08002dac
 8002518:	08002dbc 	.word	0x08002dbc
 800251c:	003d0900 	.word	0x003d0900

08002520 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002520:	b480      	push	{r7}
 8002522:	b085      	sub	sp, #20
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002528:	4b0a      	ldr	r3, [pc, #40]	; (8002554 <RCC_Delay+0x34>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a0a      	ldr	r2, [pc, #40]	; (8002558 <RCC_Delay+0x38>)
 800252e:	fba2 2303 	umull	r2, r3, r2, r3
 8002532:	0a5b      	lsrs	r3, r3, #9
 8002534:	687a      	ldr	r2, [r7, #4]
 8002536:	fb02 f303 	mul.w	r3, r2, r3
 800253a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800253c:	bf00      	nop
  }
  while (Delay --);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	1e5a      	subs	r2, r3, #1
 8002542:	60fa      	str	r2, [r7, #12]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d1f9      	bne.n	800253c <RCC_Delay+0x1c>
}
 8002548:	bf00      	nop
 800254a:	bf00      	nop
 800254c:	3714      	adds	r7, #20
 800254e:	46bd      	mov	sp, r7
 8002550:	bc80      	pop	{r7}
 8002552:	4770      	bx	lr
 8002554:	20000044 	.word	0x20000044
 8002558:	10624dd3 	.word	0x10624dd3

0800255c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d101      	bne.n	800256e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e041      	b.n	80025f2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002574:	b2db      	uxtb	r3, r3
 8002576:	2b00      	cmp	r3, #0
 8002578:	d106      	bne.n	8002588 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2200      	movs	r2, #0
 800257e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f7ff f85a 	bl	800163c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2202      	movs	r2, #2
 800258c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	3304      	adds	r3, #4
 8002598:	4619      	mov	r1, r3
 800259a:	4610      	mov	r0, r2
 800259c:	f000 fa6e 	bl	8002a7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2201      	movs	r2, #1
 80025a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2201      	movs	r2, #1
 80025ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2201      	movs	r2, #1
 80025b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2201      	movs	r2, #1
 80025bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2201      	movs	r2, #1
 80025c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2201      	movs	r2, #1
 80025cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2201      	movs	r2, #1
 80025d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2201      	movs	r2, #1
 80025dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2201      	movs	r2, #1
 80025e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2201      	movs	r2, #1
 80025ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80025f0:	2300      	movs	r3, #0
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3708      	adds	r7, #8
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
	...

080025fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b085      	sub	sp, #20
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800260a:	b2db      	uxtb	r3, r3
 800260c:	2b01      	cmp	r3, #1
 800260e:	d001      	beq.n	8002614 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e035      	b.n	8002680 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2202      	movs	r2, #2
 8002618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	68da      	ldr	r2, [r3, #12]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f042 0201 	orr.w	r2, r2, #1
 800262a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a16      	ldr	r2, [pc, #88]	; (800268c <HAL_TIM_Base_Start_IT+0x90>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d009      	beq.n	800264a <HAL_TIM_Base_Start_IT+0x4e>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800263e:	d004      	beq.n	800264a <HAL_TIM_Base_Start_IT+0x4e>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a12      	ldr	r2, [pc, #72]	; (8002690 <HAL_TIM_Base_Start_IT+0x94>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d111      	bne.n	800266e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	f003 0307 	and.w	r3, r3, #7
 8002654:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	2b06      	cmp	r3, #6
 800265a:	d010      	beq.n	800267e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f042 0201 	orr.w	r2, r2, #1
 800266a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800266c:	e007      	b.n	800267e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f042 0201 	orr.w	r2, r2, #1
 800267c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800267e:	2300      	movs	r3, #0
}
 8002680:	4618      	mov	r0, r3
 8002682:	3714      	adds	r7, #20
 8002684:	46bd      	mov	sp, r7
 8002686:	bc80      	pop	{r7}
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop
 800268c:	40012c00 	.word	0x40012c00
 8002690:	40000400 	.word	0x40000400

08002694 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b082      	sub	sp, #8
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	691b      	ldr	r3, [r3, #16]
 80026a2:	f003 0302 	and.w	r3, r3, #2
 80026a6:	2b02      	cmp	r3, #2
 80026a8:	d122      	bne.n	80026f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	f003 0302 	and.w	r3, r3, #2
 80026b4:	2b02      	cmp	r3, #2
 80026b6:	d11b      	bne.n	80026f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f06f 0202 	mvn.w	r2, #2
 80026c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2201      	movs	r2, #1
 80026c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	699b      	ldr	r3, [r3, #24]
 80026ce:	f003 0303 	and.w	r3, r3, #3
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d003      	beq.n	80026de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f000 f9b4 	bl	8002a44 <HAL_TIM_IC_CaptureCallback>
 80026dc:	e005      	b.n	80026ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f000 f9a7 	bl	8002a32 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026e4:	6878      	ldr	r0, [r7, #4]
 80026e6:	f000 f9b6 	bl	8002a56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2200      	movs	r2, #0
 80026ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	691b      	ldr	r3, [r3, #16]
 80026f6:	f003 0304 	and.w	r3, r3, #4
 80026fa:	2b04      	cmp	r3, #4
 80026fc:	d122      	bne.n	8002744 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	f003 0304 	and.w	r3, r3, #4
 8002708:	2b04      	cmp	r3, #4
 800270a:	d11b      	bne.n	8002744 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f06f 0204 	mvn.w	r2, #4
 8002714:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2202      	movs	r2, #2
 800271a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	699b      	ldr	r3, [r3, #24]
 8002722:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002726:	2b00      	cmp	r3, #0
 8002728:	d003      	beq.n	8002732 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f000 f98a 	bl	8002a44 <HAL_TIM_IC_CaptureCallback>
 8002730:	e005      	b.n	800273e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f000 f97d 	bl	8002a32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002738:	6878      	ldr	r0, [r7, #4]
 800273a:	f000 f98c 	bl	8002a56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2200      	movs	r2, #0
 8002742:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	691b      	ldr	r3, [r3, #16]
 800274a:	f003 0308 	and.w	r3, r3, #8
 800274e:	2b08      	cmp	r3, #8
 8002750:	d122      	bne.n	8002798 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	f003 0308 	and.w	r3, r3, #8
 800275c:	2b08      	cmp	r3, #8
 800275e:	d11b      	bne.n	8002798 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f06f 0208 	mvn.w	r2, #8
 8002768:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2204      	movs	r2, #4
 800276e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	69db      	ldr	r3, [r3, #28]
 8002776:	f003 0303 	and.w	r3, r3, #3
 800277a:	2b00      	cmp	r3, #0
 800277c:	d003      	beq.n	8002786 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f000 f960 	bl	8002a44 <HAL_TIM_IC_CaptureCallback>
 8002784:	e005      	b.n	8002792 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	f000 f953 	bl	8002a32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	f000 f962 	bl	8002a56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2200      	movs	r2, #0
 8002796:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	691b      	ldr	r3, [r3, #16]
 800279e:	f003 0310 	and.w	r3, r3, #16
 80027a2:	2b10      	cmp	r3, #16
 80027a4:	d122      	bne.n	80027ec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	f003 0310 	and.w	r3, r3, #16
 80027b0:	2b10      	cmp	r3, #16
 80027b2:	d11b      	bne.n	80027ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f06f 0210 	mvn.w	r2, #16
 80027bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2208      	movs	r2, #8
 80027c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	69db      	ldr	r3, [r3, #28]
 80027ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d003      	beq.n	80027da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f000 f936 	bl	8002a44 <HAL_TIM_IC_CaptureCallback>
 80027d8:	e005      	b.n	80027e6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	f000 f929 	bl	8002a32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027e0:	6878      	ldr	r0, [r7, #4]
 80027e2:	f000 f938 	bl	8002a56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2200      	movs	r2, #0
 80027ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	691b      	ldr	r3, [r3, #16]
 80027f2:	f003 0301 	and.w	r3, r3, #1
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d10e      	bne.n	8002818 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	f003 0301 	and.w	r3, r3, #1
 8002804:	2b01      	cmp	r3, #1
 8002806:	d107      	bne.n	8002818 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f06f 0201 	mvn.w	r2, #1
 8002810:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f7fe fe0e 	bl	8001434 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	691b      	ldr	r3, [r3, #16]
 800281e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002822:	2b80      	cmp	r3, #128	; 0x80
 8002824:	d10e      	bne.n	8002844 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002830:	2b80      	cmp	r3, #128	; 0x80
 8002832:	d107      	bne.n	8002844 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800283c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f000 fa6b 	bl	8002d1a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	691b      	ldr	r3, [r3, #16]
 800284a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800284e:	2b40      	cmp	r3, #64	; 0x40
 8002850:	d10e      	bne.n	8002870 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800285c:	2b40      	cmp	r3, #64	; 0x40
 800285e:	d107      	bne.n	8002870 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002868:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f000 f8fc 	bl	8002a68 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	691b      	ldr	r3, [r3, #16]
 8002876:	f003 0320 	and.w	r3, r3, #32
 800287a:	2b20      	cmp	r3, #32
 800287c:	d10e      	bne.n	800289c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	f003 0320 	and.w	r3, r3, #32
 8002888:	2b20      	cmp	r3, #32
 800288a:	d107      	bne.n	800289c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f06f 0220 	mvn.w	r2, #32
 8002894:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f000 fa36 	bl	8002d08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800289c:	bf00      	nop
 800289e:	3708      	adds	r7, #8
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}

080028a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b084      	sub	sp, #16
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
 80028ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028ae:	2300      	movs	r3, #0
 80028b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d101      	bne.n	80028c0 <HAL_TIM_ConfigClockSource+0x1c>
 80028bc:	2302      	movs	r3, #2
 80028be:	e0b4      	b.n	8002a2a <HAL_TIM_ConfigClockSource+0x186>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2201      	movs	r2, #1
 80028c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2202      	movs	r2, #2
 80028cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80028de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80028e6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	68ba      	ldr	r2, [r7, #8]
 80028ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028f8:	d03e      	beq.n	8002978 <HAL_TIM_ConfigClockSource+0xd4>
 80028fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028fe:	f200 8087 	bhi.w	8002a10 <HAL_TIM_ConfigClockSource+0x16c>
 8002902:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002906:	f000 8086 	beq.w	8002a16 <HAL_TIM_ConfigClockSource+0x172>
 800290a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800290e:	d87f      	bhi.n	8002a10 <HAL_TIM_ConfigClockSource+0x16c>
 8002910:	2b70      	cmp	r3, #112	; 0x70
 8002912:	d01a      	beq.n	800294a <HAL_TIM_ConfigClockSource+0xa6>
 8002914:	2b70      	cmp	r3, #112	; 0x70
 8002916:	d87b      	bhi.n	8002a10 <HAL_TIM_ConfigClockSource+0x16c>
 8002918:	2b60      	cmp	r3, #96	; 0x60
 800291a:	d050      	beq.n	80029be <HAL_TIM_ConfigClockSource+0x11a>
 800291c:	2b60      	cmp	r3, #96	; 0x60
 800291e:	d877      	bhi.n	8002a10 <HAL_TIM_ConfigClockSource+0x16c>
 8002920:	2b50      	cmp	r3, #80	; 0x50
 8002922:	d03c      	beq.n	800299e <HAL_TIM_ConfigClockSource+0xfa>
 8002924:	2b50      	cmp	r3, #80	; 0x50
 8002926:	d873      	bhi.n	8002a10 <HAL_TIM_ConfigClockSource+0x16c>
 8002928:	2b40      	cmp	r3, #64	; 0x40
 800292a:	d058      	beq.n	80029de <HAL_TIM_ConfigClockSource+0x13a>
 800292c:	2b40      	cmp	r3, #64	; 0x40
 800292e:	d86f      	bhi.n	8002a10 <HAL_TIM_ConfigClockSource+0x16c>
 8002930:	2b30      	cmp	r3, #48	; 0x30
 8002932:	d064      	beq.n	80029fe <HAL_TIM_ConfigClockSource+0x15a>
 8002934:	2b30      	cmp	r3, #48	; 0x30
 8002936:	d86b      	bhi.n	8002a10 <HAL_TIM_ConfigClockSource+0x16c>
 8002938:	2b20      	cmp	r3, #32
 800293a:	d060      	beq.n	80029fe <HAL_TIM_ConfigClockSource+0x15a>
 800293c:	2b20      	cmp	r3, #32
 800293e:	d867      	bhi.n	8002a10 <HAL_TIM_ConfigClockSource+0x16c>
 8002940:	2b00      	cmp	r3, #0
 8002942:	d05c      	beq.n	80029fe <HAL_TIM_ConfigClockSource+0x15a>
 8002944:	2b10      	cmp	r3, #16
 8002946:	d05a      	beq.n	80029fe <HAL_TIM_ConfigClockSource+0x15a>
 8002948:	e062      	b.n	8002a10 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6818      	ldr	r0, [r3, #0]
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	6899      	ldr	r1, [r3, #8]
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	685a      	ldr	r2, [r3, #4]
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	68db      	ldr	r3, [r3, #12]
 800295a:	f000 f95e 	bl	8002c1a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800296c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	68ba      	ldr	r2, [r7, #8]
 8002974:	609a      	str	r2, [r3, #8]
      break;
 8002976:	e04f      	b.n	8002a18 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6818      	ldr	r0, [r3, #0]
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	6899      	ldr	r1, [r3, #8]
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	685a      	ldr	r2, [r3, #4]
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	f000 f947 	bl	8002c1a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	689a      	ldr	r2, [r3, #8]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800299a:	609a      	str	r2, [r3, #8]
      break;
 800299c:	e03c      	b.n	8002a18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6818      	ldr	r0, [r3, #0]
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	6859      	ldr	r1, [r3, #4]
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	68db      	ldr	r3, [r3, #12]
 80029aa:	461a      	mov	r2, r3
 80029ac:	f000 f8be 	bl	8002b2c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	2150      	movs	r1, #80	; 0x50
 80029b6:	4618      	mov	r0, r3
 80029b8:	f000 f915 	bl	8002be6 <TIM_ITRx_SetConfig>
      break;
 80029bc:	e02c      	b.n	8002a18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6818      	ldr	r0, [r3, #0]
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	6859      	ldr	r1, [r3, #4]
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	68db      	ldr	r3, [r3, #12]
 80029ca:	461a      	mov	r2, r3
 80029cc:	f000 f8dc 	bl	8002b88 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	2160      	movs	r1, #96	; 0x60
 80029d6:	4618      	mov	r0, r3
 80029d8:	f000 f905 	bl	8002be6 <TIM_ITRx_SetConfig>
      break;
 80029dc:	e01c      	b.n	8002a18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6818      	ldr	r0, [r3, #0]
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	6859      	ldr	r1, [r3, #4]
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	68db      	ldr	r3, [r3, #12]
 80029ea:	461a      	mov	r2, r3
 80029ec:	f000 f89e 	bl	8002b2c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	2140      	movs	r1, #64	; 0x40
 80029f6:	4618      	mov	r0, r3
 80029f8:	f000 f8f5 	bl	8002be6 <TIM_ITRx_SetConfig>
      break;
 80029fc:	e00c      	b.n	8002a18 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4619      	mov	r1, r3
 8002a08:	4610      	mov	r0, r2
 8002a0a:	f000 f8ec 	bl	8002be6 <TIM_ITRx_SetConfig>
      break;
 8002a0e:	e003      	b.n	8002a18 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	73fb      	strb	r3, [r7, #15]
      break;
 8002a14:	e000      	b.n	8002a18 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002a16:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2200      	movs	r2, #0
 8002a24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002a28:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3710      	adds	r7, #16
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}

08002a32 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a32:	b480      	push	{r7}
 8002a34:	b083      	sub	sp, #12
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002a3a:	bf00      	nop
 8002a3c:	370c      	adds	r7, #12
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bc80      	pop	{r7}
 8002a42:	4770      	bx	lr

08002a44 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b083      	sub	sp, #12
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002a4c:	bf00      	nop
 8002a4e:	370c      	adds	r7, #12
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bc80      	pop	{r7}
 8002a54:	4770      	bx	lr

08002a56 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002a56:	b480      	push	{r7}
 8002a58:	b083      	sub	sp, #12
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002a5e:	bf00      	nop
 8002a60:	370c      	adds	r7, #12
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bc80      	pop	{r7}
 8002a66:	4770      	bx	lr

08002a68 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b083      	sub	sp, #12
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002a70:	bf00      	nop
 8002a72:	370c      	adds	r7, #12
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bc80      	pop	{r7}
 8002a78:	4770      	bx	lr
	...

08002a7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b085      	sub	sp, #20
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	4a25      	ldr	r2, [pc, #148]	; (8002b24 <TIM_Base_SetConfig+0xa8>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d007      	beq.n	8002aa4 <TIM_Base_SetConfig+0x28>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a9a:	d003      	beq.n	8002aa4 <TIM_Base_SetConfig+0x28>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	4a22      	ldr	r2, [pc, #136]	; (8002b28 <TIM_Base_SetConfig+0xac>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d108      	bne.n	8002ab6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002aaa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	68fa      	ldr	r2, [r7, #12]
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	4a1a      	ldr	r2, [pc, #104]	; (8002b24 <TIM_Base_SetConfig+0xa8>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d007      	beq.n	8002ace <TIM_Base_SetConfig+0x52>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ac4:	d003      	beq.n	8002ace <TIM_Base_SetConfig+0x52>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	4a17      	ldr	r2, [pc, #92]	; (8002b28 <TIM_Base_SetConfig+0xac>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d108      	bne.n	8002ae0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ad4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	68db      	ldr	r3, [r3, #12]
 8002ada:	68fa      	ldr	r2, [r7, #12]
 8002adc:	4313      	orrs	r3, r2
 8002ade:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	695b      	ldr	r3, [r3, #20]
 8002aea:	4313      	orrs	r3, r2
 8002aec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	68fa      	ldr	r2, [r7, #12]
 8002af2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	689a      	ldr	r2, [r3, #8]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	4a07      	ldr	r2, [pc, #28]	; (8002b24 <TIM_Base_SetConfig+0xa8>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d103      	bne.n	8002b14 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	691a      	ldr	r2, [r3, #16]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2201      	movs	r2, #1
 8002b18:	615a      	str	r2, [r3, #20]
}
 8002b1a:	bf00      	nop
 8002b1c:	3714      	adds	r7, #20
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bc80      	pop	{r7}
 8002b22:	4770      	bx	lr
 8002b24:	40012c00 	.word	0x40012c00
 8002b28:	40000400 	.word	0x40000400

08002b2c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b087      	sub	sp, #28
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	60f8      	str	r0, [r7, #12]
 8002b34:	60b9      	str	r1, [r7, #8]
 8002b36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	6a1b      	ldr	r3, [r3, #32]
 8002b3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	6a1b      	ldr	r3, [r3, #32]
 8002b42:	f023 0201 	bic.w	r2, r3, #1
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	699b      	ldr	r3, [r3, #24]
 8002b4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	011b      	lsls	r3, r3, #4
 8002b5c:	693a      	ldr	r2, [r7, #16]
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	f023 030a 	bic.w	r3, r3, #10
 8002b68:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002b6a:	697a      	ldr	r2, [r7, #20]
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	693a      	ldr	r2, [r7, #16]
 8002b76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	697a      	ldr	r2, [r7, #20]
 8002b7c:	621a      	str	r2, [r3, #32]
}
 8002b7e:	bf00      	nop
 8002b80:	371c      	adds	r7, #28
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bc80      	pop	{r7}
 8002b86:	4770      	bx	lr

08002b88 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b087      	sub	sp, #28
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	60f8      	str	r0, [r7, #12]
 8002b90:	60b9      	str	r1, [r7, #8]
 8002b92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	6a1b      	ldr	r3, [r3, #32]
 8002b98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	6a1b      	ldr	r3, [r3, #32]
 8002b9e:	f023 0210 	bic.w	r2, r3, #16
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	699b      	ldr	r3, [r3, #24]
 8002baa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002bb2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	031b      	lsls	r3, r3, #12
 8002bb8:	693a      	ldr	r2, [r7, #16]
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002bc4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	011b      	lsls	r3, r3, #4
 8002bca:	697a      	ldr	r2, [r7, #20]
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	693a      	ldr	r2, [r7, #16]
 8002bd4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	697a      	ldr	r2, [r7, #20]
 8002bda:	621a      	str	r2, [r3, #32]
}
 8002bdc:	bf00      	nop
 8002bde:	371c      	adds	r7, #28
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bc80      	pop	{r7}
 8002be4:	4770      	bx	lr

08002be6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002be6:	b480      	push	{r7}
 8002be8:	b085      	sub	sp, #20
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	6078      	str	r0, [r7, #4]
 8002bee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bfc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002bfe:	683a      	ldr	r2, [r7, #0]
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	4313      	orrs	r3, r2
 8002c04:	f043 0307 	orr.w	r3, r3, #7
 8002c08:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	68fa      	ldr	r2, [r7, #12]
 8002c0e:	609a      	str	r2, [r3, #8]
}
 8002c10:	bf00      	nop
 8002c12:	3714      	adds	r7, #20
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bc80      	pop	{r7}
 8002c18:	4770      	bx	lr

08002c1a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002c1a:	b480      	push	{r7}
 8002c1c:	b087      	sub	sp, #28
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	60f8      	str	r0, [r7, #12]
 8002c22:	60b9      	str	r1, [r7, #8]
 8002c24:	607a      	str	r2, [r7, #4]
 8002c26:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c34:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	021a      	lsls	r2, r3, #8
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	431a      	orrs	r2, r3
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	4313      	orrs	r3, r2
 8002c42:	697a      	ldr	r2, [r7, #20]
 8002c44:	4313      	orrs	r3, r2
 8002c46:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	697a      	ldr	r2, [r7, #20]
 8002c4c:	609a      	str	r2, [r3, #8]
}
 8002c4e:	bf00      	nop
 8002c50:	371c      	adds	r7, #28
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bc80      	pop	{r7}
 8002c56:	4770      	bx	lr

08002c58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b085      	sub	sp, #20
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d101      	bne.n	8002c70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002c6c:	2302      	movs	r3, #2
 8002c6e:	e041      	b.n	8002cf4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2201      	movs	r2, #1
 8002c74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2202      	movs	r2, #2
 8002c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c96:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	68fa      	ldr	r2, [r7, #12]
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	68fa      	ldr	r2, [r7, #12]
 8002ca8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a14      	ldr	r2, [pc, #80]	; (8002d00 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d009      	beq.n	8002cc8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cbc:	d004      	beq.n	8002cc8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a10      	ldr	r2, [pc, #64]	; (8002d04 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d10c      	bne.n	8002ce2 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002cce:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	68ba      	ldr	r2, [r7, #8]
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	68ba      	ldr	r2, [r7, #8]
 8002ce0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2200      	movs	r2, #0
 8002cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002cf2:	2300      	movs	r3, #0
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	3714      	adds	r7, #20
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bc80      	pop	{r7}
 8002cfc:	4770      	bx	lr
 8002cfe:	bf00      	nop
 8002d00:	40012c00 	.word	0x40012c00
 8002d04:	40000400 	.word	0x40000400

08002d08 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d10:	bf00      	nop
 8002d12:	370c      	adds	r7, #12
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bc80      	pop	{r7}
 8002d18:	4770      	bx	lr

08002d1a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d1a:	b480      	push	{r7}
 8002d1c:	b083      	sub	sp, #12
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002d22:	bf00      	nop
 8002d24:	370c      	adds	r7, #12
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bc80      	pop	{r7}
 8002d2a:	4770      	bx	lr

08002d2c <__libc_init_array>:
 8002d2c:	b570      	push	{r4, r5, r6, lr}
 8002d2e:	2600      	movs	r6, #0
 8002d30:	4d0c      	ldr	r5, [pc, #48]	; (8002d64 <__libc_init_array+0x38>)
 8002d32:	4c0d      	ldr	r4, [pc, #52]	; (8002d68 <__libc_init_array+0x3c>)
 8002d34:	1b64      	subs	r4, r4, r5
 8002d36:	10a4      	asrs	r4, r4, #2
 8002d38:	42a6      	cmp	r6, r4
 8002d3a:	d109      	bne.n	8002d50 <__libc_init_array+0x24>
 8002d3c:	f000 f822 	bl	8002d84 <_init>
 8002d40:	2600      	movs	r6, #0
 8002d42:	4d0a      	ldr	r5, [pc, #40]	; (8002d6c <__libc_init_array+0x40>)
 8002d44:	4c0a      	ldr	r4, [pc, #40]	; (8002d70 <__libc_init_array+0x44>)
 8002d46:	1b64      	subs	r4, r4, r5
 8002d48:	10a4      	asrs	r4, r4, #2
 8002d4a:	42a6      	cmp	r6, r4
 8002d4c:	d105      	bne.n	8002d5a <__libc_init_array+0x2e>
 8002d4e:	bd70      	pop	{r4, r5, r6, pc}
 8002d50:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d54:	4798      	blx	r3
 8002d56:	3601      	adds	r6, #1
 8002d58:	e7ee      	b.n	8002d38 <__libc_init_array+0xc>
 8002d5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d5e:	4798      	blx	r3
 8002d60:	3601      	adds	r6, #1
 8002d62:	e7f2      	b.n	8002d4a <__libc_init_array+0x1e>
 8002d64:	08002dc0 	.word	0x08002dc0
 8002d68:	08002dc0 	.word	0x08002dc0
 8002d6c:	08002dc0 	.word	0x08002dc0
 8002d70:	08002dc4 	.word	0x08002dc4

08002d74 <memset>:
 8002d74:	4603      	mov	r3, r0
 8002d76:	4402      	add	r2, r0
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d100      	bne.n	8002d7e <memset+0xa>
 8002d7c:	4770      	bx	lr
 8002d7e:	f803 1b01 	strb.w	r1, [r3], #1
 8002d82:	e7f9      	b.n	8002d78 <memset+0x4>

08002d84 <_init>:
 8002d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d86:	bf00      	nop
 8002d88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d8a:	bc08      	pop	{r3}
 8002d8c:	469e      	mov	lr, r3
 8002d8e:	4770      	bx	lr

08002d90 <_fini>:
 8002d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d92:	bf00      	nop
 8002d94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d96:	bc08      	pop	{r3}
 8002d98:	469e      	mov	lr, r3
 8002d9a:	4770      	bx	lr
