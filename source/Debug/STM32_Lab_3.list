
STM32_Lab_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000030ec  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080031f8  080031f8  000131f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800321c  0800321c  00020050  2**0
                  CONTENTS
  4 .ARM          00000000  0800321c  0800321c  00020050  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800321c  0800321c  00020050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800321c  0800321c  0001321c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003220  08003220  00013220  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000050  20000000  08003224  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a8  20000050  08003274  00020050  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001f8  08003274  000201f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009bb1  00000000  00000000  00020079  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d5c  00000000  00000000  00029c2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a90  00000000  00000000  0002b988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000970  00000000  00000000  0002c418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016fe0  00000000  00000000  0002cd88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c8b4  00000000  00000000  00043d68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000825e3  00000000  00000000  0005061c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d2bff  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002970  00000000  00000000  000d2c54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000050 	.word	0x20000050
 8000128:	00000000 	.word	0x00000000
 800012c:	080031e0 	.word	0x080031e0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000054 	.word	0x20000054
 8000148:	080031e0 	.word	0x080031e0

0800014c <fsm_automatic_run>:
 */


#include "fsm_automatic.h"

void fsm_automatic_run(){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	switch(status){
 8000150:	4ba2      	ldr	r3, [pc, #648]	; (80003dc <fsm_automatic_run+0x290>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	3b01      	subs	r3, #1
 8000156:	2b17      	cmp	r3, #23
 8000158:	f200 8138 	bhi.w	80003cc <fsm_automatic_run+0x280>
 800015c:	a201      	add	r2, pc, #4	; (adr r2, 8000164 <fsm_automatic_run+0x18>)
 800015e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000162:	bf00      	nop
 8000164:	080001c5 	.word	0x080001c5
 8000168:	080003cd 	.word	0x080003cd
 800016c:	080003cd 	.word	0x080003cd
 8000170:	080003cd 	.word	0x080003cd
 8000174:	080003cd 	.word	0x080003cd
 8000178:	080003cd 	.word	0x080003cd
 800017c:	080003cd 	.word	0x080003cd
 8000180:	080003cd 	.word	0x080003cd
 8000184:	080003cd 	.word	0x080003cd
 8000188:	080003cd 	.word	0x080003cd
 800018c:	080003cd 	.word	0x080003cd
 8000190:	080003cd 	.word	0x080003cd
 8000194:	080003cd 	.word	0x080003cd
 8000198:	080003cd 	.word	0x080003cd
 800019c:	080003cd 	.word	0x080003cd
 80001a0:	080003cd 	.word	0x080003cd
 80001a4:	080003cd 	.word	0x080003cd
 80001a8:	080003cd 	.word	0x080003cd
 80001ac:	080003cd 	.word	0x080003cd
 80001b0:	080003cd 	.word	0x080003cd
 80001b4:	080001e1 	.word	0x080001e1
 80001b8:	0800024f 	.word	0x0800024f
 80001bc:	080002d9 	.word	0x080002d9
 80001c0:	08000345 	.word	0x08000345
	case INIT:
		//TODO
		status = RED_GREEN;
 80001c4:	4b85      	ldr	r3, [pc, #532]	; (80003dc <fsm_automatic_run+0x290>)
 80001c6:	2215      	movs	r2, #21
 80001c8:	601a      	str	r2, [r3, #0]
		setTimer(0, durationGREEN);
 80001ca:	4b85      	ldr	r3, [pc, #532]	; (80003e0 <fsm_automatic_run+0x294>)
 80001cc:	681b      	ldr	r3, [r3, #0]
 80001ce:	4619      	mov	r1, r3
 80001d0:	2000      	movs	r0, #0
 80001d2:	f001 fbab 	bl	800192c <setTimer>
		setTimerSecond(1000);
 80001d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001da:	f001 fb8b 	bl	80018f4 <setTimerSecond>
		break;
 80001de:	e110      	b.n	8000402 <fsm_automatic_run+0x2b6>
	case RED_GREEN:
		//TODO
		Traffic_setColor(1, AUTO_RED);
 80001e0:	2102      	movs	r1, #2
 80001e2:	2001      	movs	r0, #1
 80001e4:	f000 fb5a 	bl	800089c <Traffic_setColor>
		Traffic_setColor(2, AUTO_GREEN);
 80001e8:	2103      	movs	r1, #3
 80001ea:	2002      	movs	r0, #2
 80001ec:	f000 fb56 	bl	800089c <Traffic_setColor>
		if (timerSecond == 1){
 80001f0:	4b7c      	ldr	r3, [pc, #496]	; (80003e4 <fsm_automatic_run+0x298>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	2b01      	cmp	r3, #1
 80001f6:	d11b      	bne.n	8000230 <fsm_automatic_run+0xe4>
			setTimerSecond(1000);
 80001f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001fc:	f001 fb7a 	bl	80018f4 <setTimerSecond>
			timerTraffic1--;
 8000200:	4b79      	ldr	r3, [pc, #484]	; (80003e8 <fsm_automatic_run+0x29c>)
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	3b01      	subs	r3, #1
 8000206:	4a78      	ldr	r2, [pc, #480]	; (80003e8 <fsm_automatic_run+0x29c>)
 8000208:	6013      	str	r3, [r2, #0]
			timerTraffic2--;
 800020a:	4b78      	ldr	r3, [pc, #480]	; (80003ec <fsm_automatic_run+0x2a0>)
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	3b01      	subs	r3, #1
 8000210:	4a76      	ldr	r2, [pc, #472]	; (80003ec <fsm_automatic_run+0x2a0>)
 8000212:	6013      	str	r3, [r2, #0]
			if (timerTraffic2 <= 0) timerTraffic2 = durationYELLOW / 1000;
 8000214:	4b75      	ldr	r3, [pc, #468]	; (80003ec <fsm_automatic_run+0x2a0>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	2b00      	cmp	r3, #0
 800021a:	dc09      	bgt.n	8000230 <fsm_automatic_run+0xe4>
 800021c:	4b74      	ldr	r3, [pc, #464]	; (80003f0 <fsm_automatic_run+0x2a4>)
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	4a74      	ldr	r2, [pc, #464]	; (80003f4 <fsm_automatic_run+0x2a8>)
 8000222:	fb82 1203 	smull	r1, r2, r2, r3
 8000226:	1192      	asrs	r2, r2, #6
 8000228:	17db      	asrs	r3, r3, #31
 800022a:	1ad3      	subs	r3, r2, r3
 800022c:	4a6f      	ldr	r2, [pc, #444]	; (80003ec <fsm_automatic_run+0x2a0>)
 800022e:	6013      	str	r3, [r2, #0]
		}
		// State update
		if (timerFlag[0] == 1){
 8000230:	4b71      	ldr	r3, [pc, #452]	; (80003f8 <fsm_automatic_run+0x2ac>)
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	2b01      	cmp	r3, #1
 8000236:	f040 80cb 	bne.w	80003d0 <fsm_automatic_run+0x284>
			setTimer(0, durationYELLOW);
 800023a:	4b6d      	ldr	r3, [pc, #436]	; (80003f0 <fsm_automatic_run+0x2a4>)
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	4619      	mov	r1, r3
 8000240:	2000      	movs	r0, #0
 8000242:	f001 fb73 	bl	800192c <setTimer>
			status = RED_YELLOW;
 8000246:	4b65      	ldr	r3, [pc, #404]	; (80003dc <fsm_automatic_run+0x290>)
 8000248:	2216      	movs	r2, #22
 800024a:	601a      	str	r2, [r3, #0]
		}
		break;
 800024c:	e0c0      	b.n	80003d0 <fsm_automatic_run+0x284>
	case RED_YELLOW:
		//TODO
		Traffic_setColor(1, AUTO_RED);
 800024e:	2102      	movs	r1, #2
 8000250:	2001      	movs	r0, #1
 8000252:	f000 fb23 	bl	800089c <Traffic_setColor>
		Traffic_setColor(2, AUTO_YELLOW);
 8000256:	2104      	movs	r1, #4
 8000258:	2002      	movs	r0, #2
 800025a:	f000 fb1f 	bl	800089c <Traffic_setColor>
		if (timerSecond == 1){
 800025e:	4b61      	ldr	r3, [pc, #388]	; (80003e4 <fsm_automatic_run+0x298>)
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	2b01      	cmp	r3, #1
 8000264:	d129      	bne.n	80002ba <fsm_automatic_run+0x16e>
			setTimerSecond(1000);
 8000266:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800026a:	f001 fb43 	bl	80018f4 <setTimerSecond>
			timerTraffic1--;
 800026e:	4b5e      	ldr	r3, [pc, #376]	; (80003e8 <fsm_automatic_run+0x29c>)
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	3b01      	subs	r3, #1
 8000274:	4a5c      	ldr	r2, [pc, #368]	; (80003e8 <fsm_automatic_run+0x29c>)
 8000276:	6013      	str	r3, [r2, #0]
			if (timerTraffic1 <= 0) timerTraffic1 = durationGREEN / 1000;
 8000278:	4b5b      	ldr	r3, [pc, #364]	; (80003e8 <fsm_automatic_run+0x29c>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	2b00      	cmp	r3, #0
 800027e:	dc09      	bgt.n	8000294 <fsm_automatic_run+0x148>
 8000280:	4b57      	ldr	r3, [pc, #348]	; (80003e0 <fsm_automatic_run+0x294>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	4a5b      	ldr	r2, [pc, #364]	; (80003f4 <fsm_automatic_run+0x2a8>)
 8000286:	fb82 1203 	smull	r1, r2, r2, r3
 800028a:	1192      	asrs	r2, r2, #6
 800028c:	17db      	asrs	r3, r3, #31
 800028e:	1ad3      	subs	r3, r2, r3
 8000290:	4a55      	ldr	r2, [pc, #340]	; (80003e8 <fsm_automatic_run+0x29c>)
 8000292:	6013      	str	r3, [r2, #0]
			timerTraffic2--;
 8000294:	4b55      	ldr	r3, [pc, #340]	; (80003ec <fsm_automatic_run+0x2a0>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	3b01      	subs	r3, #1
 800029a:	4a54      	ldr	r2, [pc, #336]	; (80003ec <fsm_automatic_run+0x2a0>)
 800029c:	6013      	str	r3, [r2, #0]
			if (timerTraffic2 <= 0) timerTraffic2 = durationRED / 1000;
 800029e:	4b53      	ldr	r3, [pc, #332]	; (80003ec <fsm_automatic_run+0x2a0>)
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	dc09      	bgt.n	80002ba <fsm_automatic_run+0x16e>
 80002a6:	4b55      	ldr	r3, [pc, #340]	; (80003fc <fsm_automatic_run+0x2b0>)
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	4a52      	ldr	r2, [pc, #328]	; (80003f4 <fsm_automatic_run+0x2a8>)
 80002ac:	fb82 1203 	smull	r1, r2, r2, r3
 80002b0:	1192      	asrs	r2, r2, #6
 80002b2:	17db      	asrs	r3, r3, #31
 80002b4:	1ad3      	subs	r3, r2, r3
 80002b6:	4a4d      	ldr	r2, [pc, #308]	; (80003ec <fsm_automatic_run+0x2a0>)
 80002b8:	6013      	str	r3, [r2, #0]
		}
		// State update
		if(timerFlag[0] == 1){
 80002ba:	4b4f      	ldr	r3, [pc, #316]	; (80003f8 <fsm_automatic_run+0x2ac>)
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	2b01      	cmp	r3, #1
 80002c0:	f040 8088 	bne.w	80003d4 <fsm_automatic_run+0x288>
			setTimer(0, durationGREEN);
 80002c4:	4b46      	ldr	r3, [pc, #280]	; (80003e0 <fsm_automatic_run+0x294>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	4619      	mov	r1, r3
 80002ca:	2000      	movs	r0, #0
 80002cc:	f001 fb2e 	bl	800192c <setTimer>
			status = GREEN_RED;
 80002d0:	4b42      	ldr	r3, [pc, #264]	; (80003dc <fsm_automatic_run+0x290>)
 80002d2:	2217      	movs	r2, #23
 80002d4:	601a      	str	r2, [r3, #0]
		}
		break;
 80002d6:	e07d      	b.n	80003d4 <fsm_automatic_run+0x288>
	case GREEN_RED:
		Traffic_setColor(1, AUTO_GREEN);
 80002d8:	2103      	movs	r1, #3
 80002da:	2001      	movs	r0, #1
 80002dc:	f000 fade 	bl	800089c <Traffic_setColor>
		Traffic_setColor(2, AUTO_RED);
 80002e0:	2102      	movs	r1, #2
 80002e2:	2002      	movs	r0, #2
 80002e4:	f000 fada 	bl	800089c <Traffic_setColor>
		if (timerSecond == 1){
 80002e8:	4b3e      	ldr	r3, [pc, #248]	; (80003e4 <fsm_automatic_run+0x298>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	2b01      	cmp	r3, #1
 80002ee:	d11b      	bne.n	8000328 <fsm_automatic_run+0x1dc>
			setTimerSecond(1000);
 80002f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002f4:	f001 fafe 	bl	80018f4 <setTimerSecond>
			timerTraffic1--;
 80002f8:	4b3b      	ldr	r3, [pc, #236]	; (80003e8 <fsm_automatic_run+0x29c>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	3b01      	subs	r3, #1
 80002fe:	4a3a      	ldr	r2, [pc, #232]	; (80003e8 <fsm_automatic_run+0x29c>)
 8000300:	6013      	str	r3, [r2, #0]
			if (timerTraffic1 <= 0) timerTraffic1 = durationYELLOW / 1000;
 8000302:	4b39      	ldr	r3, [pc, #228]	; (80003e8 <fsm_automatic_run+0x29c>)
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	2b00      	cmp	r3, #0
 8000308:	dc09      	bgt.n	800031e <fsm_automatic_run+0x1d2>
 800030a:	4b39      	ldr	r3, [pc, #228]	; (80003f0 <fsm_automatic_run+0x2a4>)
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	4a39      	ldr	r2, [pc, #228]	; (80003f4 <fsm_automatic_run+0x2a8>)
 8000310:	fb82 1203 	smull	r1, r2, r2, r3
 8000314:	1192      	asrs	r2, r2, #6
 8000316:	17db      	asrs	r3, r3, #31
 8000318:	1ad3      	subs	r3, r2, r3
 800031a:	4a33      	ldr	r2, [pc, #204]	; (80003e8 <fsm_automatic_run+0x29c>)
 800031c:	6013      	str	r3, [r2, #0]
			timerTraffic2--;
 800031e:	4b33      	ldr	r3, [pc, #204]	; (80003ec <fsm_automatic_run+0x2a0>)
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	3b01      	subs	r3, #1
 8000324:	4a31      	ldr	r2, [pc, #196]	; (80003ec <fsm_automatic_run+0x2a0>)
 8000326:	6013      	str	r3, [r2, #0]
		}
		// State update
		if(timerFlag[0] == 1){
 8000328:	4b33      	ldr	r3, [pc, #204]	; (80003f8 <fsm_automatic_run+0x2ac>)
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	2b01      	cmp	r3, #1
 800032e:	d153      	bne.n	80003d8 <fsm_automatic_run+0x28c>
			setTimer(0, durationYELLOW);
 8000330:	4b2f      	ldr	r3, [pc, #188]	; (80003f0 <fsm_automatic_run+0x2a4>)
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	4619      	mov	r1, r3
 8000336:	2000      	movs	r0, #0
 8000338:	f001 faf8 	bl	800192c <setTimer>
			status = YELLOW_RED;
 800033c:	4b27      	ldr	r3, [pc, #156]	; (80003dc <fsm_automatic_run+0x290>)
 800033e:	2218      	movs	r2, #24
 8000340:	601a      	str	r2, [r3, #0]
		}
		break;
 8000342:	e049      	b.n	80003d8 <fsm_automatic_run+0x28c>
	case YELLOW_RED:
		Traffic_setColor(1, AUTO_YELLOW);
 8000344:	2104      	movs	r1, #4
 8000346:	2001      	movs	r0, #1
 8000348:	f000 faa8 	bl	800089c <Traffic_setColor>
		Traffic_setColor(2, AUTO_RED);
 800034c:	2102      	movs	r1, #2
 800034e:	2002      	movs	r0, #2
 8000350:	f000 faa4 	bl	800089c <Traffic_setColor>
		if (timerSecond == 1){
 8000354:	4b23      	ldr	r3, [pc, #140]	; (80003e4 <fsm_automatic_run+0x298>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	2b01      	cmp	r3, #1
 800035a:	d129      	bne.n	80003b0 <fsm_automatic_run+0x264>
			setTimerSecond(1000);
 800035c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000360:	f001 fac8 	bl	80018f4 <setTimerSecond>
			timerTraffic1--;
 8000364:	4b20      	ldr	r3, [pc, #128]	; (80003e8 <fsm_automatic_run+0x29c>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	3b01      	subs	r3, #1
 800036a:	4a1f      	ldr	r2, [pc, #124]	; (80003e8 <fsm_automatic_run+0x29c>)
 800036c:	6013      	str	r3, [r2, #0]
			if (timerTraffic1 <= 0) timerTraffic1 = durationRED / 1000;
 800036e:	4b1e      	ldr	r3, [pc, #120]	; (80003e8 <fsm_automatic_run+0x29c>)
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	2b00      	cmp	r3, #0
 8000374:	dc09      	bgt.n	800038a <fsm_automatic_run+0x23e>
 8000376:	4b21      	ldr	r3, [pc, #132]	; (80003fc <fsm_automatic_run+0x2b0>)
 8000378:	681b      	ldr	r3, [r3, #0]
 800037a:	4a1e      	ldr	r2, [pc, #120]	; (80003f4 <fsm_automatic_run+0x2a8>)
 800037c:	fb82 1203 	smull	r1, r2, r2, r3
 8000380:	1192      	asrs	r2, r2, #6
 8000382:	17db      	asrs	r3, r3, #31
 8000384:	1ad3      	subs	r3, r2, r3
 8000386:	4a18      	ldr	r2, [pc, #96]	; (80003e8 <fsm_automatic_run+0x29c>)
 8000388:	6013      	str	r3, [r2, #0]
			timerTraffic2--;
 800038a:	4b18      	ldr	r3, [pc, #96]	; (80003ec <fsm_automatic_run+0x2a0>)
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	3b01      	subs	r3, #1
 8000390:	4a16      	ldr	r2, [pc, #88]	; (80003ec <fsm_automatic_run+0x2a0>)
 8000392:	6013      	str	r3, [r2, #0]
			if (timerTraffic2 <= 0) timerTraffic2 = durationGREEN / 1000;
 8000394:	4b15      	ldr	r3, [pc, #84]	; (80003ec <fsm_automatic_run+0x2a0>)
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	2b00      	cmp	r3, #0
 800039a:	dc09      	bgt.n	80003b0 <fsm_automatic_run+0x264>
 800039c:	4b10      	ldr	r3, [pc, #64]	; (80003e0 <fsm_automatic_run+0x294>)
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	4a14      	ldr	r2, [pc, #80]	; (80003f4 <fsm_automatic_run+0x2a8>)
 80003a2:	fb82 1203 	smull	r1, r2, r2, r3
 80003a6:	1192      	asrs	r2, r2, #6
 80003a8:	17db      	asrs	r3, r3, #31
 80003aa:	1ad3      	subs	r3, r2, r3
 80003ac:	4a0f      	ldr	r2, [pc, #60]	; (80003ec <fsm_automatic_run+0x2a0>)
 80003ae:	6013      	str	r3, [r2, #0]
		}
		// State update
		if (timerFlag[0] == 1){
 80003b0:	4b11      	ldr	r3, [pc, #68]	; (80003f8 <fsm_automatic_run+0x2ac>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	2b01      	cmp	r3, #1
 80003b6:	d123      	bne.n	8000400 <fsm_automatic_run+0x2b4>
			setTimer(0, durationGREEN);
 80003b8:	4b09      	ldr	r3, [pc, #36]	; (80003e0 <fsm_automatic_run+0x294>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	4619      	mov	r1, r3
 80003be:	2000      	movs	r0, #0
 80003c0:	f001 fab4 	bl	800192c <setTimer>
			status = RED_GREEN;
 80003c4:	4b05      	ldr	r3, [pc, #20]	; (80003dc <fsm_automatic_run+0x290>)
 80003c6:	2215      	movs	r2, #21
 80003c8:	601a      	str	r2, [r3, #0]
		}
		break;
 80003ca:	e019      	b.n	8000400 <fsm_automatic_run+0x2b4>
	default:
		break;
 80003cc:	bf00      	nop
 80003ce:	e018      	b.n	8000402 <fsm_automatic_run+0x2b6>
		break;
 80003d0:	bf00      	nop
 80003d2:	e016      	b.n	8000402 <fsm_automatic_run+0x2b6>
		break;
 80003d4:	bf00      	nop
 80003d6:	e014      	b.n	8000402 <fsm_automatic_run+0x2b6>
		break;
 80003d8:	bf00      	nop
 80003da:	e012      	b.n	8000402 <fsm_automatic_run+0x2b6>
 80003dc:	20000000 	.word	0x20000000
 80003e0:	2000000c 	.word	0x2000000c
 80003e4:	20000180 	.word	0x20000180
 80003e8:	2000006c 	.word	0x2000006c
 80003ec:	20000070 	.word	0x20000070
 80003f0:	20000008 	.word	0x20000008
 80003f4:	10624dd3 	.word	0x10624dd3
 80003f8:	20000188 	.word	0x20000188
 80003fc:	20000004 	.word	0x20000004
		break;
 8000400:	bf00      	nop
	}
	// MODE BUTTON
	if(isButtonPressed(0) == 1){
 8000402:	2000      	movs	r0, #0
 8000404:	f000 feb4 	bl	8001170 <isButtonPressed>
 8000408:	4603      	mov	r3, r0
 800040a:	2b01      	cmp	r3, #1
 800040c:	d147      	bne.n	800049e <fsm_automatic_run+0x352>
		if(status == RED_GREEN || status == RED_YELLOW || status == GREEN_RED || status == YELLOW_RED){
 800040e:	4b25      	ldr	r3, [pc, #148]	; (80004a4 <fsm_automatic_run+0x358>)
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	2b15      	cmp	r3, #21
 8000414:	d00b      	beq.n	800042e <fsm_automatic_run+0x2e2>
 8000416:	4b23      	ldr	r3, [pc, #140]	; (80004a4 <fsm_automatic_run+0x358>)
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	2b16      	cmp	r3, #22
 800041c:	d007      	beq.n	800042e <fsm_automatic_run+0x2e2>
 800041e:	4b21      	ldr	r3, [pc, #132]	; (80004a4 <fsm_automatic_run+0x358>)
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	2b17      	cmp	r3, #23
 8000424:	d003      	beq.n	800042e <fsm_automatic_run+0x2e2>
 8000426:	4b1f      	ldr	r3, [pc, #124]	; (80004a4 <fsm_automatic_run+0x358>)
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	2b18      	cmp	r3, #24
 800042c:	d134      	bne.n	8000498 <fsm_automatic_run+0x34c>
			status = MOD_RED;
 800042e:	4b1d      	ldr	r3, [pc, #116]	; (80004a4 <fsm_automatic_run+0x358>)
 8000430:	220b      	movs	r2, #11
 8000432:	601a      	str	r2, [r3, #0]
			setTimer(1, 10); // timer for blinky
 8000434:	210a      	movs	r1, #10
 8000436:	2001      	movs	r0, #1
 8000438:	f001 fa78 	bl	800192c <setTimer>
			Traffic_setColor(1, AUTO_RED);
 800043c:	2102      	movs	r1, #2
 800043e:	2001      	movs	r0, #1
 8000440:	f000 fa2c 	bl	800089c <Traffic_setColor>
			Traffic_setColor(2, AUTO_RED);
 8000444:	2102      	movs	r1, #2
 8000446:	2002      	movs	r0, #2
 8000448:	f000 fa28 	bl	800089c <Traffic_setColor>
			RED_sec = durationRED / 1000;
 800044c:	4b16      	ldr	r3, [pc, #88]	; (80004a8 <fsm_automatic_run+0x35c>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	4a16      	ldr	r2, [pc, #88]	; (80004ac <fsm_automatic_run+0x360>)
 8000452:	fb82 1203 	smull	r1, r2, r2, r3
 8000456:	1192      	asrs	r2, r2, #6
 8000458:	17db      	asrs	r3, r3, #31
 800045a:	1ad3      	subs	r3, r2, r3
 800045c:	4a14      	ldr	r2, [pc, #80]	; (80004b0 <fsm_automatic_run+0x364>)
 800045e:	6013      	str	r3, [r2, #0]
			YELLOW_sec = durationYELLOW / 1000;
 8000460:	4b14      	ldr	r3, [pc, #80]	; (80004b4 <fsm_automatic_run+0x368>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	4a11      	ldr	r2, [pc, #68]	; (80004ac <fsm_automatic_run+0x360>)
 8000466:	fb82 1203 	smull	r1, r2, r2, r3
 800046a:	1192      	asrs	r2, r2, #6
 800046c:	17db      	asrs	r3, r3, #31
 800046e:	1ad3      	subs	r3, r2, r3
 8000470:	4a11      	ldr	r2, [pc, #68]	; (80004b8 <fsm_automatic_run+0x36c>)
 8000472:	6013      	str	r3, [r2, #0]
			GREEN_sec = durationGREEN / 1000;
 8000474:	4b11      	ldr	r3, [pc, #68]	; (80004bc <fsm_automatic_run+0x370>)
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	4a0c      	ldr	r2, [pc, #48]	; (80004ac <fsm_automatic_run+0x360>)
 800047a:	fb82 1203 	smull	r1, r2, r2, r3
 800047e:	1192      	asrs	r2, r2, #6
 8000480:	17db      	asrs	r3, r3, #31
 8000482:	1ad3      	subs	r3, r2, r3
 8000484:	4a0e      	ldr	r2, [pc, #56]	; (80004c0 <fsm_automatic_run+0x374>)
 8000486:	6013      	str	r3, [r2, #0]
			timerTraffic1 = RED_sec;
 8000488:	4b09      	ldr	r3, [pc, #36]	; (80004b0 <fsm_automatic_run+0x364>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	4a0d      	ldr	r2, [pc, #52]	; (80004c4 <fsm_automatic_run+0x378>)
 800048e:	6013      	str	r3, [r2, #0]
			timerTraffic2 = 2;
 8000490:	4b0d      	ldr	r3, [pc, #52]	; (80004c8 <fsm_automatic_run+0x37c>)
 8000492:	2202      	movs	r2, #2
 8000494:	601a      	str	r2, [r3, #0]
		}
		else setBackButtonFlag(0);
	}

}
 8000496:	e002      	b.n	800049e <fsm_automatic_run+0x352>
		else setBackButtonFlag(0);
 8000498:	2000      	movs	r0, #0
 800049a:	f000 fe8b 	bl	80011b4 <setBackButtonFlag>
}
 800049e:	bf00      	nop
 80004a0:	bd80      	pop	{r7, pc}
 80004a2:	bf00      	nop
 80004a4:	20000000 	.word	0x20000000
 80004a8:	20000004 	.word	0x20000004
 80004ac:	10624dd3 	.word	0x10624dd3
 80004b0:	200001a8 	.word	0x200001a8
 80004b4:	20000008 	.word	0x20000008
 80004b8:	200001a4 	.word	0x200001a4
 80004bc:	2000000c 	.word	0x2000000c
 80004c0:	200001a0 	.word	0x200001a0
 80004c4:	2000006c 	.word	0x2000006c
 80004c8:	20000070 	.word	0x20000070

080004cc <fsm_manual_run>:
 *      Author: olkmphy
 */

#include "fsm_manual.h"

void fsm_manual_run(){
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
	switch(status){
 80004d2:	4ba7      	ldr	r3, [pc, #668]	; (8000770 <fsm_manual_run+0x2a4>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	2b0d      	cmp	r3, #13
 80004d8:	f000 80be 	beq.w	8000658 <fsm_manual_run+0x18c>
 80004dc:	2b0d      	cmp	r3, #13
 80004de:	f300 813c 	bgt.w	800075a <fsm_manual_run+0x28e>
 80004e2:	2b0b      	cmp	r3, #11
 80004e4:	d002      	beq.n	80004ec <fsm_manual_run+0x20>
 80004e6:	2b0c      	cmp	r3, #12
 80004e8:	d055      	beq.n	8000596 <fsm_manual_run+0xca>
				led_index = 0;
				clearEN();
			}
			break;
		default:
			break;
 80004ea:	e136      	b.n	800075a <fsm_manual_run+0x28e>
			if(timerFlag[1] == 1){
 80004ec:	4ba1      	ldr	r3, [pc, #644]	; (8000774 <fsm_manual_run+0x2a8>)
 80004ee:	685b      	ldr	r3, [r3, #4]
 80004f0:	2b01      	cmp	r3, #1
 80004f2:	d10b      	bne.n	800050c <fsm_manual_run+0x40>
				setTimer(1, 250); // blink every 0.25s
 80004f4:	21fa      	movs	r1, #250	; 0xfa
 80004f6:	2001      	movs	r0, #1
 80004f8:	f001 fa18 	bl	800192c <setTimer>
				blinkLEDs(TRAFFIC_1, AUTO_RED);
 80004fc:	2102      	movs	r1, #2
 80004fe:	2007      	movs	r0, #7
 8000500:	f000 f95a 	bl	80007b8 <blinkLEDs>
				blinkLEDs(TRAFFIC_2, AUTO_RED);
 8000504:	2102      	movs	r1, #2
 8000506:	2008      	movs	r0, #8
 8000508:	f000 f956 	bl	80007b8 <blinkLEDs>
			if(isButtonPressed(1) == 1){
 800050c:	2001      	movs	r0, #1
 800050e:	f000 fe2f 	bl	8001170 <isButtonPressed>
 8000512:	4603      	mov	r3, r0
 8000514:	2b01      	cmp	r3, #1
 8000516:	d114      	bne.n	8000542 <fsm_manual_run+0x76>
				RED_sec++;
 8000518:	4b97      	ldr	r3, [pc, #604]	; (8000778 <fsm_manual_run+0x2ac>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	3301      	adds	r3, #1
 800051e:	4a96      	ldr	r2, [pc, #600]	; (8000778 <fsm_manual_run+0x2ac>)
 8000520:	6013      	str	r3, [r2, #0]
				if(RED_sec >= 100) {
 8000522:	4b95      	ldr	r3, [pc, #596]	; (8000778 <fsm_manual_run+0x2ac>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	2b63      	cmp	r3, #99	; 0x63
 8000528:	dd06      	ble.n	8000538 <fsm_manual_run+0x6c>
					RED_sec = 1;
 800052a:	4b93      	ldr	r3, [pc, #588]	; (8000778 <fsm_manual_run+0x2ac>)
 800052c:	2201      	movs	r2, #1
 800052e:	601a      	str	r2, [r3, #0]
					timerTraffic1 = 1;
 8000530:	4b92      	ldr	r3, [pc, #584]	; (800077c <fsm_manual_run+0x2b0>)
 8000532:	2201      	movs	r2, #1
 8000534:	601a      	str	r2, [r3, #0]
 8000536:	e004      	b.n	8000542 <fsm_manual_run+0x76>
					timerTraffic1++;
 8000538:	4b90      	ldr	r3, [pc, #576]	; (800077c <fsm_manual_run+0x2b0>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	3301      	adds	r3, #1
 800053e:	4a8f      	ldr	r2, [pc, #572]	; (800077c <fsm_manual_run+0x2b0>)
 8000540:	6013      	str	r3, [r2, #0]
			if(isButtonPressed(2) == 1){
 8000542:	2002      	movs	r0, #2
 8000544:	f000 fe14 	bl	8001170 <isButtonPressed>
 8000548:	4603      	mov	r3, r0
 800054a:	2b01      	cmp	r3, #1
 800054c:	d107      	bne.n	800055e <fsm_manual_run+0x92>
				durationRED = RED_sec * 1000;
 800054e:	4b8a      	ldr	r3, [pc, #552]	; (8000778 <fsm_manual_run+0x2ac>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000556:	fb02 f303 	mul.w	r3, r2, r3
 800055a:	4a89      	ldr	r2, [pc, #548]	; (8000780 <fsm_manual_run+0x2b4>)
 800055c:	6013      	str	r3, [r2, #0]
			if(isButtonPressed(0) == 1){
 800055e:	2000      	movs	r0, #0
 8000560:	f000 fe06 	bl	8001170 <isButtonPressed>
 8000564:	4603      	mov	r3, r0
 8000566:	2b01      	cmp	r3, #1
 8000568:	f040 80f9 	bne.w	800075e <fsm_manual_run+0x292>
				setTimer(1, 10);
 800056c:	210a      	movs	r1, #10
 800056e:	2001      	movs	r0, #1
 8000570:	f001 f9dc 	bl	800192c <setTimer>
				status = MOD_YELLOW;
 8000574:	4b7e      	ldr	r3, [pc, #504]	; (8000770 <fsm_manual_run+0x2a4>)
 8000576:	220c      	movs	r2, #12
 8000578:	601a      	str	r2, [r3, #0]
				timerTraffic1 = durationYELLOW / 1000;
 800057a:	4b82      	ldr	r3, [pc, #520]	; (8000784 <fsm_manual_run+0x2b8>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	4a82      	ldr	r2, [pc, #520]	; (8000788 <fsm_manual_run+0x2bc>)
 8000580:	fb82 1203 	smull	r1, r2, r2, r3
 8000584:	1192      	asrs	r2, r2, #6
 8000586:	17db      	asrs	r3, r3, #31
 8000588:	1ad3      	subs	r3, r2, r3
 800058a:	4a7c      	ldr	r2, [pc, #496]	; (800077c <fsm_manual_run+0x2b0>)
 800058c:	6013      	str	r3, [r2, #0]
				timerTraffic2 = 3;
 800058e:	4b7f      	ldr	r3, [pc, #508]	; (800078c <fsm_manual_run+0x2c0>)
 8000590:	2203      	movs	r2, #3
 8000592:	601a      	str	r2, [r3, #0]
			break;
 8000594:	e0e3      	b.n	800075e <fsm_manual_run+0x292>
			if(timerFlag[1] == 1){
 8000596:	4b77      	ldr	r3, [pc, #476]	; (8000774 <fsm_manual_run+0x2a8>)
 8000598:	685b      	ldr	r3, [r3, #4]
 800059a:	2b01      	cmp	r3, #1
 800059c:	d10b      	bne.n	80005b6 <fsm_manual_run+0xea>
				setTimer(1, 250); // blink every 0.25s
 800059e:	21fa      	movs	r1, #250	; 0xfa
 80005a0:	2001      	movs	r0, #1
 80005a2:	f001 f9c3 	bl	800192c <setTimer>
				blinkLEDs(TRAFFIC_1, AUTO_YELLOW);
 80005a6:	2104      	movs	r1, #4
 80005a8:	2007      	movs	r0, #7
 80005aa:	f000 f905 	bl	80007b8 <blinkLEDs>
				blinkLEDs(TRAFFIC_2, AUTO_YELLOW);
 80005ae:	2104      	movs	r1, #4
 80005b0:	2008      	movs	r0, #8
 80005b2:	f000 f901 	bl	80007b8 <blinkLEDs>
			if(isButtonPressed(1) == 1){
 80005b6:	2001      	movs	r0, #1
 80005b8:	f000 fdda 	bl	8001170 <isButtonPressed>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b01      	cmp	r3, #1
 80005c0:	d114      	bne.n	80005ec <fsm_manual_run+0x120>
				YELLOW_sec++;
 80005c2:	4b73      	ldr	r3, [pc, #460]	; (8000790 <fsm_manual_run+0x2c4>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	3301      	adds	r3, #1
 80005c8:	4a71      	ldr	r2, [pc, #452]	; (8000790 <fsm_manual_run+0x2c4>)
 80005ca:	6013      	str	r3, [r2, #0]
				if(YELLOW_sec >= 100) {
 80005cc:	4b70      	ldr	r3, [pc, #448]	; (8000790 <fsm_manual_run+0x2c4>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	2b63      	cmp	r3, #99	; 0x63
 80005d2:	dd06      	ble.n	80005e2 <fsm_manual_run+0x116>
					YELLOW_sec = 1;
 80005d4:	4b6e      	ldr	r3, [pc, #440]	; (8000790 <fsm_manual_run+0x2c4>)
 80005d6:	2201      	movs	r2, #1
 80005d8:	601a      	str	r2, [r3, #0]
					timerTraffic1 = 1;
 80005da:	4b68      	ldr	r3, [pc, #416]	; (800077c <fsm_manual_run+0x2b0>)
 80005dc:	2201      	movs	r2, #1
 80005de:	601a      	str	r2, [r3, #0]
 80005e0:	e004      	b.n	80005ec <fsm_manual_run+0x120>
					timerTraffic1++;
 80005e2:	4b66      	ldr	r3, [pc, #408]	; (800077c <fsm_manual_run+0x2b0>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	3301      	adds	r3, #1
 80005e8:	4a64      	ldr	r2, [pc, #400]	; (800077c <fsm_manual_run+0x2b0>)
 80005ea:	6013      	str	r3, [r2, #0]
			if(isButtonPressed(2) == 1){
 80005ec:	2002      	movs	r0, #2
 80005ee:	f000 fdbf 	bl	8001170 <isButtonPressed>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b01      	cmp	r3, #1
 80005f6:	d113      	bne.n	8000620 <fsm_manual_run+0x154>
				int prevDurationYELLOW = durationYELLOW;
 80005f8:	4b62      	ldr	r3, [pc, #392]	; (8000784 <fsm_manual_run+0x2b8>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	607b      	str	r3, [r7, #4]
				durationYELLOW = YELLOW_sec * 1000;
 80005fe:	4b64      	ldr	r3, [pc, #400]	; (8000790 <fsm_manual_run+0x2c4>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000606:	fb02 f303 	mul.w	r3, r2, r3
 800060a:	4a5e      	ldr	r2, [pc, #376]	; (8000784 <fsm_manual_run+0x2b8>)
 800060c:	6013      	str	r3, [r2, #0]
				if(durationYELLOW > durationRED) durationYELLOW = prevDurationYELLOW; // Check the logic
 800060e:	4b5d      	ldr	r3, [pc, #372]	; (8000784 <fsm_manual_run+0x2b8>)
 8000610:	681a      	ldr	r2, [r3, #0]
 8000612:	4b5b      	ldr	r3, [pc, #364]	; (8000780 <fsm_manual_run+0x2b4>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	429a      	cmp	r2, r3
 8000618:	dd02      	ble.n	8000620 <fsm_manual_run+0x154>
 800061a:	4a5a      	ldr	r2, [pc, #360]	; (8000784 <fsm_manual_run+0x2b8>)
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	6013      	str	r3, [r2, #0]
			if(isButtonPressed(0) == 1){
 8000620:	2000      	movs	r0, #0
 8000622:	f000 fda5 	bl	8001170 <isButtonPressed>
 8000626:	4603      	mov	r3, r0
 8000628:	2b01      	cmp	r3, #1
 800062a:	f040 809a 	bne.w	8000762 <fsm_manual_run+0x296>
				setTimer(1, 10);
 800062e:	210a      	movs	r1, #10
 8000630:	2001      	movs	r0, #1
 8000632:	f001 f97b 	bl	800192c <setTimer>
				status = MOD_GREEN;
 8000636:	4b4e      	ldr	r3, [pc, #312]	; (8000770 <fsm_manual_run+0x2a4>)
 8000638:	220d      	movs	r2, #13
 800063a:	601a      	str	r2, [r3, #0]
				timerTraffic1 = durationGREEN / 1000;
 800063c:	4b55      	ldr	r3, [pc, #340]	; (8000794 <fsm_manual_run+0x2c8>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	4a51      	ldr	r2, [pc, #324]	; (8000788 <fsm_manual_run+0x2bc>)
 8000642:	fb82 1203 	smull	r1, r2, r2, r3
 8000646:	1192      	asrs	r2, r2, #6
 8000648:	17db      	asrs	r3, r3, #31
 800064a:	1ad3      	subs	r3, r2, r3
 800064c:	4a4b      	ldr	r2, [pc, #300]	; (800077c <fsm_manual_run+0x2b0>)
 800064e:	6013      	str	r3, [r2, #0]
				timerTraffic2 = 4;
 8000650:	4b4e      	ldr	r3, [pc, #312]	; (800078c <fsm_manual_run+0x2c0>)
 8000652:	2204      	movs	r2, #4
 8000654:	601a      	str	r2, [r3, #0]
			break;
 8000656:	e084      	b.n	8000762 <fsm_manual_run+0x296>
			if(timerFlag[1] == 1){
 8000658:	4b46      	ldr	r3, [pc, #280]	; (8000774 <fsm_manual_run+0x2a8>)
 800065a:	685b      	ldr	r3, [r3, #4]
 800065c:	2b01      	cmp	r3, #1
 800065e:	d10b      	bne.n	8000678 <fsm_manual_run+0x1ac>
				setTimer(1, 250); // blink every 0.25s
 8000660:	21fa      	movs	r1, #250	; 0xfa
 8000662:	2001      	movs	r0, #1
 8000664:	f001 f962 	bl	800192c <setTimer>
				blinkLEDs(TRAFFIC_1, AUTO_GREEN);
 8000668:	2103      	movs	r1, #3
 800066a:	2007      	movs	r0, #7
 800066c:	f000 f8a4 	bl	80007b8 <blinkLEDs>
				blinkLEDs(TRAFFIC_2, AUTO_GREEN);
 8000670:	2103      	movs	r1, #3
 8000672:	2008      	movs	r0, #8
 8000674:	f000 f8a0 	bl	80007b8 <blinkLEDs>
			if(isButtonPressed(1) == 1){
 8000678:	2001      	movs	r0, #1
 800067a:	f000 fd79 	bl	8001170 <isButtonPressed>
 800067e:	4603      	mov	r3, r0
 8000680:	2b01      	cmp	r3, #1
 8000682:	d114      	bne.n	80006ae <fsm_manual_run+0x1e2>
				GREEN_sec++;
 8000684:	4b44      	ldr	r3, [pc, #272]	; (8000798 <fsm_manual_run+0x2cc>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	3301      	adds	r3, #1
 800068a:	4a43      	ldr	r2, [pc, #268]	; (8000798 <fsm_manual_run+0x2cc>)
 800068c:	6013      	str	r3, [r2, #0]
				if(GREEN_sec >= 100){
 800068e:	4b42      	ldr	r3, [pc, #264]	; (8000798 <fsm_manual_run+0x2cc>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	2b63      	cmp	r3, #99	; 0x63
 8000694:	dd06      	ble.n	80006a4 <fsm_manual_run+0x1d8>
					GREEN_sec = 1;
 8000696:	4b40      	ldr	r3, [pc, #256]	; (8000798 <fsm_manual_run+0x2cc>)
 8000698:	2201      	movs	r2, #1
 800069a:	601a      	str	r2, [r3, #0]
					timerTraffic1 = 1;
 800069c:	4b37      	ldr	r3, [pc, #220]	; (800077c <fsm_manual_run+0x2b0>)
 800069e:	2201      	movs	r2, #1
 80006a0:	601a      	str	r2, [r3, #0]
 80006a2:	e004      	b.n	80006ae <fsm_manual_run+0x1e2>
					timerTraffic1++;
 80006a4:	4b35      	ldr	r3, [pc, #212]	; (800077c <fsm_manual_run+0x2b0>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	3301      	adds	r3, #1
 80006aa:	4a34      	ldr	r2, [pc, #208]	; (800077c <fsm_manual_run+0x2b0>)
 80006ac:	6013      	str	r3, [r2, #0]
			if(isButtonPressed(2) == 1){
 80006ae:	2002      	movs	r0, #2
 80006b0:	f000 fd5e 	bl	8001170 <isButtonPressed>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b01      	cmp	r3, #1
 80006b8:	d114      	bne.n	80006e4 <fsm_manual_run+0x218>
				durationGREEN = GREEN_sec * 1000;
 80006ba:	4b37      	ldr	r3, [pc, #220]	; (8000798 <fsm_manual_run+0x2cc>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80006c2:	fb02 f303 	mul.w	r3, r2, r3
 80006c6:	4a33      	ldr	r2, [pc, #204]	; (8000794 <fsm_manual_run+0x2c8>)
 80006c8:	6013      	str	r3, [r2, #0]
				if(durationGREEN < durationRED){
 80006ca:	4b32      	ldr	r3, [pc, #200]	; (8000794 <fsm_manual_run+0x2c8>)
 80006cc:	681a      	ldr	r2, [r3, #0]
 80006ce:	4b2c      	ldr	r3, [pc, #176]	; (8000780 <fsm_manual_run+0x2b4>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	429a      	cmp	r2, r3
 80006d4:	da06      	bge.n	80006e4 <fsm_manual_run+0x218>
					durationYELLOW = durationRED - durationGREEN;
 80006d6:	4b2a      	ldr	r3, [pc, #168]	; (8000780 <fsm_manual_run+0x2b4>)
 80006d8:	681a      	ldr	r2, [r3, #0]
 80006da:	4b2e      	ldr	r3, [pc, #184]	; (8000794 <fsm_manual_run+0x2c8>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	1ad3      	subs	r3, r2, r3
 80006e0:	4a28      	ldr	r2, [pc, #160]	; (8000784 <fsm_manual_run+0x2b8>)
 80006e2:	6013      	str	r3, [r2, #0]
			if(isButtonPressed(0) == 1){
 80006e4:	2000      	movs	r0, #0
 80006e6:	f000 fd43 	bl	8001170 <isButtonPressed>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b01      	cmp	r3, #1
 80006ee:	d13a      	bne.n	8000766 <fsm_manual_run+0x29a>
				status = RED_GREEN;
 80006f0:	4b1f      	ldr	r3, [pc, #124]	; (8000770 <fsm_manual_run+0x2a4>)
 80006f2:	2215      	movs	r2, #21
 80006f4:	601a      	str	r2, [r3, #0]
				durationGREEN = durationRED - durationYELLOW;
 80006f6:	4b22      	ldr	r3, [pc, #136]	; (8000780 <fsm_manual_run+0x2b4>)
 80006f8:	681a      	ldr	r2, [r3, #0]
 80006fa:	4b22      	ldr	r3, [pc, #136]	; (8000784 <fsm_manual_run+0x2b8>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	1ad3      	subs	r3, r2, r3
 8000700:	4a24      	ldr	r2, [pc, #144]	; (8000794 <fsm_manual_run+0x2c8>)
 8000702:	6013      	str	r3, [r2, #0]
				timerTraffic1 = durationRED / 1000;
 8000704:	4b1e      	ldr	r3, [pc, #120]	; (8000780 <fsm_manual_run+0x2b4>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	4a1f      	ldr	r2, [pc, #124]	; (8000788 <fsm_manual_run+0x2bc>)
 800070a:	fb82 1203 	smull	r1, r2, r2, r3
 800070e:	1192      	asrs	r2, r2, #6
 8000710:	17db      	asrs	r3, r3, #31
 8000712:	1ad3      	subs	r3, r2, r3
 8000714:	4a19      	ldr	r2, [pc, #100]	; (800077c <fsm_manual_run+0x2b0>)
 8000716:	6013      	str	r3, [r2, #0]
				timerTraffic2 = durationGREEN / 1000;
 8000718:	4b1e      	ldr	r3, [pc, #120]	; (8000794 <fsm_manual_run+0x2c8>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	4a1a      	ldr	r2, [pc, #104]	; (8000788 <fsm_manual_run+0x2bc>)
 800071e:	fb82 1203 	smull	r1, r2, r2, r3
 8000722:	1192      	asrs	r2, r2, #6
 8000724:	17db      	asrs	r3, r3, #31
 8000726:	1ad3      	subs	r3, r2, r3
 8000728:	4a18      	ldr	r2, [pc, #96]	; (800078c <fsm_manual_run+0x2c0>)
 800072a:	6013      	str	r3, [r2, #0]
				update7SEG();
 800072c:	f000 fbe6 	bl	8000efc <update7SEG>
				updateBuffer();
 8000730:	f000 fc4c 	bl	8000fcc <updateBuffer>
				setTimer(0, durationGREEN);
 8000734:	4b17      	ldr	r3, [pc, #92]	; (8000794 <fsm_manual_run+0x2c8>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4619      	mov	r1, r3
 800073a:	2000      	movs	r0, #0
 800073c:	f001 f8f6 	bl	800192c <setTimer>
				setTimerSecond(1000);
 8000740:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000744:	f001 f8d6 	bl	80018f4 <setTimerSecond>
				setTimer7SEG(10);
 8000748:	200a      	movs	r0, #10
 800074a:	f001 f8b7 	bl	80018bc <setTimer7SEG>
				led_index = 0;
 800074e:	4b13      	ldr	r3, [pc, #76]	; (800079c <fsm_manual_run+0x2d0>)
 8000750:	2200      	movs	r2, #0
 8000752:	601a      	str	r2, [r3, #0]
				clearEN();
 8000754:	f000 f824 	bl	80007a0 <clearEN>
			break;
 8000758:	e005      	b.n	8000766 <fsm_manual_run+0x29a>
			break;
 800075a:	bf00      	nop
 800075c:	e004      	b.n	8000768 <fsm_manual_run+0x29c>
			break;
 800075e:	bf00      	nop
 8000760:	e002      	b.n	8000768 <fsm_manual_run+0x29c>
			break;
 8000762:	bf00      	nop
 8000764:	e000      	b.n	8000768 <fsm_manual_run+0x29c>
			break;
 8000766:	bf00      	nop
	}
}
 8000768:	bf00      	nop
 800076a:	3708      	adds	r7, #8
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	20000000 	.word	0x20000000
 8000774:	20000188 	.word	0x20000188
 8000778:	200001a8 	.word	0x200001a8
 800077c:	2000006c 	.word	0x2000006c
 8000780:	20000004 	.word	0x20000004
 8000784:	20000008 	.word	0x20000008
 8000788:	10624dd3 	.word	0x10624dd3
 800078c:	20000070 	.word	0x20000070
 8000790:	200001a4 	.word	0x200001a4
 8000794:	2000000c 	.word	0x2000000c
 8000798:	200001a0 	.word	0x200001a0
 800079c:	20000074 	.word	0x20000074

080007a0 <clearEN>:

#include <handle_leds.h>

int led_buffer[4] = {0, 0, 0, 0};

void clearEN(){
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, EN0_Pin | EN1_Pin | EN2_Pin | EN3_Pin, SET);
 80007a4:	2210      	movs	r2, #16
 80007a6:	21f0      	movs	r1, #240	; 0xf0
 80007a8:	4802      	ldr	r0, [pc, #8]	; (80007b4 <clearEN+0x14>)
 80007aa:	f001 fcf8 	bl	800219e <HAL_GPIO_WritePin>
}
 80007ae:	bf00      	nop
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	40010800 	.word	0x40010800

080007b8 <blinkLEDs>:
//void openAllLEDs();
void blinkLEDs(int traffic, int color){
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
 80007c0:	6039      	str	r1, [r7, #0]
	if(traffic == TRAFFIC_1){
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	2b07      	cmp	r3, #7
 80007c6:	d12a      	bne.n	800081e <blinkLEDs+0x66>
		switch(color){
 80007c8:	683b      	ldr	r3, [r7, #0]
 80007ca:	2b04      	cmp	r3, #4
 80007cc:	d013      	beq.n	80007f6 <blinkLEDs+0x3e>
 80007ce:	683b      	ldr	r3, [r7, #0]
 80007d0:	2b04      	cmp	r3, #4
 80007d2:	dc58      	bgt.n	8000886 <blinkLEDs+0xce>
 80007d4:	683b      	ldr	r3, [r7, #0]
 80007d6:	2b02      	cmp	r3, #2
 80007d8:	d003      	beq.n	80007e2 <blinkLEDs+0x2a>
 80007da:	683b      	ldr	r3, [r7, #0]
 80007dc:	2b03      	cmp	r3, #3
 80007de:	d014      	beq.n	800080a <blinkLEDs+0x52>
			case AUTO_GREEN:
				HAL_GPIO_TogglePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin);
				HAL_GPIO_WritePin(GPIOA, LED_YELLOW_1_Pin | LED_RED_1_Pin, RESET);
				break;
			default:
				break;
 80007e0:	e051      	b.n	8000886 <blinkLEDs+0xce>
				HAL_GPIO_TogglePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin);
 80007e2:	2102      	movs	r1, #2
 80007e4:	482c      	ldr	r0, [pc, #176]	; (8000898 <blinkLEDs+0xe0>)
 80007e6:	f001 fcf2 	bl	80021ce <HAL_GPIO_TogglePin>
				HAL_GPIO_WritePin(GPIOA, LED_YELLOW_1_Pin | LED_GREEN_1_Pin, RESET);
 80007ea:	2200      	movs	r2, #0
 80007ec:	210c      	movs	r1, #12
 80007ee:	482a      	ldr	r0, [pc, #168]	; (8000898 <blinkLEDs+0xe0>)
 80007f0:	f001 fcd5 	bl	800219e <HAL_GPIO_WritePin>
				break;
 80007f4:	e04c      	b.n	8000890 <blinkLEDs+0xd8>
				HAL_GPIO_TogglePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin);
 80007f6:	2104      	movs	r1, #4
 80007f8:	4827      	ldr	r0, [pc, #156]	; (8000898 <blinkLEDs+0xe0>)
 80007fa:	f001 fce8 	bl	80021ce <HAL_GPIO_TogglePin>
				HAL_GPIO_WritePin(GPIOA, LED_RED_1_Pin | LED_GREEN_1_Pin, RESET);
 80007fe:	2200      	movs	r2, #0
 8000800:	210a      	movs	r1, #10
 8000802:	4825      	ldr	r0, [pc, #148]	; (8000898 <blinkLEDs+0xe0>)
 8000804:	f001 fccb 	bl	800219e <HAL_GPIO_WritePin>
				break;
 8000808:	e042      	b.n	8000890 <blinkLEDs+0xd8>
				HAL_GPIO_TogglePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin);
 800080a:	2108      	movs	r1, #8
 800080c:	4822      	ldr	r0, [pc, #136]	; (8000898 <blinkLEDs+0xe0>)
 800080e:	f001 fcde 	bl	80021ce <HAL_GPIO_TogglePin>
				HAL_GPIO_WritePin(GPIOA, LED_YELLOW_1_Pin | LED_RED_1_Pin, RESET);
 8000812:	2200      	movs	r2, #0
 8000814:	2106      	movs	r1, #6
 8000816:	4820      	ldr	r0, [pc, #128]	; (8000898 <blinkLEDs+0xe0>)
 8000818:	f001 fcc1 	bl	800219e <HAL_GPIO_WritePin>
				break;
 800081c:	e038      	b.n	8000890 <blinkLEDs+0xd8>
		}
	}
	else if(traffic == TRAFFIC_2){
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	2b08      	cmp	r3, #8
 8000822:	d132      	bne.n	800088a <blinkLEDs+0xd2>
		switch(color){
 8000824:	683b      	ldr	r3, [r7, #0]
 8000826:	2b04      	cmp	r3, #4
 8000828:	d015      	beq.n	8000856 <blinkLEDs+0x9e>
 800082a:	683b      	ldr	r3, [r7, #0]
 800082c:	2b04      	cmp	r3, #4
 800082e:	dc2e      	bgt.n	800088e <blinkLEDs+0xd6>
 8000830:	683b      	ldr	r3, [r7, #0]
 8000832:	2b02      	cmp	r3, #2
 8000834:	d003      	beq.n	800083e <blinkLEDs+0x86>
 8000836:	683b      	ldr	r3, [r7, #0]
 8000838:	2b03      	cmp	r3, #3
 800083a:	d018      	beq.n	800086e <blinkLEDs+0xb6>
			case AUTO_GREEN:
				HAL_GPIO_TogglePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin);
				HAL_GPIO_WritePin(GPIOA, LED_YELLOW_2_Pin | LED_RED_2_Pin, RESET);
				break;
			default:
				break;
 800083c:	e027      	b.n	800088e <blinkLEDs+0xd6>
				HAL_GPIO_TogglePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin);
 800083e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000842:	4815      	ldr	r0, [pc, #84]	; (8000898 <blinkLEDs+0xe0>)
 8000844:	f001 fcc3 	bl	80021ce <HAL_GPIO_TogglePin>
				HAL_GPIO_WritePin(GPIOA, LED_YELLOW_2_Pin | LED_GREEN_2_Pin, RESET);
 8000848:	2200      	movs	r2, #0
 800084a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800084e:	4812      	ldr	r0, [pc, #72]	; (8000898 <blinkLEDs+0xe0>)
 8000850:	f001 fca5 	bl	800219e <HAL_GPIO_WritePin>
				break;
 8000854:	e01c      	b.n	8000890 <blinkLEDs+0xd8>
				HAL_GPIO_TogglePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin);
 8000856:	f44f 7100 	mov.w	r1, #512	; 0x200
 800085a:	480f      	ldr	r0, [pc, #60]	; (8000898 <blinkLEDs+0xe0>)
 800085c:	f001 fcb7 	bl	80021ce <HAL_GPIO_TogglePin>
				HAL_GPIO_WritePin(GPIOA, LED_RED_2_Pin | LED_GREEN_2_Pin, RESET);
 8000860:	2200      	movs	r2, #0
 8000862:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8000866:	480c      	ldr	r0, [pc, #48]	; (8000898 <blinkLEDs+0xe0>)
 8000868:	f001 fc99 	bl	800219e <HAL_GPIO_WritePin>
				break;
 800086c:	e010      	b.n	8000890 <blinkLEDs+0xd8>
				HAL_GPIO_TogglePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin);
 800086e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000872:	4809      	ldr	r0, [pc, #36]	; (8000898 <blinkLEDs+0xe0>)
 8000874:	f001 fcab 	bl	80021ce <HAL_GPIO_TogglePin>
				HAL_GPIO_WritePin(GPIOA, LED_YELLOW_2_Pin | LED_RED_2_Pin, RESET);
 8000878:	2200      	movs	r2, #0
 800087a:	f44f 7140 	mov.w	r1, #768	; 0x300
 800087e:	4806      	ldr	r0, [pc, #24]	; (8000898 <blinkLEDs+0xe0>)
 8000880:	f001 fc8d 	bl	800219e <HAL_GPIO_WritePin>
				break;
 8000884:	e004      	b.n	8000890 <blinkLEDs+0xd8>
				break;
 8000886:	bf00      	nop
 8000888:	e002      	b.n	8000890 <blinkLEDs+0xd8>
		}
	}
 800088a:	bf00      	nop
 800088c:	e000      	b.n	8000890 <blinkLEDs+0xd8>
				break;
 800088e:	bf00      	nop
}
 8000890:	bf00      	nop
 8000892:	3708      	adds	r7, #8
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	40010800 	.word	0x40010800

0800089c <Traffic_setColor>:

void Traffic_setColor(int option, int color){
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
 80008a4:	6039      	str	r1, [r7, #0]
	if(option == 1){
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	2b01      	cmp	r3, #1
 80008aa:	d12d      	bne.n	8000908 <Traffic_setColor+0x6c>
		switch(color){
 80008ac:	683b      	ldr	r3, [r7, #0]
 80008ae:	2b04      	cmp	r3, #4
 80008b0:	d014      	beq.n	80008dc <Traffic_setColor+0x40>
 80008b2:	683b      	ldr	r3, [r7, #0]
 80008b4:	2b04      	cmp	r3, #4
 80008b6:	dc5e      	bgt.n	8000976 <Traffic_setColor+0xda>
 80008b8:	683b      	ldr	r3, [r7, #0]
 80008ba:	2b02      	cmp	r3, #2
 80008bc:	d003      	beq.n	80008c6 <Traffic_setColor+0x2a>
 80008be:	683b      	ldr	r3, [r7, #0]
 80008c0:	2b03      	cmp	r3, #3
 80008c2:	d016      	beq.n	80008f2 <Traffic_setColor+0x56>
			case AUTO_GREEN:
				HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, SET);
				HAL_GPIO_WritePin(GPIOA, LED_YELLOW_1_Pin | LED_RED_1_Pin, RESET);
				break;
			default:
				break;
 80008c4:	e057      	b.n	8000976 <Traffic_setColor+0xda>
				HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, SET);
 80008c6:	2210      	movs	r2, #16
 80008c8:	2102      	movs	r1, #2
 80008ca:	482f      	ldr	r0, [pc, #188]	; (8000988 <Traffic_setColor+0xec>)
 80008cc:	f001 fc67 	bl	800219e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, LED_YELLOW_1_Pin | LED_GREEN_1_Pin, RESET);
 80008d0:	2200      	movs	r2, #0
 80008d2:	210c      	movs	r1, #12
 80008d4:	482c      	ldr	r0, [pc, #176]	; (8000988 <Traffic_setColor+0xec>)
 80008d6:	f001 fc62 	bl	800219e <HAL_GPIO_WritePin>
				break;
 80008da:	e051      	b.n	8000980 <Traffic_setColor+0xe4>
				HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, SET);
 80008dc:	2210      	movs	r2, #16
 80008de:	2104      	movs	r1, #4
 80008e0:	4829      	ldr	r0, [pc, #164]	; (8000988 <Traffic_setColor+0xec>)
 80008e2:	f001 fc5c 	bl	800219e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, LED_RED_1_Pin | LED_GREEN_1_Pin, RESET);
 80008e6:	2200      	movs	r2, #0
 80008e8:	210a      	movs	r1, #10
 80008ea:	4827      	ldr	r0, [pc, #156]	; (8000988 <Traffic_setColor+0xec>)
 80008ec:	f001 fc57 	bl	800219e <HAL_GPIO_WritePin>
				break;
 80008f0:	e046      	b.n	8000980 <Traffic_setColor+0xe4>
				HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, SET);
 80008f2:	2210      	movs	r2, #16
 80008f4:	2108      	movs	r1, #8
 80008f6:	4824      	ldr	r0, [pc, #144]	; (8000988 <Traffic_setColor+0xec>)
 80008f8:	f001 fc51 	bl	800219e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, LED_YELLOW_1_Pin | LED_RED_1_Pin, RESET);
 80008fc:	2200      	movs	r2, #0
 80008fe:	2106      	movs	r1, #6
 8000900:	4821      	ldr	r0, [pc, #132]	; (8000988 <Traffic_setColor+0xec>)
 8000902:	f001 fc4c 	bl	800219e <HAL_GPIO_WritePin>
				break;
 8000906:	e03b      	b.n	8000980 <Traffic_setColor+0xe4>
		}
	}
	else if(option == 2){
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	2b02      	cmp	r3, #2
 800090c:	d135      	bne.n	800097a <Traffic_setColor+0xde>
		switch(color){
 800090e:	683b      	ldr	r3, [r7, #0]
 8000910:	2b04      	cmp	r3, #4
 8000912:	d016      	beq.n	8000942 <Traffic_setColor+0xa6>
 8000914:	683b      	ldr	r3, [r7, #0]
 8000916:	2b04      	cmp	r3, #4
 8000918:	dc31      	bgt.n	800097e <Traffic_setColor+0xe2>
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	2b02      	cmp	r3, #2
 800091e:	d003      	beq.n	8000928 <Traffic_setColor+0x8c>
 8000920:	683b      	ldr	r3, [r7, #0]
 8000922:	2b03      	cmp	r3, #3
 8000924:	d01a      	beq.n	800095c <Traffic_setColor+0xc0>
			case AUTO_GREEN:
				HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, SET);
				HAL_GPIO_WritePin(GPIOA, LED_YELLOW_2_Pin | LED_RED_2_Pin, RESET);
				break;
			default:
				break;
 8000926:	e02a      	b.n	800097e <Traffic_setColor+0xe2>
				HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, SET);
 8000928:	2210      	movs	r2, #16
 800092a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800092e:	4816      	ldr	r0, [pc, #88]	; (8000988 <Traffic_setColor+0xec>)
 8000930:	f001 fc35 	bl	800219e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, LED_YELLOW_2_Pin | LED_GREEN_2_Pin, RESET);
 8000934:	2200      	movs	r2, #0
 8000936:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800093a:	4813      	ldr	r0, [pc, #76]	; (8000988 <Traffic_setColor+0xec>)
 800093c:	f001 fc2f 	bl	800219e <HAL_GPIO_WritePin>
				break;
 8000940:	e01e      	b.n	8000980 <Traffic_setColor+0xe4>
				HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, SET);
 8000942:	2210      	movs	r2, #16
 8000944:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000948:	480f      	ldr	r0, [pc, #60]	; (8000988 <Traffic_setColor+0xec>)
 800094a:	f001 fc28 	bl	800219e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, LED_RED_2_Pin | LED_GREEN_2_Pin, RESET);
 800094e:	2200      	movs	r2, #0
 8000950:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8000954:	480c      	ldr	r0, [pc, #48]	; (8000988 <Traffic_setColor+0xec>)
 8000956:	f001 fc22 	bl	800219e <HAL_GPIO_WritePin>
				break;
 800095a:	e011      	b.n	8000980 <Traffic_setColor+0xe4>
				HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, SET);
 800095c:	2210      	movs	r2, #16
 800095e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000962:	4809      	ldr	r0, [pc, #36]	; (8000988 <Traffic_setColor+0xec>)
 8000964:	f001 fc1b 	bl	800219e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, LED_YELLOW_2_Pin | LED_RED_2_Pin, RESET);
 8000968:	2200      	movs	r2, #0
 800096a:	f44f 7140 	mov.w	r1, #768	; 0x300
 800096e:	4806      	ldr	r0, [pc, #24]	; (8000988 <Traffic_setColor+0xec>)
 8000970:	f001 fc15 	bl	800219e <HAL_GPIO_WritePin>
				break;
 8000974:	e004      	b.n	8000980 <Traffic_setColor+0xe4>
				break;
 8000976:	bf00      	nop
 8000978:	e002      	b.n	8000980 <Traffic_setColor+0xe4>
		}
	}
 800097a:	bf00      	nop
 800097c:	e000      	b.n	8000980 <Traffic_setColor+0xe4>
				break;
 800097e:	bf00      	nop
}
 8000980:	bf00      	nop
 8000982:	3708      	adds	r7, #8
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	40010800 	.word	0x40010800

0800098c <display7SEG>:

int SEG[7] = {SEG1_0_Pin, SEG1_1_Pin, SEG1_2_Pin, SEG1_3_Pin,  SEG1_4_Pin,  SEG1_5_Pin,  SEG1_6_Pin};
void display7SEG(int num){
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	2b09      	cmp	r3, #9
 8000998:	f200 82a6 	bhi.w	8000ee8 <display7SEG+0x55c>
 800099c:	a201      	add	r2, pc, #4	; (adr r2, 80009a4 <display7SEG+0x18>)
 800099e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009a2:	bf00      	nop
 80009a4:	080009cd 	.word	0x080009cd
 80009a8:	08000a61 	.word	0x08000a61
 80009ac:	08000acd 	.word	0x08000acd
 80009b0:	08000b57 	.word	0x08000b57
 80009b4:	08000be9 	.word	0x08000be9
 80009b8:	08000c69 	.word	0x08000c69
 80009bc:	08000cf3 	.word	0x08000cf3
 80009c0:	08000d87 	.word	0x08000d87
 80009c4:	08000e05 	.word	0x08000e05
 80009c8:	08000e55 	.word	0x08000e55
	switch(num){
	case 0:
		HAL_GPIO_WritePin(GPIOB, SEG[0] | SEG[1] | SEG[2] | SEG[3] | SEG[4] | SEG[5] | SEG[6], SET);
 80009cc:	4b84      	ldr	r3, [pc, #528]	; (8000be0 <display7SEG+0x254>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	b21a      	sxth	r2, r3
 80009d2:	4b83      	ldr	r3, [pc, #524]	; (8000be0 <display7SEG+0x254>)
 80009d4:	685b      	ldr	r3, [r3, #4]
 80009d6:	b21b      	sxth	r3, r3
 80009d8:	4313      	orrs	r3, r2
 80009da:	b21a      	sxth	r2, r3
 80009dc:	4b80      	ldr	r3, [pc, #512]	; (8000be0 <display7SEG+0x254>)
 80009de:	689b      	ldr	r3, [r3, #8]
 80009e0:	b21b      	sxth	r3, r3
 80009e2:	4313      	orrs	r3, r2
 80009e4:	b21a      	sxth	r2, r3
 80009e6:	4b7e      	ldr	r3, [pc, #504]	; (8000be0 <display7SEG+0x254>)
 80009e8:	68db      	ldr	r3, [r3, #12]
 80009ea:	b21b      	sxth	r3, r3
 80009ec:	4313      	orrs	r3, r2
 80009ee:	b21a      	sxth	r2, r3
 80009f0:	4b7b      	ldr	r3, [pc, #492]	; (8000be0 <display7SEG+0x254>)
 80009f2:	691b      	ldr	r3, [r3, #16]
 80009f4:	b21b      	sxth	r3, r3
 80009f6:	4313      	orrs	r3, r2
 80009f8:	b21a      	sxth	r2, r3
 80009fa:	4b79      	ldr	r3, [pc, #484]	; (8000be0 <display7SEG+0x254>)
 80009fc:	695b      	ldr	r3, [r3, #20]
 80009fe:	b21b      	sxth	r3, r3
 8000a00:	4313      	orrs	r3, r2
 8000a02:	b21a      	sxth	r2, r3
 8000a04:	4b76      	ldr	r3, [pc, #472]	; (8000be0 <display7SEG+0x254>)
 8000a06:	699b      	ldr	r3, [r3, #24]
 8000a08:	b21b      	sxth	r3, r3
 8000a0a:	4313      	orrs	r3, r2
 8000a0c:	b21b      	sxth	r3, r3
 8000a0e:	b29b      	uxth	r3, r3
 8000a10:	2210      	movs	r2, #16
 8000a12:	4619      	mov	r1, r3
 8000a14:	4873      	ldr	r0, [pc, #460]	; (8000be4 <display7SEG+0x258>)
 8000a16:	f001 fbc2 	bl	800219e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG[0] | SEG[1] | SEG[2] | SEG[3] | SEG[4] | SEG[5], RESET);
 8000a1a:	4b71      	ldr	r3, [pc, #452]	; (8000be0 <display7SEG+0x254>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	b21a      	sxth	r2, r3
 8000a20:	4b6f      	ldr	r3, [pc, #444]	; (8000be0 <display7SEG+0x254>)
 8000a22:	685b      	ldr	r3, [r3, #4]
 8000a24:	b21b      	sxth	r3, r3
 8000a26:	4313      	orrs	r3, r2
 8000a28:	b21a      	sxth	r2, r3
 8000a2a:	4b6d      	ldr	r3, [pc, #436]	; (8000be0 <display7SEG+0x254>)
 8000a2c:	689b      	ldr	r3, [r3, #8]
 8000a2e:	b21b      	sxth	r3, r3
 8000a30:	4313      	orrs	r3, r2
 8000a32:	b21a      	sxth	r2, r3
 8000a34:	4b6a      	ldr	r3, [pc, #424]	; (8000be0 <display7SEG+0x254>)
 8000a36:	68db      	ldr	r3, [r3, #12]
 8000a38:	b21b      	sxth	r3, r3
 8000a3a:	4313      	orrs	r3, r2
 8000a3c:	b21a      	sxth	r2, r3
 8000a3e:	4b68      	ldr	r3, [pc, #416]	; (8000be0 <display7SEG+0x254>)
 8000a40:	691b      	ldr	r3, [r3, #16]
 8000a42:	b21b      	sxth	r3, r3
 8000a44:	4313      	orrs	r3, r2
 8000a46:	b21a      	sxth	r2, r3
 8000a48:	4b65      	ldr	r3, [pc, #404]	; (8000be0 <display7SEG+0x254>)
 8000a4a:	695b      	ldr	r3, [r3, #20]
 8000a4c:	b21b      	sxth	r3, r3
 8000a4e:	4313      	orrs	r3, r2
 8000a50:	b21b      	sxth	r3, r3
 8000a52:	b29b      	uxth	r3, r3
 8000a54:	2200      	movs	r2, #0
 8000a56:	4619      	mov	r1, r3
 8000a58:	4862      	ldr	r0, [pc, #392]	; (8000be4 <display7SEG+0x258>)
 8000a5a:	f001 fba0 	bl	800219e <HAL_GPIO_WritePin>
		break;
 8000a5e:	e244      	b.n	8000eea <display7SEG+0x55e>
	case 1:
		HAL_GPIO_WritePin(GPIOB, SEG[0] | SEG[1] | SEG[2] | SEG[3] | SEG[4] | SEG[5] | SEG[6], SET);
 8000a60:	4b5f      	ldr	r3, [pc, #380]	; (8000be0 <display7SEG+0x254>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	b21a      	sxth	r2, r3
 8000a66:	4b5e      	ldr	r3, [pc, #376]	; (8000be0 <display7SEG+0x254>)
 8000a68:	685b      	ldr	r3, [r3, #4]
 8000a6a:	b21b      	sxth	r3, r3
 8000a6c:	4313      	orrs	r3, r2
 8000a6e:	b21a      	sxth	r2, r3
 8000a70:	4b5b      	ldr	r3, [pc, #364]	; (8000be0 <display7SEG+0x254>)
 8000a72:	689b      	ldr	r3, [r3, #8]
 8000a74:	b21b      	sxth	r3, r3
 8000a76:	4313      	orrs	r3, r2
 8000a78:	b21a      	sxth	r2, r3
 8000a7a:	4b59      	ldr	r3, [pc, #356]	; (8000be0 <display7SEG+0x254>)
 8000a7c:	68db      	ldr	r3, [r3, #12]
 8000a7e:	b21b      	sxth	r3, r3
 8000a80:	4313      	orrs	r3, r2
 8000a82:	b21a      	sxth	r2, r3
 8000a84:	4b56      	ldr	r3, [pc, #344]	; (8000be0 <display7SEG+0x254>)
 8000a86:	691b      	ldr	r3, [r3, #16]
 8000a88:	b21b      	sxth	r3, r3
 8000a8a:	4313      	orrs	r3, r2
 8000a8c:	b21a      	sxth	r2, r3
 8000a8e:	4b54      	ldr	r3, [pc, #336]	; (8000be0 <display7SEG+0x254>)
 8000a90:	695b      	ldr	r3, [r3, #20]
 8000a92:	b21b      	sxth	r3, r3
 8000a94:	4313      	orrs	r3, r2
 8000a96:	b21a      	sxth	r2, r3
 8000a98:	4b51      	ldr	r3, [pc, #324]	; (8000be0 <display7SEG+0x254>)
 8000a9a:	699b      	ldr	r3, [r3, #24]
 8000a9c:	b21b      	sxth	r3, r3
 8000a9e:	4313      	orrs	r3, r2
 8000aa0:	b21b      	sxth	r3, r3
 8000aa2:	b29b      	uxth	r3, r3
 8000aa4:	2210      	movs	r2, #16
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	484e      	ldr	r0, [pc, #312]	; (8000be4 <display7SEG+0x258>)
 8000aaa:	f001 fb78 	bl	800219e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG[1] | SEG[2], RESET);
 8000aae:	4b4c      	ldr	r3, [pc, #304]	; (8000be0 <display7SEG+0x254>)
 8000ab0:	685b      	ldr	r3, [r3, #4]
 8000ab2:	b21a      	sxth	r2, r3
 8000ab4:	4b4a      	ldr	r3, [pc, #296]	; (8000be0 <display7SEG+0x254>)
 8000ab6:	689b      	ldr	r3, [r3, #8]
 8000ab8:	b21b      	sxth	r3, r3
 8000aba:	4313      	orrs	r3, r2
 8000abc:	b21b      	sxth	r3, r3
 8000abe:	b29b      	uxth	r3, r3
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	4847      	ldr	r0, [pc, #284]	; (8000be4 <display7SEG+0x258>)
 8000ac6:	f001 fb6a 	bl	800219e <HAL_GPIO_WritePin>
		break;
 8000aca:	e20e      	b.n	8000eea <display7SEG+0x55e>
	case 2:
		HAL_GPIO_WritePin(GPIOB, SEG[0] | SEG[1] | SEG[2] | SEG[3] | SEG[4] | SEG[5] | SEG[6], SET);
 8000acc:	4b44      	ldr	r3, [pc, #272]	; (8000be0 <display7SEG+0x254>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	b21a      	sxth	r2, r3
 8000ad2:	4b43      	ldr	r3, [pc, #268]	; (8000be0 <display7SEG+0x254>)
 8000ad4:	685b      	ldr	r3, [r3, #4]
 8000ad6:	b21b      	sxth	r3, r3
 8000ad8:	4313      	orrs	r3, r2
 8000ada:	b21a      	sxth	r2, r3
 8000adc:	4b40      	ldr	r3, [pc, #256]	; (8000be0 <display7SEG+0x254>)
 8000ade:	689b      	ldr	r3, [r3, #8]
 8000ae0:	b21b      	sxth	r3, r3
 8000ae2:	4313      	orrs	r3, r2
 8000ae4:	b21a      	sxth	r2, r3
 8000ae6:	4b3e      	ldr	r3, [pc, #248]	; (8000be0 <display7SEG+0x254>)
 8000ae8:	68db      	ldr	r3, [r3, #12]
 8000aea:	b21b      	sxth	r3, r3
 8000aec:	4313      	orrs	r3, r2
 8000aee:	b21a      	sxth	r2, r3
 8000af0:	4b3b      	ldr	r3, [pc, #236]	; (8000be0 <display7SEG+0x254>)
 8000af2:	691b      	ldr	r3, [r3, #16]
 8000af4:	b21b      	sxth	r3, r3
 8000af6:	4313      	orrs	r3, r2
 8000af8:	b21a      	sxth	r2, r3
 8000afa:	4b39      	ldr	r3, [pc, #228]	; (8000be0 <display7SEG+0x254>)
 8000afc:	695b      	ldr	r3, [r3, #20]
 8000afe:	b21b      	sxth	r3, r3
 8000b00:	4313      	orrs	r3, r2
 8000b02:	b21a      	sxth	r2, r3
 8000b04:	4b36      	ldr	r3, [pc, #216]	; (8000be0 <display7SEG+0x254>)
 8000b06:	699b      	ldr	r3, [r3, #24]
 8000b08:	b21b      	sxth	r3, r3
 8000b0a:	4313      	orrs	r3, r2
 8000b0c:	b21b      	sxth	r3, r3
 8000b0e:	b29b      	uxth	r3, r3
 8000b10:	2210      	movs	r2, #16
 8000b12:	4619      	mov	r1, r3
 8000b14:	4833      	ldr	r0, [pc, #204]	; (8000be4 <display7SEG+0x258>)
 8000b16:	f001 fb42 	bl	800219e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG[0] | SEG[1] | SEG[3] | SEG[4]| SEG[6], RESET);
 8000b1a:	4b31      	ldr	r3, [pc, #196]	; (8000be0 <display7SEG+0x254>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	b21a      	sxth	r2, r3
 8000b20:	4b2f      	ldr	r3, [pc, #188]	; (8000be0 <display7SEG+0x254>)
 8000b22:	685b      	ldr	r3, [r3, #4]
 8000b24:	b21b      	sxth	r3, r3
 8000b26:	4313      	orrs	r3, r2
 8000b28:	b21a      	sxth	r2, r3
 8000b2a:	4b2d      	ldr	r3, [pc, #180]	; (8000be0 <display7SEG+0x254>)
 8000b2c:	68db      	ldr	r3, [r3, #12]
 8000b2e:	b21b      	sxth	r3, r3
 8000b30:	4313      	orrs	r3, r2
 8000b32:	b21a      	sxth	r2, r3
 8000b34:	4b2a      	ldr	r3, [pc, #168]	; (8000be0 <display7SEG+0x254>)
 8000b36:	691b      	ldr	r3, [r3, #16]
 8000b38:	b21b      	sxth	r3, r3
 8000b3a:	4313      	orrs	r3, r2
 8000b3c:	b21a      	sxth	r2, r3
 8000b3e:	4b28      	ldr	r3, [pc, #160]	; (8000be0 <display7SEG+0x254>)
 8000b40:	699b      	ldr	r3, [r3, #24]
 8000b42:	b21b      	sxth	r3, r3
 8000b44:	4313      	orrs	r3, r2
 8000b46:	b21b      	sxth	r3, r3
 8000b48:	b29b      	uxth	r3, r3
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	4825      	ldr	r0, [pc, #148]	; (8000be4 <display7SEG+0x258>)
 8000b50:	f001 fb25 	bl	800219e <HAL_GPIO_WritePin>
		break;
 8000b54:	e1c9      	b.n	8000eea <display7SEG+0x55e>
	case 3:
		HAL_GPIO_WritePin(GPIOB, SEG[0] | SEG[1] | SEG[2] | SEG[3] | SEG[4] | SEG[5] | SEG[6], SET);
 8000b56:	4b22      	ldr	r3, [pc, #136]	; (8000be0 <display7SEG+0x254>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	b21a      	sxth	r2, r3
 8000b5c:	4b20      	ldr	r3, [pc, #128]	; (8000be0 <display7SEG+0x254>)
 8000b5e:	685b      	ldr	r3, [r3, #4]
 8000b60:	b21b      	sxth	r3, r3
 8000b62:	4313      	orrs	r3, r2
 8000b64:	b21a      	sxth	r2, r3
 8000b66:	4b1e      	ldr	r3, [pc, #120]	; (8000be0 <display7SEG+0x254>)
 8000b68:	689b      	ldr	r3, [r3, #8]
 8000b6a:	b21b      	sxth	r3, r3
 8000b6c:	4313      	orrs	r3, r2
 8000b6e:	b21a      	sxth	r2, r3
 8000b70:	4b1b      	ldr	r3, [pc, #108]	; (8000be0 <display7SEG+0x254>)
 8000b72:	68db      	ldr	r3, [r3, #12]
 8000b74:	b21b      	sxth	r3, r3
 8000b76:	4313      	orrs	r3, r2
 8000b78:	b21a      	sxth	r2, r3
 8000b7a:	4b19      	ldr	r3, [pc, #100]	; (8000be0 <display7SEG+0x254>)
 8000b7c:	691b      	ldr	r3, [r3, #16]
 8000b7e:	b21b      	sxth	r3, r3
 8000b80:	4313      	orrs	r3, r2
 8000b82:	b21a      	sxth	r2, r3
 8000b84:	4b16      	ldr	r3, [pc, #88]	; (8000be0 <display7SEG+0x254>)
 8000b86:	695b      	ldr	r3, [r3, #20]
 8000b88:	b21b      	sxth	r3, r3
 8000b8a:	4313      	orrs	r3, r2
 8000b8c:	b21a      	sxth	r2, r3
 8000b8e:	4b14      	ldr	r3, [pc, #80]	; (8000be0 <display7SEG+0x254>)
 8000b90:	699b      	ldr	r3, [r3, #24]
 8000b92:	b21b      	sxth	r3, r3
 8000b94:	4313      	orrs	r3, r2
 8000b96:	b21b      	sxth	r3, r3
 8000b98:	b29b      	uxth	r3, r3
 8000b9a:	2210      	movs	r2, #16
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	4811      	ldr	r0, [pc, #68]	; (8000be4 <display7SEG+0x258>)
 8000ba0:	f001 fafd 	bl	800219e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG[0] | SEG[1] | SEG[2] | SEG[3] | SEG[6], RESET);
 8000ba4:	4b0e      	ldr	r3, [pc, #56]	; (8000be0 <display7SEG+0x254>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	b21a      	sxth	r2, r3
 8000baa:	4b0d      	ldr	r3, [pc, #52]	; (8000be0 <display7SEG+0x254>)
 8000bac:	685b      	ldr	r3, [r3, #4]
 8000bae:	b21b      	sxth	r3, r3
 8000bb0:	4313      	orrs	r3, r2
 8000bb2:	b21a      	sxth	r2, r3
 8000bb4:	4b0a      	ldr	r3, [pc, #40]	; (8000be0 <display7SEG+0x254>)
 8000bb6:	689b      	ldr	r3, [r3, #8]
 8000bb8:	b21b      	sxth	r3, r3
 8000bba:	4313      	orrs	r3, r2
 8000bbc:	b21a      	sxth	r2, r3
 8000bbe:	4b08      	ldr	r3, [pc, #32]	; (8000be0 <display7SEG+0x254>)
 8000bc0:	68db      	ldr	r3, [r3, #12]
 8000bc2:	b21b      	sxth	r3, r3
 8000bc4:	4313      	orrs	r3, r2
 8000bc6:	b21a      	sxth	r2, r3
 8000bc8:	4b05      	ldr	r3, [pc, #20]	; (8000be0 <display7SEG+0x254>)
 8000bca:	699b      	ldr	r3, [r3, #24]
 8000bcc:	b21b      	sxth	r3, r3
 8000bce:	4313      	orrs	r3, r2
 8000bd0:	b21b      	sxth	r3, r3
 8000bd2:	b29b      	uxth	r3, r3
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	4802      	ldr	r0, [pc, #8]	; (8000be4 <display7SEG+0x258>)
 8000bda:	f001 fae0 	bl	800219e <HAL_GPIO_WritePin>
		break;
 8000bde:	e184      	b.n	8000eea <display7SEG+0x55e>
 8000be0:	20000010 	.word	0x20000010
 8000be4:	40010c00 	.word	0x40010c00
	case 4:
		HAL_GPIO_WritePin(GPIOB, SEG[0] | SEG[1] | SEG[2] | SEG[3] | SEG[4] | SEG[5] | SEG[6], SET);
 8000be8:	4b84      	ldr	r3, [pc, #528]	; (8000dfc <display7SEG+0x470>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	b21a      	sxth	r2, r3
 8000bee:	4b83      	ldr	r3, [pc, #524]	; (8000dfc <display7SEG+0x470>)
 8000bf0:	685b      	ldr	r3, [r3, #4]
 8000bf2:	b21b      	sxth	r3, r3
 8000bf4:	4313      	orrs	r3, r2
 8000bf6:	b21a      	sxth	r2, r3
 8000bf8:	4b80      	ldr	r3, [pc, #512]	; (8000dfc <display7SEG+0x470>)
 8000bfa:	689b      	ldr	r3, [r3, #8]
 8000bfc:	b21b      	sxth	r3, r3
 8000bfe:	4313      	orrs	r3, r2
 8000c00:	b21a      	sxth	r2, r3
 8000c02:	4b7e      	ldr	r3, [pc, #504]	; (8000dfc <display7SEG+0x470>)
 8000c04:	68db      	ldr	r3, [r3, #12]
 8000c06:	b21b      	sxth	r3, r3
 8000c08:	4313      	orrs	r3, r2
 8000c0a:	b21a      	sxth	r2, r3
 8000c0c:	4b7b      	ldr	r3, [pc, #492]	; (8000dfc <display7SEG+0x470>)
 8000c0e:	691b      	ldr	r3, [r3, #16]
 8000c10:	b21b      	sxth	r3, r3
 8000c12:	4313      	orrs	r3, r2
 8000c14:	b21a      	sxth	r2, r3
 8000c16:	4b79      	ldr	r3, [pc, #484]	; (8000dfc <display7SEG+0x470>)
 8000c18:	695b      	ldr	r3, [r3, #20]
 8000c1a:	b21b      	sxth	r3, r3
 8000c1c:	4313      	orrs	r3, r2
 8000c1e:	b21a      	sxth	r2, r3
 8000c20:	4b76      	ldr	r3, [pc, #472]	; (8000dfc <display7SEG+0x470>)
 8000c22:	699b      	ldr	r3, [r3, #24]
 8000c24:	b21b      	sxth	r3, r3
 8000c26:	4313      	orrs	r3, r2
 8000c28:	b21b      	sxth	r3, r3
 8000c2a:	b29b      	uxth	r3, r3
 8000c2c:	2210      	movs	r2, #16
 8000c2e:	4619      	mov	r1, r3
 8000c30:	4873      	ldr	r0, [pc, #460]	; (8000e00 <display7SEG+0x474>)
 8000c32:	f001 fab4 	bl	800219e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG[1] | SEG[2] | SEG[5] | SEG[6], RESET);
 8000c36:	4b71      	ldr	r3, [pc, #452]	; (8000dfc <display7SEG+0x470>)
 8000c38:	685b      	ldr	r3, [r3, #4]
 8000c3a:	b21a      	sxth	r2, r3
 8000c3c:	4b6f      	ldr	r3, [pc, #444]	; (8000dfc <display7SEG+0x470>)
 8000c3e:	689b      	ldr	r3, [r3, #8]
 8000c40:	b21b      	sxth	r3, r3
 8000c42:	4313      	orrs	r3, r2
 8000c44:	b21a      	sxth	r2, r3
 8000c46:	4b6d      	ldr	r3, [pc, #436]	; (8000dfc <display7SEG+0x470>)
 8000c48:	695b      	ldr	r3, [r3, #20]
 8000c4a:	b21b      	sxth	r3, r3
 8000c4c:	4313      	orrs	r3, r2
 8000c4e:	b21a      	sxth	r2, r3
 8000c50:	4b6a      	ldr	r3, [pc, #424]	; (8000dfc <display7SEG+0x470>)
 8000c52:	699b      	ldr	r3, [r3, #24]
 8000c54:	b21b      	sxth	r3, r3
 8000c56:	4313      	orrs	r3, r2
 8000c58:	b21b      	sxth	r3, r3
 8000c5a:	b29b      	uxth	r3, r3
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	4619      	mov	r1, r3
 8000c60:	4867      	ldr	r0, [pc, #412]	; (8000e00 <display7SEG+0x474>)
 8000c62:	f001 fa9c 	bl	800219e <HAL_GPIO_WritePin>
		break;
 8000c66:	e140      	b.n	8000eea <display7SEG+0x55e>
	case 5:
		HAL_GPIO_WritePin(GPIOB, SEG[0] | SEG[1] | SEG[2] | SEG[3] | SEG[4] | SEG[5] | SEG[6], SET);
 8000c68:	4b64      	ldr	r3, [pc, #400]	; (8000dfc <display7SEG+0x470>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	b21a      	sxth	r2, r3
 8000c6e:	4b63      	ldr	r3, [pc, #396]	; (8000dfc <display7SEG+0x470>)
 8000c70:	685b      	ldr	r3, [r3, #4]
 8000c72:	b21b      	sxth	r3, r3
 8000c74:	4313      	orrs	r3, r2
 8000c76:	b21a      	sxth	r2, r3
 8000c78:	4b60      	ldr	r3, [pc, #384]	; (8000dfc <display7SEG+0x470>)
 8000c7a:	689b      	ldr	r3, [r3, #8]
 8000c7c:	b21b      	sxth	r3, r3
 8000c7e:	4313      	orrs	r3, r2
 8000c80:	b21a      	sxth	r2, r3
 8000c82:	4b5e      	ldr	r3, [pc, #376]	; (8000dfc <display7SEG+0x470>)
 8000c84:	68db      	ldr	r3, [r3, #12]
 8000c86:	b21b      	sxth	r3, r3
 8000c88:	4313      	orrs	r3, r2
 8000c8a:	b21a      	sxth	r2, r3
 8000c8c:	4b5b      	ldr	r3, [pc, #364]	; (8000dfc <display7SEG+0x470>)
 8000c8e:	691b      	ldr	r3, [r3, #16]
 8000c90:	b21b      	sxth	r3, r3
 8000c92:	4313      	orrs	r3, r2
 8000c94:	b21a      	sxth	r2, r3
 8000c96:	4b59      	ldr	r3, [pc, #356]	; (8000dfc <display7SEG+0x470>)
 8000c98:	695b      	ldr	r3, [r3, #20]
 8000c9a:	b21b      	sxth	r3, r3
 8000c9c:	4313      	orrs	r3, r2
 8000c9e:	b21a      	sxth	r2, r3
 8000ca0:	4b56      	ldr	r3, [pc, #344]	; (8000dfc <display7SEG+0x470>)
 8000ca2:	699b      	ldr	r3, [r3, #24]
 8000ca4:	b21b      	sxth	r3, r3
 8000ca6:	4313      	orrs	r3, r2
 8000ca8:	b21b      	sxth	r3, r3
 8000caa:	b29b      	uxth	r3, r3
 8000cac:	2210      	movs	r2, #16
 8000cae:	4619      	mov	r1, r3
 8000cb0:	4853      	ldr	r0, [pc, #332]	; (8000e00 <display7SEG+0x474>)
 8000cb2:	f001 fa74 	bl	800219e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG[0] | SEG[2] | SEG[3] | SEG[5] | SEG[6], RESET);
 8000cb6:	4b51      	ldr	r3, [pc, #324]	; (8000dfc <display7SEG+0x470>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	b21a      	sxth	r2, r3
 8000cbc:	4b4f      	ldr	r3, [pc, #316]	; (8000dfc <display7SEG+0x470>)
 8000cbe:	689b      	ldr	r3, [r3, #8]
 8000cc0:	b21b      	sxth	r3, r3
 8000cc2:	4313      	orrs	r3, r2
 8000cc4:	b21a      	sxth	r2, r3
 8000cc6:	4b4d      	ldr	r3, [pc, #308]	; (8000dfc <display7SEG+0x470>)
 8000cc8:	68db      	ldr	r3, [r3, #12]
 8000cca:	b21b      	sxth	r3, r3
 8000ccc:	4313      	orrs	r3, r2
 8000cce:	b21a      	sxth	r2, r3
 8000cd0:	4b4a      	ldr	r3, [pc, #296]	; (8000dfc <display7SEG+0x470>)
 8000cd2:	695b      	ldr	r3, [r3, #20]
 8000cd4:	b21b      	sxth	r3, r3
 8000cd6:	4313      	orrs	r3, r2
 8000cd8:	b21a      	sxth	r2, r3
 8000cda:	4b48      	ldr	r3, [pc, #288]	; (8000dfc <display7SEG+0x470>)
 8000cdc:	699b      	ldr	r3, [r3, #24]
 8000cde:	b21b      	sxth	r3, r3
 8000ce0:	4313      	orrs	r3, r2
 8000ce2:	b21b      	sxth	r3, r3
 8000ce4:	b29b      	uxth	r3, r3
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	4619      	mov	r1, r3
 8000cea:	4845      	ldr	r0, [pc, #276]	; (8000e00 <display7SEG+0x474>)
 8000cec:	f001 fa57 	bl	800219e <HAL_GPIO_WritePin>
		break;
 8000cf0:	e0fb      	b.n	8000eea <display7SEG+0x55e>
	case 6:
		HAL_GPIO_WritePin(GPIOB, SEG[0] | SEG[1] | SEG[2] | SEG[3] | SEG[4] | SEG[5] | SEG[6], SET);
 8000cf2:	4b42      	ldr	r3, [pc, #264]	; (8000dfc <display7SEG+0x470>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	b21a      	sxth	r2, r3
 8000cf8:	4b40      	ldr	r3, [pc, #256]	; (8000dfc <display7SEG+0x470>)
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	b21b      	sxth	r3, r3
 8000cfe:	4313      	orrs	r3, r2
 8000d00:	b21a      	sxth	r2, r3
 8000d02:	4b3e      	ldr	r3, [pc, #248]	; (8000dfc <display7SEG+0x470>)
 8000d04:	689b      	ldr	r3, [r3, #8]
 8000d06:	b21b      	sxth	r3, r3
 8000d08:	4313      	orrs	r3, r2
 8000d0a:	b21a      	sxth	r2, r3
 8000d0c:	4b3b      	ldr	r3, [pc, #236]	; (8000dfc <display7SEG+0x470>)
 8000d0e:	68db      	ldr	r3, [r3, #12]
 8000d10:	b21b      	sxth	r3, r3
 8000d12:	4313      	orrs	r3, r2
 8000d14:	b21a      	sxth	r2, r3
 8000d16:	4b39      	ldr	r3, [pc, #228]	; (8000dfc <display7SEG+0x470>)
 8000d18:	691b      	ldr	r3, [r3, #16]
 8000d1a:	b21b      	sxth	r3, r3
 8000d1c:	4313      	orrs	r3, r2
 8000d1e:	b21a      	sxth	r2, r3
 8000d20:	4b36      	ldr	r3, [pc, #216]	; (8000dfc <display7SEG+0x470>)
 8000d22:	695b      	ldr	r3, [r3, #20]
 8000d24:	b21b      	sxth	r3, r3
 8000d26:	4313      	orrs	r3, r2
 8000d28:	b21a      	sxth	r2, r3
 8000d2a:	4b34      	ldr	r3, [pc, #208]	; (8000dfc <display7SEG+0x470>)
 8000d2c:	699b      	ldr	r3, [r3, #24]
 8000d2e:	b21b      	sxth	r3, r3
 8000d30:	4313      	orrs	r3, r2
 8000d32:	b21b      	sxth	r3, r3
 8000d34:	b29b      	uxth	r3, r3
 8000d36:	2210      	movs	r2, #16
 8000d38:	4619      	mov	r1, r3
 8000d3a:	4831      	ldr	r0, [pc, #196]	; (8000e00 <display7SEG+0x474>)
 8000d3c:	f001 fa2f 	bl	800219e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG[0] | SEG[2] | SEG[3] | SEG[4] | SEG[5] | SEG[6], RESET);
 8000d40:	4b2e      	ldr	r3, [pc, #184]	; (8000dfc <display7SEG+0x470>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	b21a      	sxth	r2, r3
 8000d46:	4b2d      	ldr	r3, [pc, #180]	; (8000dfc <display7SEG+0x470>)
 8000d48:	689b      	ldr	r3, [r3, #8]
 8000d4a:	b21b      	sxth	r3, r3
 8000d4c:	4313      	orrs	r3, r2
 8000d4e:	b21a      	sxth	r2, r3
 8000d50:	4b2a      	ldr	r3, [pc, #168]	; (8000dfc <display7SEG+0x470>)
 8000d52:	68db      	ldr	r3, [r3, #12]
 8000d54:	b21b      	sxth	r3, r3
 8000d56:	4313      	orrs	r3, r2
 8000d58:	b21a      	sxth	r2, r3
 8000d5a:	4b28      	ldr	r3, [pc, #160]	; (8000dfc <display7SEG+0x470>)
 8000d5c:	691b      	ldr	r3, [r3, #16]
 8000d5e:	b21b      	sxth	r3, r3
 8000d60:	4313      	orrs	r3, r2
 8000d62:	b21a      	sxth	r2, r3
 8000d64:	4b25      	ldr	r3, [pc, #148]	; (8000dfc <display7SEG+0x470>)
 8000d66:	695b      	ldr	r3, [r3, #20]
 8000d68:	b21b      	sxth	r3, r3
 8000d6a:	4313      	orrs	r3, r2
 8000d6c:	b21a      	sxth	r2, r3
 8000d6e:	4b23      	ldr	r3, [pc, #140]	; (8000dfc <display7SEG+0x470>)
 8000d70:	699b      	ldr	r3, [r3, #24]
 8000d72:	b21b      	sxth	r3, r3
 8000d74:	4313      	orrs	r3, r2
 8000d76:	b21b      	sxth	r3, r3
 8000d78:	b29b      	uxth	r3, r3
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	4820      	ldr	r0, [pc, #128]	; (8000e00 <display7SEG+0x474>)
 8000d80:	f001 fa0d 	bl	800219e <HAL_GPIO_WritePin>
		break;
 8000d84:	e0b1      	b.n	8000eea <display7SEG+0x55e>
	case 7:
		HAL_GPIO_WritePin(GPIOB, SEG[0] | SEG[1] | SEG[2] | SEG[3] | SEG[4] | SEG[5] | SEG[6], SET);
 8000d86:	4b1d      	ldr	r3, [pc, #116]	; (8000dfc <display7SEG+0x470>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	b21a      	sxth	r2, r3
 8000d8c:	4b1b      	ldr	r3, [pc, #108]	; (8000dfc <display7SEG+0x470>)
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	b21b      	sxth	r3, r3
 8000d92:	4313      	orrs	r3, r2
 8000d94:	b21a      	sxth	r2, r3
 8000d96:	4b19      	ldr	r3, [pc, #100]	; (8000dfc <display7SEG+0x470>)
 8000d98:	689b      	ldr	r3, [r3, #8]
 8000d9a:	b21b      	sxth	r3, r3
 8000d9c:	4313      	orrs	r3, r2
 8000d9e:	b21a      	sxth	r2, r3
 8000da0:	4b16      	ldr	r3, [pc, #88]	; (8000dfc <display7SEG+0x470>)
 8000da2:	68db      	ldr	r3, [r3, #12]
 8000da4:	b21b      	sxth	r3, r3
 8000da6:	4313      	orrs	r3, r2
 8000da8:	b21a      	sxth	r2, r3
 8000daa:	4b14      	ldr	r3, [pc, #80]	; (8000dfc <display7SEG+0x470>)
 8000dac:	691b      	ldr	r3, [r3, #16]
 8000dae:	b21b      	sxth	r3, r3
 8000db0:	4313      	orrs	r3, r2
 8000db2:	b21a      	sxth	r2, r3
 8000db4:	4b11      	ldr	r3, [pc, #68]	; (8000dfc <display7SEG+0x470>)
 8000db6:	695b      	ldr	r3, [r3, #20]
 8000db8:	b21b      	sxth	r3, r3
 8000dba:	4313      	orrs	r3, r2
 8000dbc:	b21a      	sxth	r2, r3
 8000dbe:	4b0f      	ldr	r3, [pc, #60]	; (8000dfc <display7SEG+0x470>)
 8000dc0:	699b      	ldr	r3, [r3, #24]
 8000dc2:	b21b      	sxth	r3, r3
 8000dc4:	4313      	orrs	r3, r2
 8000dc6:	b21b      	sxth	r3, r3
 8000dc8:	b29b      	uxth	r3, r3
 8000dca:	2210      	movs	r2, #16
 8000dcc:	4619      	mov	r1, r3
 8000dce:	480c      	ldr	r0, [pc, #48]	; (8000e00 <display7SEG+0x474>)
 8000dd0:	f001 f9e5 	bl	800219e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG[0] | SEG[1] | SEG[2], RESET);
 8000dd4:	4b09      	ldr	r3, [pc, #36]	; (8000dfc <display7SEG+0x470>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	b21a      	sxth	r2, r3
 8000dda:	4b08      	ldr	r3, [pc, #32]	; (8000dfc <display7SEG+0x470>)
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	b21b      	sxth	r3, r3
 8000de0:	4313      	orrs	r3, r2
 8000de2:	b21a      	sxth	r2, r3
 8000de4:	4b05      	ldr	r3, [pc, #20]	; (8000dfc <display7SEG+0x470>)
 8000de6:	689b      	ldr	r3, [r3, #8]
 8000de8:	b21b      	sxth	r3, r3
 8000dea:	4313      	orrs	r3, r2
 8000dec:	b21b      	sxth	r3, r3
 8000dee:	b29b      	uxth	r3, r3
 8000df0:	2200      	movs	r2, #0
 8000df2:	4619      	mov	r1, r3
 8000df4:	4802      	ldr	r0, [pc, #8]	; (8000e00 <display7SEG+0x474>)
 8000df6:	f001 f9d2 	bl	800219e <HAL_GPIO_WritePin>
		break;
 8000dfa:	e076      	b.n	8000eea <display7SEG+0x55e>
 8000dfc:	20000010 	.word	0x20000010
 8000e00:	40010c00 	.word	0x40010c00
	case 8:
		HAL_GPIO_WritePin(GPIOB, SEG[0] | SEG[1] | SEG[2] | SEG[3] | SEG[4] | SEG[5] | SEG[6], RESET);
 8000e04:	4b3b      	ldr	r3, [pc, #236]	; (8000ef4 <display7SEG+0x568>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	b21a      	sxth	r2, r3
 8000e0a:	4b3a      	ldr	r3, [pc, #232]	; (8000ef4 <display7SEG+0x568>)
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	b21b      	sxth	r3, r3
 8000e10:	4313      	orrs	r3, r2
 8000e12:	b21a      	sxth	r2, r3
 8000e14:	4b37      	ldr	r3, [pc, #220]	; (8000ef4 <display7SEG+0x568>)
 8000e16:	689b      	ldr	r3, [r3, #8]
 8000e18:	b21b      	sxth	r3, r3
 8000e1a:	4313      	orrs	r3, r2
 8000e1c:	b21a      	sxth	r2, r3
 8000e1e:	4b35      	ldr	r3, [pc, #212]	; (8000ef4 <display7SEG+0x568>)
 8000e20:	68db      	ldr	r3, [r3, #12]
 8000e22:	b21b      	sxth	r3, r3
 8000e24:	4313      	orrs	r3, r2
 8000e26:	b21a      	sxth	r2, r3
 8000e28:	4b32      	ldr	r3, [pc, #200]	; (8000ef4 <display7SEG+0x568>)
 8000e2a:	691b      	ldr	r3, [r3, #16]
 8000e2c:	b21b      	sxth	r3, r3
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	b21a      	sxth	r2, r3
 8000e32:	4b30      	ldr	r3, [pc, #192]	; (8000ef4 <display7SEG+0x568>)
 8000e34:	695b      	ldr	r3, [r3, #20]
 8000e36:	b21b      	sxth	r3, r3
 8000e38:	4313      	orrs	r3, r2
 8000e3a:	b21a      	sxth	r2, r3
 8000e3c:	4b2d      	ldr	r3, [pc, #180]	; (8000ef4 <display7SEG+0x568>)
 8000e3e:	699b      	ldr	r3, [r3, #24]
 8000e40:	b21b      	sxth	r3, r3
 8000e42:	4313      	orrs	r3, r2
 8000e44:	b21b      	sxth	r3, r3
 8000e46:	b29b      	uxth	r3, r3
 8000e48:	2200      	movs	r2, #0
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	482a      	ldr	r0, [pc, #168]	; (8000ef8 <display7SEG+0x56c>)
 8000e4e:	f001 f9a6 	bl	800219e <HAL_GPIO_WritePin>
		break;
 8000e52:	e04a      	b.n	8000eea <display7SEG+0x55e>
	case 9:
		HAL_GPIO_WritePin(GPIOB, SEG[0] | SEG[1] | SEG[2] | SEG[3] | SEG[4] | SEG[5] | SEG[6], SET);
 8000e54:	4b27      	ldr	r3, [pc, #156]	; (8000ef4 <display7SEG+0x568>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	b21a      	sxth	r2, r3
 8000e5a:	4b26      	ldr	r3, [pc, #152]	; (8000ef4 <display7SEG+0x568>)
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	b21b      	sxth	r3, r3
 8000e60:	4313      	orrs	r3, r2
 8000e62:	b21a      	sxth	r2, r3
 8000e64:	4b23      	ldr	r3, [pc, #140]	; (8000ef4 <display7SEG+0x568>)
 8000e66:	689b      	ldr	r3, [r3, #8]
 8000e68:	b21b      	sxth	r3, r3
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	b21a      	sxth	r2, r3
 8000e6e:	4b21      	ldr	r3, [pc, #132]	; (8000ef4 <display7SEG+0x568>)
 8000e70:	68db      	ldr	r3, [r3, #12]
 8000e72:	b21b      	sxth	r3, r3
 8000e74:	4313      	orrs	r3, r2
 8000e76:	b21a      	sxth	r2, r3
 8000e78:	4b1e      	ldr	r3, [pc, #120]	; (8000ef4 <display7SEG+0x568>)
 8000e7a:	691b      	ldr	r3, [r3, #16]
 8000e7c:	b21b      	sxth	r3, r3
 8000e7e:	4313      	orrs	r3, r2
 8000e80:	b21a      	sxth	r2, r3
 8000e82:	4b1c      	ldr	r3, [pc, #112]	; (8000ef4 <display7SEG+0x568>)
 8000e84:	695b      	ldr	r3, [r3, #20]
 8000e86:	b21b      	sxth	r3, r3
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	b21a      	sxth	r2, r3
 8000e8c:	4b19      	ldr	r3, [pc, #100]	; (8000ef4 <display7SEG+0x568>)
 8000e8e:	699b      	ldr	r3, [r3, #24]
 8000e90:	b21b      	sxth	r3, r3
 8000e92:	4313      	orrs	r3, r2
 8000e94:	b21b      	sxth	r3, r3
 8000e96:	b29b      	uxth	r3, r3
 8000e98:	2210      	movs	r2, #16
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	4816      	ldr	r0, [pc, #88]	; (8000ef8 <display7SEG+0x56c>)
 8000e9e:	f001 f97e 	bl	800219e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG[0] | SEG[1] | SEG[2] | SEG[3] | SEG[5] | SEG[6], RESET);
 8000ea2:	4b14      	ldr	r3, [pc, #80]	; (8000ef4 <display7SEG+0x568>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	b21a      	sxth	r2, r3
 8000ea8:	4b12      	ldr	r3, [pc, #72]	; (8000ef4 <display7SEG+0x568>)
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	b21b      	sxth	r3, r3
 8000eae:	4313      	orrs	r3, r2
 8000eb0:	b21a      	sxth	r2, r3
 8000eb2:	4b10      	ldr	r3, [pc, #64]	; (8000ef4 <display7SEG+0x568>)
 8000eb4:	689b      	ldr	r3, [r3, #8]
 8000eb6:	b21b      	sxth	r3, r3
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	b21a      	sxth	r2, r3
 8000ebc:	4b0d      	ldr	r3, [pc, #52]	; (8000ef4 <display7SEG+0x568>)
 8000ebe:	68db      	ldr	r3, [r3, #12]
 8000ec0:	b21b      	sxth	r3, r3
 8000ec2:	4313      	orrs	r3, r2
 8000ec4:	b21a      	sxth	r2, r3
 8000ec6:	4b0b      	ldr	r3, [pc, #44]	; (8000ef4 <display7SEG+0x568>)
 8000ec8:	695b      	ldr	r3, [r3, #20]
 8000eca:	b21b      	sxth	r3, r3
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	b21a      	sxth	r2, r3
 8000ed0:	4b08      	ldr	r3, [pc, #32]	; (8000ef4 <display7SEG+0x568>)
 8000ed2:	699b      	ldr	r3, [r3, #24]
 8000ed4:	b21b      	sxth	r3, r3
 8000ed6:	4313      	orrs	r3, r2
 8000ed8:	b21b      	sxth	r3, r3
 8000eda:	b29b      	uxth	r3, r3
 8000edc:	2200      	movs	r2, #0
 8000ede:	4619      	mov	r1, r3
 8000ee0:	4805      	ldr	r0, [pc, #20]	; (8000ef8 <display7SEG+0x56c>)
 8000ee2:	f001 f95c 	bl	800219e <HAL_GPIO_WritePin>
		break;
 8000ee6:	e000      	b.n	8000eea <display7SEG+0x55e>
	default:
		break;
 8000ee8:	bf00      	nop
	}
}
 8000eea:	bf00      	nop
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	20000010 	.word	0x20000010
 8000ef8:	40010c00 	.word	0x40010c00

08000efc <update7SEG>:

void update7SEG(){
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
	switch(led_index){
 8000f00:	4b2f      	ldr	r3, [pc, #188]	; (8000fc0 <update7SEG+0xc4>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	2b03      	cmp	r3, #3
 8000f06:	d84b      	bhi.n	8000fa0 <update7SEG+0xa4>
 8000f08:	a201      	add	r2, pc, #4	; (adr r2, 8000f10 <update7SEG+0x14>)
 8000f0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f0e:	bf00      	nop
 8000f10:	08000f21 	.word	0x08000f21
 8000f14:	08000f41 	.word	0x08000f41
 8000f18:	08000f61 	.word	0x08000f61
 8000f1c:	08000f81 	.word	0x08000f81
		case 0:
			HAL_GPIO_WritePin(GPIOA, EN1_Pin | EN2_Pin | EN3_Pin, SET);
 8000f20:	2210      	movs	r2, #16
 8000f22:	21e0      	movs	r1, #224	; 0xe0
 8000f24:	4827      	ldr	r0, [pc, #156]	; (8000fc4 <update7SEG+0xc8>)
 8000f26:	f001 f93a 	bl	800219e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN0_Pin, RESET);
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	2110      	movs	r1, #16
 8000f2e:	4825      	ldr	r0, [pc, #148]	; (8000fc4 <update7SEG+0xc8>)
 8000f30:	f001 f935 	bl	800219e <HAL_GPIO_WritePin>
			display7SEG(led_buffer[0]);
 8000f34:	4b24      	ldr	r3, [pc, #144]	; (8000fc8 <update7SEG+0xcc>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f7ff fd27 	bl	800098c <display7SEG>
			break;
 8000f3e:	e030      	b.n	8000fa2 <update7SEG+0xa6>
		case 1:
			HAL_GPIO_WritePin(GPIOA, EN0_Pin | EN2_Pin | EN3_Pin, SET);
 8000f40:	2210      	movs	r2, #16
 8000f42:	21d0      	movs	r1, #208	; 0xd0
 8000f44:	481f      	ldr	r0, [pc, #124]	; (8000fc4 <update7SEG+0xc8>)
 8000f46:	f001 f92a 	bl	800219e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN1_Pin, RESET);
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	2120      	movs	r1, #32
 8000f4e:	481d      	ldr	r0, [pc, #116]	; (8000fc4 <update7SEG+0xc8>)
 8000f50:	f001 f925 	bl	800219e <HAL_GPIO_WritePin>
			display7SEG(led_buffer[1]);
 8000f54:	4b1c      	ldr	r3, [pc, #112]	; (8000fc8 <update7SEG+0xcc>)
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f7ff fd17 	bl	800098c <display7SEG>
			break;
 8000f5e:	e020      	b.n	8000fa2 <update7SEG+0xa6>
		case 2:
			HAL_GPIO_WritePin(GPIOA, EN1_Pin | EN0_Pin | EN3_Pin, SET);
 8000f60:	2210      	movs	r2, #16
 8000f62:	21b0      	movs	r1, #176	; 0xb0
 8000f64:	4817      	ldr	r0, [pc, #92]	; (8000fc4 <update7SEG+0xc8>)
 8000f66:	f001 f91a 	bl	800219e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN2_Pin, RESET);
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	2140      	movs	r1, #64	; 0x40
 8000f6e:	4815      	ldr	r0, [pc, #84]	; (8000fc4 <update7SEG+0xc8>)
 8000f70:	f001 f915 	bl	800219e <HAL_GPIO_WritePin>
			display7SEG(led_buffer[2]);
 8000f74:	4b14      	ldr	r3, [pc, #80]	; (8000fc8 <update7SEG+0xcc>)
 8000f76:	689b      	ldr	r3, [r3, #8]
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f7ff fd07 	bl	800098c <display7SEG>
			break;
 8000f7e:	e010      	b.n	8000fa2 <update7SEG+0xa6>
		case 3:
			HAL_GPIO_WritePin(GPIOA, EN1_Pin | EN2_Pin | EN0_Pin, SET);
 8000f80:	2210      	movs	r2, #16
 8000f82:	2170      	movs	r1, #112	; 0x70
 8000f84:	480f      	ldr	r0, [pc, #60]	; (8000fc4 <update7SEG+0xc8>)
 8000f86:	f001 f90a 	bl	800219e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN3_Pin, RESET);
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	2180      	movs	r1, #128	; 0x80
 8000f8e:	480d      	ldr	r0, [pc, #52]	; (8000fc4 <update7SEG+0xc8>)
 8000f90:	f001 f905 	bl	800219e <HAL_GPIO_WritePin>
			display7SEG(led_buffer[3]);
 8000f94:	4b0c      	ldr	r3, [pc, #48]	; (8000fc8 <update7SEG+0xcc>)
 8000f96:	68db      	ldr	r3, [r3, #12]
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f7ff fcf7 	bl	800098c <display7SEG>
			break;
 8000f9e:	e000      	b.n	8000fa2 <update7SEG+0xa6>
		default:
			break;
 8000fa0:	bf00      	nop
	}
	led_index++;
 8000fa2:	4b07      	ldr	r3, [pc, #28]	; (8000fc0 <update7SEG+0xc4>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	3301      	adds	r3, #1
 8000fa8:	4a05      	ldr	r2, [pc, #20]	; (8000fc0 <update7SEG+0xc4>)
 8000faa:	6013      	str	r3, [r2, #0]
	if (led_index >= 4) led_index=0;
 8000fac:	4b04      	ldr	r3, [pc, #16]	; (8000fc0 <update7SEG+0xc4>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	2b03      	cmp	r3, #3
 8000fb2:	dd02      	ble.n	8000fba <update7SEG+0xbe>
 8000fb4:	4b02      	ldr	r3, [pc, #8]	; (8000fc0 <update7SEG+0xc4>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	601a      	str	r2, [r3, #0]
}
 8000fba:	bf00      	nop
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	20000074 	.word	0x20000074
 8000fc4:	40010800 	.word	0x40010800
 8000fc8:	20000078 	.word	0x20000078

08000fcc <updateBuffer>:

void updateBuffer(){
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
	led_buffer[0] = timerTraffic1 / 10;
 8000fd0:	4b1a      	ldr	r3, [pc, #104]	; (800103c <updateBuffer+0x70>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a1a      	ldr	r2, [pc, #104]	; (8001040 <updateBuffer+0x74>)
 8000fd6:	fb82 1203 	smull	r1, r2, r2, r3
 8000fda:	1092      	asrs	r2, r2, #2
 8000fdc:	17db      	asrs	r3, r3, #31
 8000fde:	1ad3      	subs	r3, r2, r3
 8000fe0:	4a18      	ldr	r2, [pc, #96]	; (8001044 <updateBuffer+0x78>)
 8000fe2:	6013      	str	r3, [r2, #0]
	led_buffer[1] = timerTraffic1 % 10;
 8000fe4:	4b15      	ldr	r3, [pc, #84]	; (800103c <updateBuffer+0x70>)
 8000fe6:	6819      	ldr	r1, [r3, #0]
 8000fe8:	4b15      	ldr	r3, [pc, #84]	; (8001040 <updateBuffer+0x74>)
 8000fea:	fb83 2301 	smull	r2, r3, r3, r1
 8000fee:	109a      	asrs	r2, r3, #2
 8000ff0:	17cb      	asrs	r3, r1, #31
 8000ff2:	1ad2      	subs	r2, r2, r3
 8000ff4:	4613      	mov	r3, r2
 8000ff6:	009b      	lsls	r3, r3, #2
 8000ff8:	4413      	add	r3, r2
 8000ffa:	005b      	lsls	r3, r3, #1
 8000ffc:	1aca      	subs	r2, r1, r3
 8000ffe:	4b11      	ldr	r3, [pc, #68]	; (8001044 <updateBuffer+0x78>)
 8001000:	605a      	str	r2, [r3, #4]
	led_buffer[2] = timerTraffic2 / 10;
 8001002:	4b11      	ldr	r3, [pc, #68]	; (8001048 <updateBuffer+0x7c>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4a0e      	ldr	r2, [pc, #56]	; (8001040 <updateBuffer+0x74>)
 8001008:	fb82 1203 	smull	r1, r2, r2, r3
 800100c:	1092      	asrs	r2, r2, #2
 800100e:	17db      	asrs	r3, r3, #31
 8001010:	1ad3      	subs	r3, r2, r3
 8001012:	4a0c      	ldr	r2, [pc, #48]	; (8001044 <updateBuffer+0x78>)
 8001014:	6093      	str	r3, [r2, #8]
	led_buffer[3] = timerTraffic2 % 10;;
 8001016:	4b0c      	ldr	r3, [pc, #48]	; (8001048 <updateBuffer+0x7c>)
 8001018:	6819      	ldr	r1, [r3, #0]
 800101a:	4b09      	ldr	r3, [pc, #36]	; (8001040 <updateBuffer+0x74>)
 800101c:	fb83 2301 	smull	r2, r3, r3, r1
 8001020:	109a      	asrs	r2, r3, #2
 8001022:	17cb      	asrs	r3, r1, #31
 8001024:	1ad2      	subs	r2, r2, r3
 8001026:	4613      	mov	r3, r2
 8001028:	009b      	lsls	r3, r3, #2
 800102a:	4413      	add	r3, r2
 800102c:	005b      	lsls	r3, r3, #1
 800102e:	1aca      	subs	r2, r1, r3
 8001030:	4b04      	ldr	r3, [pc, #16]	; (8001044 <updateBuffer+0x78>)
 8001032:	60da      	str	r2, [r3, #12]
}
 8001034:	bf00      	nop
 8001036:	46bd      	mov	sp, r7
 8001038:	bc80      	pop	{r7}
 800103a:	4770      	bx	lr
 800103c:	2000006c 	.word	0x2000006c
 8001040:	66666667 	.word	0x66666667
 8001044:	20000078 	.word	0x20000078
 8001048:	20000070 	.word	0x20000070

0800104c <button_reading>:
int buttonTimeOut[NO_OF_BUTTONS] = {0};

uint16_t pins[NO_OF_BUTTONS] = {BUTTON_MODE_Pin, BUTTON_ADD_Pin, BUTTON_SET_Pin};
GPIO_TypeDef* ports[NO_OF_BUTTONS] = {BUTTON_MODE_GPIO_Port, BUTTON_ADD_GPIO_Port, BUTTON_SET_GPIO_Port};

void button_reading(){
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
	for(int i = 0; i < NO_OF_BUTTONS; i++){
 8001052:	2300      	movs	r3, #0
 8001054:	607b      	str	r3, [r7, #4]
 8001056:	e073      	b.n	8001140 <button_reading+0xf4>
		debounceButtonBuffer3[i] = debounceButtonBuffer2[i];
 8001058:	4a3d      	ldr	r2, [pc, #244]	; (8001150 <button_reading+0x104>)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4413      	add	r3, r2
 800105e:	7819      	ldrb	r1, [r3, #0]
 8001060:	4a3c      	ldr	r2, [pc, #240]	; (8001154 <button_reading+0x108>)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4413      	add	r3, r2
 8001066:	460a      	mov	r2, r1
 8001068:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 800106a:	4a3b      	ldr	r2, [pc, #236]	; (8001158 <button_reading+0x10c>)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	4413      	add	r3, r2
 8001070:	7819      	ldrb	r1, [r3, #0]
 8001072:	4a37      	ldr	r2, [pc, #220]	; (8001150 <button_reading+0x104>)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	4413      	add	r3, r2
 8001078:	460a      	mov	r2, r1
 800107a:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(ports[i], pins[i]);
 800107c:	4a37      	ldr	r2, [pc, #220]	; (800115c <button_reading+0x110>)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001084:	4936      	ldr	r1, [pc, #216]	; (8001160 <button_reading+0x114>)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800108c:	4619      	mov	r1, r3
 800108e:	4610      	mov	r0, r2
 8001090:	f001 f86e 	bl	8002170 <HAL_GPIO_ReadPin>
 8001094:	4603      	mov	r3, r0
 8001096:	4619      	mov	r1, r3
 8001098:	4a2f      	ldr	r2, [pc, #188]	; (8001158 <button_reading+0x10c>)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4413      	add	r3, r2
 800109e:	460a      	mov	r2, r1
 80010a0:	701a      	strb	r2, [r3, #0]
		if((debounceButtonBuffer3[i] == debounceButtonBuffer2[i]) && (debounceButtonBuffer2[i] == debounceButtonBuffer1[i])){
 80010a2:	4a2c      	ldr	r2, [pc, #176]	; (8001154 <button_reading+0x108>)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	4413      	add	r3, r2
 80010a8:	781a      	ldrb	r2, [r3, #0]
 80010aa:	4929      	ldr	r1, [pc, #164]	; (8001150 <button_reading+0x104>)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	440b      	add	r3, r1
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	429a      	cmp	r2, r3
 80010b4:	d141      	bne.n	800113a <button_reading+0xee>
 80010b6:	4a26      	ldr	r2, [pc, #152]	; (8001150 <button_reading+0x104>)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	4413      	add	r3, r2
 80010bc:	781a      	ldrb	r2, [r3, #0]
 80010be:	4926      	ldr	r1, [pc, #152]	; (8001158 <button_reading+0x10c>)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	440b      	add	r3, r1
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	429a      	cmp	r2, r3
 80010c8:	d137      	bne.n	800113a <button_reading+0xee>
			if(debounceButtonBuffer1[i] != buttonBuffer[i]){
 80010ca:	4a23      	ldr	r2, [pc, #140]	; (8001158 <button_reading+0x10c>)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	4413      	add	r3, r2
 80010d0:	781a      	ldrb	r2, [r3, #0]
 80010d2:	4924      	ldr	r1, [pc, #144]	; (8001164 <button_reading+0x118>)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	440b      	add	r3, r1
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	429a      	cmp	r2, r3
 80010dc:	d019      	beq.n	8001112 <button_reading+0xc6>
				buttonBuffer[i] = debounceButtonBuffer1[i];
 80010de:	4a1e      	ldr	r2, [pc, #120]	; (8001158 <button_reading+0x10c>)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	4413      	add	r3, r2
 80010e4:	7819      	ldrb	r1, [r3, #0]
 80010e6:	4a1f      	ldr	r2, [pc, #124]	; (8001164 <button_reading+0x118>)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	4413      	add	r3, r2
 80010ec:	460a      	mov	r2, r1
 80010ee:	701a      	strb	r2, [r3, #0]
				if(buttonBuffer[i] == BUTTON_IS_PRESSED){
 80010f0:	4a1c      	ldr	r2, [pc, #112]	; (8001164 <button_reading+0x118>)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4413      	add	r3, r2
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d11e      	bne.n	800113a <button_reading+0xee>
					buttonFlag[i] = 1;
 80010fc:	4a1a      	ldr	r2, [pc, #104]	; (8001168 <button_reading+0x11c>)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2101      	movs	r1, #1
 8001102:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					buttonTimeOut[i] = 100;
 8001106:	4a19      	ldr	r2, [pc, #100]	; (800116c <button_reading+0x120>)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2164      	movs	r1, #100	; 0x64
 800110c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8001110:	e013      	b.n	800113a <button_reading+0xee>
				}
			}
			else{
				buttonTimeOut[i]--;
 8001112:	4a16      	ldr	r2, [pc, #88]	; (800116c <button_reading+0x120>)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800111a:	1e5a      	subs	r2, r3, #1
 800111c:	4913      	ldr	r1, [pc, #76]	; (800116c <button_reading+0x120>)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if(buttonTimeOut[i] <= 0){
 8001124:	4a11      	ldr	r2, [pc, #68]	; (800116c <button_reading+0x120>)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800112c:	2b00      	cmp	r3, #0
 800112e:	dc04      	bgt.n	800113a <button_reading+0xee>
					buttonBuffer[i] = BUTTON_IS_RELEASED;
 8001130:	4a0c      	ldr	r2, [pc, #48]	; (8001164 <button_reading+0x118>)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	4413      	add	r3, r2
 8001136:	2201      	movs	r2, #1
 8001138:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < NO_OF_BUTTONS; i++){
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	3301      	adds	r3, #1
 800113e:	607b      	str	r3, [r7, #4]
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2b02      	cmp	r3, #2
 8001144:	dd88      	ble.n	8001058 <button_reading+0xc>
				}
			}
		}
	}
}
 8001146:	bf00      	nop
 8001148:	bf00      	nop
 800114a:	3708      	adds	r7, #8
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	2000008c 	.word	0x2000008c
 8001154:	20000090 	.word	0x20000090
 8001158:	20000088 	.word	0x20000088
 800115c:	20000038 	.word	0x20000038
 8001160:	20000030 	.word	0x20000030
 8001164:	2000002c 	.word	0x2000002c
 8001168:	20000094 	.word	0x20000094
 800116c:	200000a0 	.word	0x200000a0

08001170 <isButtonPressed>:

int isButtonPressed(int button_index){
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
	if(button_index >= NO_OF_BUTTONS || button_index < 0) return 0;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2b02      	cmp	r3, #2
 800117c:	dc02      	bgt.n	8001184 <isButtonPressed+0x14>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2b00      	cmp	r3, #0
 8001182:	da01      	bge.n	8001188 <isButtonPressed+0x18>
 8001184:	2300      	movs	r3, #0
 8001186:	e00d      	b.n	80011a4 <isButtonPressed+0x34>
	if(buttonFlag[button_index] == 1){
 8001188:	4a09      	ldr	r2, [pc, #36]	; (80011b0 <isButtonPressed+0x40>)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001190:	2b01      	cmp	r3, #1
 8001192:	d106      	bne.n	80011a2 <isButtonPressed+0x32>
		buttonFlag[button_index] = 0;
 8001194:	4a06      	ldr	r2, [pc, #24]	; (80011b0 <isButtonPressed+0x40>)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2100      	movs	r1, #0
 800119a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800119e:	2301      	movs	r3, #1
 80011a0:	e000      	b.n	80011a4 <isButtonPressed+0x34>
	}
	return 0;
 80011a2:	2300      	movs	r3, #0
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	370c      	adds	r7, #12
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bc80      	pop	{r7}
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	20000094 	.word	0x20000094

080011b4 <setBackButtonFlag>:

void setBackButtonFlag(int index){
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
	buttonFlag[index] = 1;
 80011bc:	4a04      	ldr	r2, [pc, #16]	; (80011d0 <setBackButtonFlag+0x1c>)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2101      	movs	r1, #1
 80011c2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80011c6:	bf00      	nop
 80011c8:	370c      	adds	r7, #12
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bc80      	pop	{r7}
 80011ce:	4770      	bx	lr
 80011d0:	20000094 	.word	0x20000094

080011d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011d8:	f000 fce0 	bl	8001b9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011dc:	f000 f86c 	bl	80012b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011e0:	f000 f8f2 	bl	80013c8 <MX_GPIO_Init>
  MX_TIM2_Init();
 80011e4:	f000 f8a4 	bl	8001330 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80011e8:	4825      	ldr	r0, [pc, #148]	; (8001280 <main+0xac>)
 80011ea:	f001 fc35 	bl	8002a58 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */
  setTimer(2, 10); // This timer will use for buffer
 80011ee:	210a      	movs	r1, #10
 80011f0:	2002      	movs	r0, #2
 80011f2:	f000 fb9b 	bl	800192c <setTimer>
  setTimer7SEG(10);
 80011f6:	200a      	movs	r0, #10
 80011f8:	f000 fb60 	bl	80018bc <setTimer7SEG>
  timerTraffic1 = durationRED / 1000;
 80011fc:	4b21      	ldr	r3, [pc, #132]	; (8001284 <main+0xb0>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a21      	ldr	r2, [pc, #132]	; (8001288 <main+0xb4>)
 8001202:	fb82 1203 	smull	r1, r2, r2, r3
 8001206:	1192      	asrs	r2, r2, #6
 8001208:	17db      	asrs	r3, r3, #31
 800120a:	1ad3      	subs	r3, r2, r3
 800120c:	4a1f      	ldr	r2, [pc, #124]	; (800128c <main+0xb8>)
 800120e:	6013      	str	r3, [r2, #0]
  timerTraffic2 = durationGREEN / 1000;
 8001210:	4b1f      	ldr	r3, [pc, #124]	; (8001290 <main+0xbc>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a1c      	ldr	r2, [pc, #112]	; (8001288 <main+0xb4>)
 8001216:	fb82 1203 	smull	r1, r2, r2, r3
 800121a:	1192      	asrs	r2, r2, #6
 800121c:	17db      	asrs	r3, r3, #31
 800121e:	1ad3      	subs	r3, r2, r3
 8001220:	4a1c      	ldr	r2, [pc, #112]	; (8001294 <main+0xc0>)
 8001222:	6013      	str	r3, [r2, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  SCH_Init();
 8001224:	f000 f942 	bl	80014ac <SCH_Init>
  SCH_Add_Task(timerRun, 0, 1);
 8001228:	2201      	movs	r2, #1
 800122a:	2100      	movs	r1, #0
 800122c:	481a      	ldr	r0, [pc, #104]	; (8001298 <main+0xc4>)
 800122e:	f000 f9a3 	bl	8001578 <SCH_Add_Task>
  SCH_Add_Task(timerRunSecond, 0, 1);
 8001232:	2201      	movs	r2, #1
 8001234:	2100      	movs	r1, #0
 8001236:	4819      	ldr	r0, [pc, #100]	; (800129c <main+0xc8>)
 8001238:	f000 f99e 	bl	8001578 <SCH_Add_Task>
  SCH_Add_Task(timerRun7SEG, 0, 1);
 800123c:	2201      	movs	r2, #1
 800123e:	2100      	movs	r1, #0
 8001240:	4817      	ldr	r0, [pc, #92]	; (80012a0 <main+0xcc>)
 8001242:	f000 f999 	bl	8001578 <SCH_Add_Task>
  SCH_Add_Task(button_reading, 0, 1);
 8001246:	2201      	movs	r2, #1
 8001248:	2100      	movs	r1, #0
 800124a:	4816      	ldr	r0, [pc, #88]	; (80012a4 <main+0xd0>)
 800124c:	f000 f994 	bl	8001578 <SCH_Add_Task>
  SCH_Add_Task(update7SEG, 1, 25);
 8001250:	2219      	movs	r2, #25
 8001252:	2101      	movs	r1, #1
 8001254:	4814      	ldr	r0, [pc, #80]	; (80012a8 <main+0xd4>)
 8001256:	f000 f98f 	bl	8001578 <SCH_Add_Task>
  SCH_Add_Task(updateBuffer, 1,10);
 800125a:	220a      	movs	r2, #10
 800125c:	2101      	movs	r1, #1
 800125e:	4813      	ldr	r0, [pc, #76]	; (80012ac <main+0xd8>)
 8001260:	f000 f98a 	bl	8001578 <SCH_Add_Task>
  SCH_Add_Task(fsm_manual_run, 0, 1);
 8001264:	2201      	movs	r2, #1
 8001266:	2100      	movs	r1, #0
 8001268:	4811      	ldr	r0, [pc, #68]	; (80012b0 <main+0xdc>)
 800126a:	f000 f985 	bl	8001578 <SCH_Add_Task>
  SCH_Add_Task(fsm_automatic_run, 0, 1);
 800126e:	2201      	movs	r2, #1
 8001270:	2100      	movs	r1, #0
 8001272:	4810      	ldr	r0, [pc, #64]	; (80012b4 <main+0xe0>)
 8001274:	f000 f980 	bl	8001578 <SCH_Add_Task>
  while (1)
  {
    /* USER CODE END WHILE */
	  SCH_Dispatch_Tasks();
 8001278:	f000 fae8 	bl	800184c <SCH_Dispatch_Tasks>
  {
 800127c:	e7fc      	b.n	8001278 <main+0xa4>
 800127e:	bf00      	nop
 8001280:	200001ac 	.word	0x200001ac
 8001284:	20000004 	.word	0x20000004
 8001288:	10624dd3 	.word	0x10624dd3
 800128c:	2000006c 	.word	0x2000006c
 8001290:	2000000c 	.word	0x2000000c
 8001294:	20000070 	.word	0x20000070
 8001298:	0800196d 	.word	0x0800196d
 800129c:	080019cd 	.word	0x080019cd
 80012a0:	08001a01 	.word	0x08001a01
 80012a4:	0800104d 	.word	0x0800104d
 80012a8:	08000efd 	.word	0x08000efd
 80012ac:	08000fcd 	.word	0x08000fcd
 80012b0:	080004cd 	.word	0x080004cd
 80012b4:	0800014d 	.word	0x0800014d

080012b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b090      	sub	sp, #64	; 0x40
 80012bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012be:	f107 0318 	add.w	r3, r7, #24
 80012c2:	2228      	movs	r2, #40	; 0x28
 80012c4:	2100      	movs	r1, #0
 80012c6:	4618      	mov	r0, r3
 80012c8:	f001 ff82 	bl	80031d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012cc:	1d3b      	adds	r3, r7, #4
 80012ce:	2200      	movs	r2, #0
 80012d0:	601a      	str	r2, [r3, #0]
 80012d2:	605a      	str	r2, [r3, #4]
 80012d4:	609a      	str	r2, [r3, #8]
 80012d6:	60da      	str	r2, [r3, #12]
 80012d8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012da:	2302      	movs	r3, #2
 80012dc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012de:	2301      	movs	r3, #1
 80012e0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012e2:	2310      	movs	r3, #16
 80012e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80012e6:	2300      	movs	r3, #0
 80012e8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012ea:	f107 0318 	add.w	r3, r7, #24
 80012ee:	4618      	mov	r0, r3
 80012f0:	f000 ff86 	bl	8002200 <HAL_RCC_OscConfig>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <SystemClock_Config+0x46>
  {
    Error_Handler();
 80012fa:	f000 f8d1 	bl	80014a0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012fe:	230f      	movs	r3, #15
 8001300:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001302:	2300      	movs	r3, #0
 8001304:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001306:	2300      	movs	r3, #0
 8001308:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800130a:	2300      	movs	r3, #0
 800130c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800130e:	2300      	movs	r3, #0
 8001310:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001312:	1d3b      	adds	r3, r7, #4
 8001314:	2100      	movs	r1, #0
 8001316:	4618      	mov	r0, r3
 8001318:	f001 f9f2 	bl	8002700 <HAL_RCC_ClockConfig>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001322:	f000 f8bd 	bl	80014a0 <Error_Handler>
  }
}
 8001326:	bf00      	nop
 8001328:	3740      	adds	r7, #64	; 0x40
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
	...

08001330 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b086      	sub	sp, #24
 8001334:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001336:	f107 0308 	add.w	r3, r7, #8
 800133a:	2200      	movs	r2, #0
 800133c:	601a      	str	r2, [r3, #0]
 800133e:	605a      	str	r2, [r3, #4]
 8001340:	609a      	str	r2, [r3, #8]
 8001342:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001344:	463b      	mov	r3, r7
 8001346:	2200      	movs	r2, #0
 8001348:	601a      	str	r2, [r3, #0]
 800134a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800134c:	4b1d      	ldr	r3, [pc, #116]	; (80013c4 <MX_TIM2_Init+0x94>)
 800134e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001352:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001354:	4b1b      	ldr	r3, [pc, #108]	; (80013c4 <MX_TIM2_Init+0x94>)
 8001356:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800135a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800135c:	4b19      	ldr	r3, [pc, #100]	; (80013c4 <MX_TIM2_Init+0x94>)
 800135e:	2200      	movs	r2, #0
 8001360:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8001362:	4b18      	ldr	r3, [pc, #96]	; (80013c4 <MX_TIM2_Init+0x94>)
 8001364:	2209      	movs	r2, #9
 8001366:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001368:	4b16      	ldr	r3, [pc, #88]	; (80013c4 <MX_TIM2_Init+0x94>)
 800136a:	2200      	movs	r2, #0
 800136c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800136e:	4b15      	ldr	r3, [pc, #84]	; (80013c4 <MX_TIM2_Init+0x94>)
 8001370:	2200      	movs	r2, #0
 8001372:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001374:	4813      	ldr	r0, [pc, #76]	; (80013c4 <MX_TIM2_Init+0x94>)
 8001376:	f001 fb1f 	bl	80029b8 <HAL_TIM_Base_Init>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001380:	f000 f88e 	bl	80014a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001384:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001388:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800138a:	f107 0308 	add.w	r3, r7, #8
 800138e:	4619      	mov	r1, r3
 8001390:	480c      	ldr	r0, [pc, #48]	; (80013c4 <MX_TIM2_Init+0x94>)
 8001392:	f001 fcb5 	bl	8002d00 <HAL_TIM_ConfigClockSource>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800139c:	f000 f880 	bl	80014a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013a0:	2300      	movs	r3, #0
 80013a2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013a4:	2300      	movs	r3, #0
 80013a6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013a8:	463b      	mov	r3, r7
 80013aa:	4619      	mov	r1, r3
 80013ac:	4805      	ldr	r0, [pc, #20]	; (80013c4 <MX_TIM2_Init+0x94>)
 80013ae:	f001 fe81 	bl	80030b4 <HAL_TIMEx_MasterConfigSynchronization>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80013b8:	f000 f872 	bl	80014a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80013bc:	bf00      	nop
 80013be:	3718      	adds	r7, #24
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	200001ac 	.word	0x200001ac

080013c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b086      	sub	sp, #24
 80013cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ce:	f107 0308 	add.w	r3, r7, #8
 80013d2:	2200      	movs	r2, #0
 80013d4:	601a      	str	r2, [r3, #0]
 80013d6:	605a      	str	r2, [r3, #4]
 80013d8:	609a      	str	r2, [r3, #8]
 80013da:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013dc:	4b28      	ldr	r3, [pc, #160]	; (8001480 <MX_GPIO_Init+0xb8>)
 80013de:	699b      	ldr	r3, [r3, #24]
 80013e0:	4a27      	ldr	r2, [pc, #156]	; (8001480 <MX_GPIO_Init+0xb8>)
 80013e2:	f043 0304 	orr.w	r3, r3, #4
 80013e6:	6193      	str	r3, [r2, #24]
 80013e8:	4b25      	ldr	r3, [pc, #148]	; (8001480 <MX_GPIO_Init+0xb8>)
 80013ea:	699b      	ldr	r3, [r3, #24]
 80013ec:	f003 0304 	and.w	r3, r3, #4
 80013f0:	607b      	str	r3, [r7, #4]
 80013f2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013f4:	4b22      	ldr	r3, [pc, #136]	; (8001480 <MX_GPIO_Init+0xb8>)
 80013f6:	699b      	ldr	r3, [r3, #24]
 80013f8:	4a21      	ldr	r2, [pc, #132]	; (8001480 <MX_GPIO_Init+0xb8>)
 80013fa:	f043 0308 	orr.w	r3, r3, #8
 80013fe:	6193      	str	r3, [r2, #24]
 8001400:	4b1f      	ldr	r3, [pc, #124]	; (8001480 <MX_GPIO_Init+0xb8>)
 8001402:	699b      	ldr	r3, [r3, #24]
 8001404:	f003 0308 	and.w	r3, r3, #8
 8001408:	603b      	str	r3, [r7, #0]
 800140a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED_1_Pin|LED_YELLOW_1_Pin|LED_GREEN_1_Pin|EN0_Pin
 800140c:	2200      	movs	r2, #0
 800140e:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8001412:	481c      	ldr	r0, [pc, #112]	; (8001484 <MX_GPIO_Init+0xbc>)
 8001414:	f000 fec3 	bl	800219e <HAL_GPIO_WritePin>
                          |EN1_Pin|EN2_Pin|EN3_Pin|LED_RED_2_Pin
                          |LED_YELLOW_2_Pin|LED_GREEN_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG1_0_Pin|SEG1_1_Pin|SEG1_2_Pin|SEG1_3_Pin
 8001418:	2200      	movs	r2, #0
 800141a:	217f      	movs	r1, #127	; 0x7f
 800141c:	481a      	ldr	r0, [pc, #104]	; (8001488 <MX_GPIO_Init+0xc0>)
 800141e:	f000 febe 	bl	800219e <HAL_GPIO_WritePin>
                          |SEG1_4_Pin|SEG1_5_Pin|SEG1_6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED_RED_1_Pin LED_YELLOW_1_Pin LED_GREEN_1_Pin EN0_Pin
                           EN1_Pin EN2_Pin EN3_Pin LED_RED_2_Pin
                           LED_YELLOW_2_Pin LED_GREEN_2_Pin */
  GPIO_InitStruct.Pin = LED_RED_1_Pin|LED_YELLOW_1_Pin|LED_GREEN_1_Pin|EN0_Pin
 8001422:	f240 73fe 	movw	r3, #2046	; 0x7fe
 8001426:	60bb      	str	r3, [r7, #8]
                          |EN1_Pin|EN2_Pin|EN3_Pin|LED_RED_2_Pin
                          |LED_YELLOW_2_Pin|LED_GREEN_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001428:	2301      	movs	r3, #1
 800142a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142c:	2300      	movs	r3, #0
 800142e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001430:	2302      	movs	r3, #2
 8001432:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001434:	f107 0308 	add.w	r3, r7, #8
 8001438:	4619      	mov	r1, r3
 800143a:	4812      	ldr	r0, [pc, #72]	; (8001484 <MX_GPIO_Init+0xbc>)
 800143c:	f000 fd1e 	bl	8001e7c <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG1_0_Pin SEG1_1_Pin SEG1_2_Pin SEG1_3_Pin
                           SEG1_4_Pin SEG1_5_Pin SEG1_6_Pin */
  GPIO_InitStruct.Pin = SEG1_0_Pin|SEG1_1_Pin|SEG1_2_Pin|SEG1_3_Pin
 8001440:	237f      	movs	r3, #127	; 0x7f
 8001442:	60bb      	str	r3, [r7, #8]
                          |SEG1_4_Pin|SEG1_5_Pin|SEG1_6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001444:	2301      	movs	r3, #1
 8001446:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001448:	2300      	movs	r3, #0
 800144a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800144c:	2302      	movs	r3, #2
 800144e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001450:	f107 0308 	add.w	r3, r7, #8
 8001454:	4619      	mov	r1, r3
 8001456:	480c      	ldr	r0, [pc, #48]	; (8001488 <MX_GPIO_Init+0xc0>)
 8001458:	f000 fd10 	bl	8001e7c <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_MODE_Pin BUTTON_ADD_Pin BUTTON_SET_Pin */
  GPIO_InitStruct.Pin = BUTTON_MODE_Pin|BUTTON_ADD_Pin|BUTTON_SET_Pin;
 800145c:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8001460:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001462:	2300      	movs	r3, #0
 8001464:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001466:	2301      	movs	r3, #1
 8001468:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800146a:	f107 0308 	add.w	r3, r7, #8
 800146e:	4619      	mov	r1, r3
 8001470:	4804      	ldr	r0, [pc, #16]	; (8001484 <MX_GPIO_Init+0xbc>)
 8001472:	f000 fd03 	bl	8001e7c <HAL_GPIO_Init>

}
 8001476:	bf00      	nop
 8001478:	3718      	adds	r7, #24
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	40021000 	.word	0x40021000
 8001484:	40010800 	.word	0x40010800
 8001488:	40010c00 	.word	0x40010c00

0800148c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
//	timerRun();
//	timerRun7SEG();
//	timerRunSecond();
//	button_reading();
	SCH_Update();
 8001494:	f000 f850 	bl	8001538 <SCH_Update>
}
 8001498:	bf00      	nop
 800149a:	3708      	adds	r7, #8
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}

080014a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014a4:	b672      	cpsid	i
}
 80014a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014a8:	e7fe      	b.n	80014a8 <Error_Handler+0x8>
	...

080014ac <SCH_Init>:


static uint32_t Get_New_Task_ID(void);


void SCH_Init(void){
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
    for (int i=0; i<SCH_MAX_TASKS; i++){
 80014b2:	2300      	movs	r3, #0
 80014b4:	607b      	str	r3, [r7, #4]
 80014b6:	e034      	b.n	8001522 <SCH_Init+0x76>
        SCH_tasks_Array[i].pTask = 0;
 80014b8:	491e      	ldr	r1, [pc, #120]	; (8001534 <SCH_Init+0x88>)
 80014ba:	687a      	ldr	r2, [r7, #4]
 80014bc:	4613      	mov	r3, r2
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	4413      	add	r3, r2
 80014c2:	009b      	lsls	r3, r3, #2
 80014c4:	440b      	add	r3, r1
 80014c6:	2200      	movs	r2, #0
 80014c8:	601a      	str	r2, [r3, #0]
        SCH_tasks_Array[i].Delay = 0;
 80014ca:	491a      	ldr	r1, [pc, #104]	; (8001534 <SCH_Init+0x88>)
 80014cc:	687a      	ldr	r2, [r7, #4]
 80014ce:	4613      	mov	r3, r2
 80014d0:	009b      	lsls	r3, r3, #2
 80014d2:	4413      	add	r3, r2
 80014d4:	009b      	lsls	r3, r3, #2
 80014d6:	440b      	add	r3, r1
 80014d8:	3304      	adds	r3, #4
 80014da:	2200      	movs	r2, #0
 80014dc:	601a      	str	r2, [r3, #0]
        SCH_tasks_Array[i].Period = 0;
 80014de:	4915      	ldr	r1, [pc, #84]	; (8001534 <SCH_Init+0x88>)
 80014e0:	687a      	ldr	r2, [r7, #4]
 80014e2:	4613      	mov	r3, r2
 80014e4:	009b      	lsls	r3, r3, #2
 80014e6:	4413      	add	r3, r2
 80014e8:	009b      	lsls	r3, r3, #2
 80014ea:	440b      	add	r3, r1
 80014ec:	3308      	adds	r3, #8
 80014ee:	2200      	movs	r2, #0
 80014f0:	601a      	str	r2, [r3, #0]
        SCH_tasks_Array[i].RunMe = 0;
 80014f2:	4910      	ldr	r1, [pc, #64]	; (8001534 <SCH_Init+0x88>)
 80014f4:	687a      	ldr	r2, [r7, #4]
 80014f6:	4613      	mov	r3, r2
 80014f8:	009b      	lsls	r3, r3, #2
 80014fa:	4413      	add	r3, r2
 80014fc:	009b      	lsls	r3, r3, #2
 80014fe:	440b      	add	r3, r1
 8001500:	330c      	adds	r3, #12
 8001502:	2200      	movs	r2, #0
 8001504:	701a      	strb	r2, [r3, #0]

        SCH_tasks_Array[i].TaskID = -1;
 8001506:	490b      	ldr	r1, [pc, #44]	; (8001534 <SCH_Init+0x88>)
 8001508:	687a      	ldr	r2, [r7, #4]
 800150a:	4613      	mov	r3, r2
 800150c:	009b      	lsls	r3, r3, #2
 800150e:	4413      	add	r3, r2
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	440b      	add	r3, r1
 8001514:	3310      	adds	r3, #16
 8001516:	f04f 32ff 	mov.w	r2, #4294967295
 800151a:	601a      	str	r2, [r3, #0]
    for (int i=0; i<SCH_MAX_TASKS; i++){
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	3301      	adds	r3, #1
 8001520:	607b      	str	r3, [r7, #4]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2b09      	cmp	r3, #9
 8001526:	ddc7      	ble.n	80014b8 <SCH_Init+0xc>
    }
}
 8001528:	bf00      	nop
 800152a:	bf00      	nop
 800152c:	370c      	adds	r7, #12
 800152e:	46bd      	mov	sp, r7
 8001530:	bc80      	pop	{r7}
 8001532:	4770      	bx	lr
 8001534:	200000ac 	.word	0x200000ac

08001538 <SCH_Update>:

void SCH_Update(void){
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
	if (SCH_tasks_Array[0].pTask && SCH_tasks_Array[0].RunMe == 0) {
 800153c:	4b0d      	ldr	r3, [pc, #52]	; (8001574 <SCH_Update+0x3c>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d013      	beq.n	800156c <SCH_Update+0x34>
 8001544:	4b0b      	ldr	r3, [pc, #44]	; (8001574 <SCH_Update+0x3c>)
 8001546:	7b1b      	ldrb	r3, [r3, #12]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d10f      	bne.n	800156c <SCH_Update+0x34>
		if(SCH_tasks_Array[0].Delay > 0){
 800154c:	4b09      	ldr	r3, [pc, #36]	; (8001574 <SCH_Update+0x3c>)
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d004      	beq.n	800155e <SCH_Update+0x26>
			SCH_tasks_Array[0].Delay = SCH_tasks_Array[0].Delay - 1;
 8001554:	4b07      	ldr	r3, [pc, #28]	; (8001574 <SCH_Update+0x3c>)
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	3b01      	subs	r3, #1
 800155a:	4a06      	ldr	r2, [pc, #24]	; (8001574 <SCH_Update+0x3c>)
 800155c:	6053      	str	r3, [r2, #4]
		}
		if (SCH_tasks_Array[0].Delay == 0) {
 800155e:	4b05      	ldr	r3, [pc, #20]	; (8001574 <SCH_Update+0x3c>)
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d102      	bne.n	800156c <SCH_Update+0x34>
			SCH_tasks_Array[0].RunMe = 1;
 8001566:	4b03      	ldr	r3, [pc, #12]	; (8001574 <SCH_Update+0x3c>)
 8001568:	2201      	movs	r2, #1
 800156a:	731a      	strb	r2, [r3, #12]
		}
	}
}
 800156c:	bf00      	nop
 800156e:	46bd      	mov	sp, r7
 8001570:	bc80      	pop	{r7}
 8001572:	4770      	bx	lr
 8001574:	200000ac 	.word	0x200000ac

08001578 <SCH_Add_Task>:

void SCH_Add_Task(void (*pFunction)(), uint32_t DELAY, uint32_t PERIOD) {
 8001578:	b5f0      	push	{r4, r5, r6, r7, lr}
 800157a:	b093      	sub	sp, #76	; 0x4c
 800157c:	af00      	add	r7, sp, #0
 800157e:	60f8      	str	r0, [r7, #12]
 8001580:	60b9      	str	r1, [r7, #8]
 8001582:	607a      	str	r2, [r7, #4]
    uint8_t newTaskIndex = 0;
 8001584:	2300      	movs	r3, #0
 8001586:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    uint32_t sumDelay = 0;
 800158a:	2300      	movs	r3, #0
 800158c:	643b      	str	r3, [r7, #64]	; 0x40
    uint32_t newDelay = 0;
 800158e:	2300      	movs	r3, #0
 8001590:	63bb      	str	r3, [r7, #56]	; 0x38

    // Iterate through the task array to find the appropriate position for the new task
    for (newTaskIndex = 0; newTaskIndex < SCH_MAX_TASKS; newTaskIndex++) {
 8001592:	2300      	movs	r3, #0
 8001594:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8001598:	e0d5      	b.n	8001746 <SCH_Add_Task+0x1ce>
        // Calculate the cumulative delay of existing tasks
        sumDelay += SCH_tasks_Array[newTaskIndex].Delay;
 800159a:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 800159e:	496e      	ldr	r1, [pc, #440]	; (8001758 <SCH_Add_Task+0x1e0>)
 80015a0:	4613      	mov	r3, r2
 80015a2:	009b      	lsls	r3, r3, #2
 80015a4:	4413      	add	r3, r2
 80015a6:	009b      	lsls	r3, r3, #2
 80015a8:	440b      	add	r3, r1
 80015aa:	3304      	adds	r3, #4
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80015b0:	4413      	add	r3, r2
 80015b2:	643b      	str	r3, [r7, #64]	; 0x40

        // Check if the cumulative delay is greater than the specified initial delay (DELAY)
        if (sumDelay > DELAY) {
 80015b4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80015b6:	68bb      	ldr	r3, [r7, #8]
 80015b8:	429a      	cmp	r2, r3
 80015ba:	d979      	bls.n	80016b0 <SCH_Add_Task+0x138>
            // Calculate the new delay for the current task
            newDelay = DELAY - (sumDelay - SCH_tasks_Array[newTaskIndex].Delay);
 80015bc:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 80015c0:	4965      	ldr	r1, [pc, #404]	; (8001758 <SCH_Add_Task+0x1e0>)
 80015c2:	4613      	mov	r3, r2
 80015c4:	009b      	lsls	r3, r3, #2
 80015c6:	4413      	add	r3, r2
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	440b      	add	r3, r1
 80015cc:	3304      	adds	r3, #4
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80015d2:	1ad3      	subs	r3, r2, r3
 80015d4:	68ba      	ldr	r2, [r7, #8]
 80015d6:	4413      	add	r3, r2
 80015d8:	63bb      	str	r3, [r7, #56]	; 0x38

            // Adjust the delay of the current task and shift existing tasks to make room
            SCH_tasks_Array[newTaskIndex].Delay = sumDelay - DELAY;
 80015da:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 80015de:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	1ac9      	subs	r1, r1, r3
 80015e4:	485c      	ldr	r0, [pc, #368]	; (8001758 <SCH_Add_Task+0x1e0>)
 80015e6:	4613      	mov	r3, r2
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	4413      	add	r3, r2
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	4403      	add	r3, r0
 80015f0:	3304      	adds	r3, #4
 80015f2:	6019      	str	r1, [r3, #0]
            for (uint8_t i = SCH_MAX_TASKS - 1; i > newTaskIndex; i--) {
 80015f4:	2309      	movs	r3, #9
 80015f6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80015fa:	e01b      	b.n	8001634 <SCH_Add_Task+0xbc>
                SCH_tasks_Array[i] = SCH_tasks_Array[i - 1];
 80015fc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001600:	1e5a      	subs	r2, r3, #1
 8001602:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8001606:	4854      	ldr	r0, [pc, #336]	; (8001758 <SCH_Add_Task+0x1e0>)
 8001608:	460b      	mov	r3, r1
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	440b      	add	r3, r1
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	4418      	add	r0, r3
 8001612:	4951      	ldr	r1, [pc, #324]	; (8001758 <SCH_Add_Task+0x1e0>)
 8001614:	4613      	mov	r3, r2
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	4413      	add	r3, r2
 800161a:	009b      	lsls	r3, r3, #2
 800161c:	440b      	add	r3, r1
 800161e:	4604      	mov	r4, r0
 8001620:	461d      	mov	r5, r3
 8001622:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001624:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001626:	682b      	ldr	r3, [r5, #0]
 8001628:	6023      	str	r3, [r4, #0]
            for (uint8_t i = SCH_MAX_TASKS - 1; i > newTaskIndex; i--) {
 800162a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800162e:	3b01      	subs	r3, #1
 8001630:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001634:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8001638:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800163c:	429a      	cmp	r2, r3
 800163e:	d8dd      	bhi.n	80015fc <SCH_Add_Task+0x84>
            }

            // Add the new task at the appropriate position in the array
            SCH_tasks_Array[newTaskIndex] = (sTask){
 8001640:	f897 4047 	ldrb.w	r4, [r7, #71]	; 0x47
                .pTask = pFunction,
                .Delay = newDelay,
                .Period = PERIOD,
                .RunMe = (newDelay == 0),  // Set RunMe flag based on newDelay
 8001644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001646:	2b00      	cmp	r3, #0
 8001648:	bf0c      	ite	eq
 800164a:	2301      	moveq	r3, #1
 800164c:	2300      	movne	r3, #0
 800164e:	b2db      	uxtb	r3, r3
 8001650:	461d      	mov	r5, r3
                .TaskID = Get_New_Task_ID(),  // Assign a unique TaskID
 8001652:	f000 f923 	bl	800189c <Get_New_Task_ID>
 8001656:	4601      	mov	r1, r0
            SCH_tasks_Array[newTaskIndex] = (sTask){
 8001658:	4a3f      	ldr	r2, [pc, #252]	; (8001758 <SCH_Add_Task+0x1e0>)
 800165a:	4623      	mov	r3, r4
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	4423      	add	r3, r4
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	4413      	add	r3, r2
 8001664:	68fa      	ldr	r2, [r7, #12]
 8001666:	601a      	str	r2, [r3, #0]
 8001668:	4a3b      	ldr	r2, [pc, #236]	; (8001758 <SCH_Add_Task+0x1e0>)
 800166a:	4623      	mov	r3, r4
 800166c:	009b      	lsls	r3, r3, #2
 800166e:	4423      	add	r3, r4
 8001670:	009b      	lsls	r3, r3, #2
 8001672:	4413      	add	r3, r2
 8001674:	3304      	adds	r3, #4
 8001676:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001678:	601a      	str	r2, [r3, #0]
 800167a:	4a37      	ldr	r2, [pc, #220]	; (8001758 <SCH_Add_Task+0x1e0>)
 800167c:	4623      	mov	r3, r4
 800167e:	009b      	lsls	r3, r3, #2
 8001680:	4423      	add	r3, r4
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	4413      	add	r3, r2
 8001686:	3308      	adds	r3, #8
 8001688:	687a      	ldr	r2, [r7, #4]
 800168a:	601a      	str	r2, [r3, #0]
 800168c:	4a32      	ldr	r2, [pc, #200]	; (8001758 <SCH_Add_Task+0x1e0>)
 800168e:	4623      	mov	r3, r4
 8001690:	009b      	lsls	r3, r3, #2
 8001692:	4423      	add	r3, r4
 8001694:	009b      	lsls	r3, r3, #2
 8001696:	4413      	add	r3, r2
 8001698:	330c      	adds	r3, #12
 800169a:	462a      	mov	r2, r5
 800169c:	701a      	strb	r2, [r3, #0]
 800169e:	4a2e      	ldr	r2, [pc, #184]	; (8001758 <SCH_Add_Task+0x1e0>)
 80016a0:	4623      	mov	r3, r4
 80016a2:	009b      	lsls	r3, r3, #2
 80016a4:	4423      	add	r3, r4
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	4413      	add	r3, r2
 80016aa:	3310      	adds	r3, #16
 80016ac:	6019      	str	r1, [r3, #0]
 80016ae:	e04f      	b.n	8001750 <SCH_Add_Task+0x1d8>
            };

            return;
        } else {
            // If the current task slot is empty, add the new task to this slot
            if (SCH_tasks_Array[newTaskIndex].pTask == 0) {
 80016b0:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 80016b4:	4928      	ldr	r1, [pc, #160]	; (8001758 <SCH_Add_Task+0x1e0>)
 80016b6:	4613      	mov	r3, r2
 80016b8:	009b      	lsls	r3, r3, #2
 80016ba:	4413      	add	r3, r2
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	440b      	add	r3, r1
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d13a      	bne.n	800173c <SCH_Add_Task+0x1c4>
                SCH_tasks_Array[newTaskIndex] = (sTask){
 80016c6:	f897 4047 	ldrb.w	r4, [r7, #71]	; 0x47
                    .pTask = pFunction,
                    .Delay = DELAY - sumDelay,
 80016ca:	68ba      	ldr	r2, [r7, #8]
 80016cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80016ce:	1ad5      	subs	r5, r2, r3
                    .Period = PERIOD,
                    .RunMe = (DELAY - sumDelay == 0),  // Set RunMe flag based on remaining delay
 80016d0:	68ba      	ldr	r2, [r7, #8]
 80016d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80016d4:	429a      	cmp	r2, r3
 80016d6:	bf0c      	ite	eq
 80016d8:	2301      	moveq	r3, #1
 80016da:	2300      	movne	r3, #0
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	461e      	mov	r6, r3
                    .TaskID = Get_New_Task_ID(),  // Assign a unique TaskID
 80016e0:	f000 f8dc 	bl	800189c <Get_New_Task_ID>
 80016e4:	4601      	mov	r1, r0
                SCH_tasks_Array[newTaskIndex] = (sTask){
 80016e6:	4a1c      	ldr	r2, [pc, #112]	; (8001758 <SCH_Add_Task+0x1e0>)
 80016e8:	4623      	mov	r3, r4
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	4423      	add	r3, r4
 80016ee:	009b      	lsls	r3, r3, #2
 80016f0:	4413      	add	r3, r2
 80016f2:	68fa      	ldr	r2, [r7, #12]
 80016f4:	601a      	str	r2, [r3, #0]
 80016f6:	4a18      	ldr	r2, [pc, #96]	; (8001758 <SCH_Add_Task+0x1e0>)
 80016f8:	4623      	mov	r3, r4
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	4423      	add	r3, r4
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	4413      	add	r3, r2
 8001702:	3304      	adds	r3, #4
 8001704:	601d      	str	r5, [r3, #0]
 8001706:	4a14      	ldr	r2, [pc, #80]	; (8001758 <SCH_Add_Task+0x1e0>)
 8001708:	4623      	mov	r3, r4
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	4423      	add	r3, r4
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	4413      	add	r3, r2
 8001712:	3308      	adds	r3, #8
 8001714:	687a      	ldr	r2, [r7, #4]
 8001716:	601a      	str	r2, [r3, #0]
 8001718:	4a0f      	ldr	r2, [pc, #60]	; (8001758 <SCH_Add_Task+0x1e0>)
 800171a:	4623      	mov	r3, r4
 800171c:	009b      	lsls	r3, r3, #2
 800171e:	4423      	add	r3, r4
 8001720:	009b      	lsls	r3, r3, #2
 8001722:	4413      	add	r3, r2
 8001724:	330c      	adds	r3, #12
 8001726:	4632      	mov	r2, r6
 8001728:	701a      	strb	r2, [r3, #0]
 800172a:	4a0b      	ldr	r2, [pc, #44]	; (8001758 <SCH_Add_Task+0x1e0>)
 800172c:	4623      	mov	r3, r4
 800172e:	009b      	lsls	r3, r3, #2
 8001730:	4423      	add	r3, r4
 8001732:	009b      	lsls	r3, r3, #2
 8001734:	4413      	add	r3, r2
 8001736:	3310      	adds	r3, #16
 8001738:	6019      	str	r1, [r3, #0]
 800173a:	e009      	b.n	8001750 <SCH_Add_Task+0x1d8>
    for (newTaskIndex = 0; newTaskIndex < SCH_MAX_TASKS; newTaskIndex++) {
 800173c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001740:	3301      	adds	r3, #1
 8001742:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8001746:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800174a:	2b09      	cmp	r3, #9
 800174c:	f67f af25 	bls.w	800159a <SCH_Add_Task+0x22>

                return;
            }
        }
    }
}
 8001750:	374c      	adds	r7, #76	; 0x4c
 8001752:	46bd      	mov	sp, r7
 8001754:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001756:	bf00      	nop
 8001758:	200000ac 	.word	0x200000ac

0800175c <SCH_Delete_Task>:



void SCH_Delete_Task(uint32_t taskID) {
 800175c:	b4b0      	push	{r4, r5, r7}
 800175e:	b089      	sub	sp, #36	; 0x24
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
    // Check if the provided task ID is NO_TASK_ID (invalid).
    if (taskID == NO_TASK_ID) return;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d068      	beq.n	800183c <SCH_Delete_Task+0xe0>

    // Iterate through the task array to find the task with the specified TaskID
    for (uint8_t taskIndex = 0; taskIndex < SCH_MAX_TASKS; taskIndex++) {
 800176a:	2300      	movs	r3, #0
 800176c:	77fb      	strb	r3, [r7, #31]
 800176e:	e061      	b.n	8001834 <SCH_Delete_Task+0xd8>
        if (SCH_tasks_Array[taskIndex].TaskID == taskID) {
 8001770:	7ffa      	ldrb	r2, [r7, #31]
 8001772:	4935      	ldr	r1, [pc, #212]	; (8001848 <SCH_Delete_Task+0xec>)
 8001774:	4613      	mov	r3, r2
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	4413      	add	r3, r2
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	440b      	add	r3, r1
 800177e:	3310      	adds	r3, #16
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	687a      	ldr	r2, [r7, #4]
 8001784:	429a      	cmp	r2, r3
 8001786:	d152      	bne.n	800182e <SCH_Delete_Task+0xd2>
            // Task found, proceed with deletion

            // If the current task is not the last one and the next task is not empty,
            // adjust the delay of the next task to include the delay of the deleted task.
            if (taskIndex < SCH_MAX_TASKS - 1 && SCH_tasks_Array[taskIndex + 1].pTask != 0) {
 8001788:	7ffb      	ldrb	r3, [r7, #31]
 800178a:	2b08      	cmp	r3, #8
 800178c:	d828      	bhi.n	80017e0 <SCH_Delete_Task+0x84>
 800178e:	7ffb      	ldrb	r3, [r7, #31]
 8001790:	1c5a      	adds	r2, r3, #1
 8001792:	492d      	ldr	r1, [pc, #180]	; (8001848 <SCH_Delete_Task+0xec>)
 8001794:	4613      	mov	r3, r2
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	4413      	add	r3, r2
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	440b      	add	r3, r1
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d01d      	beq.n	80017e0 <SCH_Delete_Task+0x84>
                SCH_tasks_Array[taskIndex + 1].Delay += SCH_tasks_Array[taskIndex].Delay;
 80017a4:	7ffb      	ldrb	r3, [r7, #31]
 80017a6:	1c5a      	adds	r2, r3, #1
 80017a8:	4927      	ldr	r1, [pc, #156]	; (8001848 <SCH_Delete_Task+0xec>)
 80017aa:	4613      	mov	r3, r2
 80017ac:	009b      	lsls	r3, r3, #2
 80017ae:	4413      	add	r3, r2
 80017b0:	009b      	lsls	r3, r3, #2
 80017b2:	440b      	add	r3, r1
 80017b4:	3304      	adds	r3, #4
 80017b6:	6819      	ldr	r1, [r3, #0]
 80017b8:	7ffa      	ldrb	r2, [r7, #31]
 80017ba:	4823      	ldr	r0, [pc, #140]	; (8001848 <SCH_Delete_Task+0xec>)
 80017bc:	4613      	mov	r3, r2
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	4413      	add	r3, r2
 80017c2:	009b      	lsls	r3, r3, #2
 80017c4:	4403      	add	r3, r0
 80017c6:	3304      	adds	r3, #4
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	7ffa      	ldrb	r2, [r7, #31]
 80017cc:	3201      	adds	r2, #1
 80017ce:	4419      	add	r1, r3
 80017d0:	481d      	ldr	r0, [pc, #116]	; (8001848 <SCH_Delete_Task+0xec>)
 80017d2:	4613      	mov	r3, r2
 80017d4:	009b      	lsls	r3, r3, #2
 80017d6:	4413      	add	r3, r2
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	4403      	add	r3, r0
 80017dc:	3304      	adds	r3, #4
 80017de:	6019      	str	r1, [r3, #0]
            }

            // Shift the remaining tasks to fill the gap created by the deleted task
            for (uint8_t j = taskIndex; j < SCH_MAX_TASKS - 1; j++) {
 80017e0:	7ffb      	ldrb	r3, [r7, #31]
 80017e2:	77bb      	strb	r3, [r7, #30]
 80017e4:	e017      	b.n	8001816 <SCH_Delete_Task+0xba>
                SCH_tasks_Array[j] = SCH_tasks_Array[j + 1];
 80017e6:	7fbb      	ldrb	r3, [r7, #30]
 80017e8:	1c5a      	adds	r2, r3, #1
 80017ea:	7fb9      	ldrb	r1, [r7, #30]
 80017ec:	4816      	ldr	r0, [pc, #88]	; (8001848 <SCH_Delete_Task+0xec>)
 80017ee:	460b      	mov	r3, r1
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	440b      	add	r3, r1
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	4418      	add	r0, r3
 80017f8:	4913      	ldr	r1, [pc, #76]	; (8001848 <SCH_Delete_Task+0xec>)
 80017fa:	4613      	mov	r3, r2
 80017fc:	009b      	lsls	r3, r3, #2
 80017fe:	4413      	add	r3, r2
 8001800:	009b      	lsls	r3, r3, #2
 8001802:	440b      	add	r3, r1
 8001804:	4604      	mov	r4, r0
 8001806:	461d      	mov	r5, r3
 8001808:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800180a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800180c:	682b      	ldr	r3, [r5, #0]
 800180e:	6023      	str	r3, [r4, #0]
            for (uint8_t j = taskIndex; j < SCH_MAX_TASKS - 1; j++) {
 8001810:	7fbb      	ldrb	r3, [r7, #30]
 8001812:	3301      	adds	r3, #1
 8001814:	77bb      	strb	r3, [r7, #30]
 8001816:	7fbb      	ldrb	r3, [r7, #30]
 8001818:	2b08      	cmp	r3, #8
 800181a:	d9e4      	bls.n	80017e6 <SCH_Delete_Task+0x8a>
            }

            // Clear the last task slot to ensure no leftover data
            SCH_tasks_Array[SCH_MAX_TASKS - 1] = (sTask){0};
 800181c:	4b0a      	ldr	r3, [pc, #40]	; (8001848 <SCH_Delete_Task+0xec>)
 800181e:	33b4      	adds	r3, #180	; 0xb4
 8001820:	2200      	movs	r2, #0
 8001822:	601a      	str	r2, [r3, #0]
 8001824:	605a      	str	r2, [r3, #4]
 8001826:	609a      	str	r2, [r3, #8]
 8001828:	60da      	str	r2, [r3, #12]
 800182a:	611a      	str	r2, [r3, #16]
 800182c:	e007      	b.n	800183e <SCH_Delete_Task+0xe2>
    for (uint8_t taskIndex = 0; taskIndex < SCH_MAX_TASKS; taskIndex++) {
 800182e:	7ffb      	ldrb	r3, [r7, #31]
 8001830:	3301      	adds	r3, #1
 8001832:	77fb      	strb	r3, [r7, #31]
 8001834:	7ffb      	ldrb	r3, [r7, #31]
 8001836:	2b09      	cmp	r3, #9
 8001838:	d99a      	bls.n	8001770 <SCH_Delete_Task+0x14>

            return;
        }
    }

    return; // Task ID not found, exit the function
 800183a:	e000      	b.n	800183e <SCH_Delete_Task+0xe2>
    if (taskID == NO_TASK_ID) return;
 800183c:	bf00      	nop
}
 800183e:	3724      	adds	r7, #36	; 0x24
 8001840:	46bd      	mov	sp, r7
 8001842:	bcb0      	pop	{r4, r5, r7}
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	200000ac 	.word	0x200000ac

0800184c <SCH_Dispatch_Tasks>:


void SCH_Dispatch_Tasks(void){
 800184c:	b5b0      	push	{r4, r5, r7, lr}
 800184e:	b086      	sub	sp, #24
 8001850:	af00      	add	r7, sp, #0
	if(SCH_tasks_Array[0].RunMe > 0) {
 8001852:	4b11      	ldr	r3, [pc, #68]	; (8001898 <SCH_Dispatch_Tasks+0x4c>)
 8001854:	7b1b      	ldrb	r3, [r3, #12]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d019      	beq.n	800188e <SCH_Dispatch_Tasks+0x42>
		(*SCH_tasks_Array[0].pTask)(); // Function pointer -> Run task
 800185a:	4b0f      	ldr	r3, [pc, #60]	; (8001898 <SCH_Dispatch_Tasks+0x4c>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4798      	blx	r3
		SCH_tasks_Array[0].RunMe = 0; // Set back RunMe flag
 8001860:	4b0d      	ldr	r3, [pc, #52]	; (8001898 <SCH_Dispatch_Tasks+0x4c>)
 8001862:	2200      	movs	r2, #0
 8001864:	731a      	strb	r2, [r3, #12]
		sTask temtask = SCH_tasks_Array[0];
 8001866:	4b0c      	ldr	r3, [pc, #48]	; (8001898 <SCH_Dispatch_Tasks+0x4c>)
 8001868:	1d3c      	adds	r4, r7, #4
 800186a:	461d      	mov	r5, r3
 800186c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800186e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001870:	682b      	ldr	r3, [r5, #0]
 8001872:	6023      	str	r3, [r4, #0]
		SCH_Delete_Task(temtask.TaskID);
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	4618      	mov	r0, r3
 8001878:	f7ff ff70 	bl	800175c <SCH_Delete_Task>
		if (temtask.Period != 0) {
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d005      	beq.n	800188e <SCH_Dispatch_Tasks+0x42>
			SCH_Add_Task(temtask.pTask, temtask.Period, temtask.Period);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	68f9      	ldr	r1, [r7, #12]
 8001886:	68fa      	ldr	r2, [r7, #12]
 8001888:	4618      	mov	r0, r3
 800188a:	f7ff fe75 	bl	8001578 <SCH_Add_Task>
		}
	}
}
 800188e:	bf00      	nop
 8001890:	3718      	adds	r7, #24
 8001892:	46bd      	mov	sp, r7
 8001894:	bdb0      	pop	{r4, r5, r7, pc}
 8001896:	bf00      	nop
 8001898:	200000ac 	.word	0x200000ac

0800189c <Get_New_Task_ID>:

static uint32_t Get_New_Task_ID(void) {
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
    return ++newTaskID;
 80018a0:	4b05      	ldr	r3, [pc, #20]	; (80018b8 <Get_New_Task_ID+0x1c>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	3301      	adds	r3, #1
 80018a6:	4a04      	ldr	r2, [pc, #16]	; (80018b8 <Get_New_Task_ID+0x1c>)
 80018a8:	6013      	str	r3, [r2, #0]
 80018aa:	4b03      	ldr	r3, [pc, #12]	; (80018b8 <Get_New_Task_ID+0x1c>)
 80018ac:	681b      	ldr	r3, [r3, #0]
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bc80      	pop	{r7}
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	20000174 	.word	0x20000174

080018bc <setTimer7SEG>:
int counterSecond = 0;

int timerFlag[NO_OF_COUNTERS] = {0, 0, 0};
int counter[NO_OF_COUNTERS] = {0, 0, 0};

void setTimer7SEG(int duration){
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
	counter7SEG = duration/PERIOD;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	4a08      	ldr	r2, [pc, #32]	; (80018e8 <setTimer7SEG+0x2c>)
 80018c8:	fb82 1203 	smull	r1, r2, r2, r3
 80018cc:	1092      	asrs	r2, r2, #2
 80018ce:	17db      	asrs	r3, r3, #31
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	4a06      	ldr	r2, [pc, #24]	; (80018ec <setTimer7SEG+0x30>)
 80018d4:	6013      	str	r3, [r2, #0]
	timer7SEG = 0;
 80018d6:	4b06      	ldr	r3, [pc, #24]	; (80018f0 <setTimer7SEG+0x34>)
 80018d8:	2200      	movs	r2, #0
 80018da:	601a      	str	r2, [r3, #0]
}
 80018dc:	bf00      	nop
 80018de:	370c      	adds	r7, #12
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bc80      	pop	{r7}
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	66666667 	.word	0x66666667
 80018ec:	2000017c 	.word	0x2000017c
 80018f0:	20000178 	.word	0x20000178

080018f4 <setTimerSecond>:

void setTimerSecond(int duration){
 80018f4:	b480      	push	{r7}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
	counterSecond = duration/PERIOD;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	4a08      	ldr	r2, [pc, #32]	; (8001920 <setTimerSecond+0x2c>)
 8001900:	fb82 1203 	smull	r1, r2, r2, r3
 8001904:	1092      	asrs	r2, r2, #2
 8001906:	17db      	asrs	r3, r3, #31
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	4a06      	ldr	r2, [pc, #24]	; (8001924 <setTimerSecond+0x30>)
 800190c:	6013      	str	r3, [r2, #0]
	timerSecond = 0;
 800190e:	4b06      	ldr	r3, [pc, #24]	; (8001928 <setTimerSecond+0x34>)
 8001910:	2200      	movs	r2, #0
 8001912:	601a      	str	r2, [r3, #0]
}
 8001914:	bf00      	nop
 8001916:	370c      	adds	r7, #12
 8001918:	46bd      	mov	sp, r7
 800191a:	bc80      	pop	{r7}
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop
 8001920:	66666667 	.word	0x66666667
 8001924:	20000184 	.word	0x20000184
 8001928:	20000180 	.word	0x20000180

0800192c <setTimer>:

void setTimer(int index, int duration){
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	6039      	str	r1, [r7, #0]
	counter[index] = duration/PERIOD;
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	4a09      	ldr	r2, [pc, #36]	; (8001960 <setTimer+0x34>)
 800193a:	fb82 1203 	smull	r1, r2, r2, r3
 800193e:	1092      	asrs	r2, r2, #2
 8001940:	17db      	asrs	r3, r3, #31
 8001942:	1ad2      	subs	r2, r2, r3
 8001944:	4907      	ldr	r1, [pc, #28]	; (8001964 <setTimer+0x38>)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timerFlag[index] = 0;
 800194c:	4a06      	ldr	r2, [pc, #24]	; (8001968 <setTimer+0x3c>)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2100      	movs	r1, #0
 8001952:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8001956:	bf00      	nop
 8001958:	370c      	adds	r7, #12
 800195a:	46bd      	mov	sp, r7
 800195c:	bc80      	pop	{r7}
 800195e:	4770      	bx	lr
 8001960:	66666667 	.word	0x66666667
 8001964:	20000194 	.word	0x20000194
 8001968:	20000188 	.word	0x20000188

0800196c <timerRun>:

void timerRun(){
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
	for (int i = 0; i < NO_OF_COUNTERS; i++){
 8001972:	2300      	movs	r3, #0
 8001974:	607b      	str	r3, [r7, #4]
 8001976:	e01c      	b.n	80019b2 <timerRun+0x46>
		if (counter[i] > 0){
 8001978:	4a12      	ldr	r2, [pc, #72]	; (80019c4 <timerRun+0x58>)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001980:	2b00      	cmp	r3, #0
 8001982:	dd13      	ble.n	80019ac <timerRun+0x40>
			counter[i]--;
 8001984:	4a0f      	ldr	r2, [pc, #60]	; (80019c4 <timerRun+0x58>)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800198c:	1e5a      	subs	r2, r3, #1
 800198e:	490d      	ldr	r1, [pc, #52]	; (80019c4 <timerRun+0x58>)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (counter[i] <= 0){
 8001996:	4a0b      	ldr	r2, [pc, #44]	; (80019c4 <timerRun+0x58>)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	dc04      	bgt.n	80019ac <timerRun+0x40>
				timerFlag[i] = 1;
 80019a2:	4a09      	ldr	r2, [pc, #36]	; (80019c8 <timerRun+0x5c>)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2101      	movs	r1, #1
 80019a8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < NO_OF_COUNTERS; i++){
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	3301      	adds	r3, #1
 80019b0:	607b      	str	r3, [r7, #4]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2b02      	cmp	r3, #2
 80019b6:	dddf      	ble.n	8001978 <timerRun+0xc>
			}
		}
	}
}
 80019b8:	bf00      	nop
 80019ba:	bf00      	nop
 80019bc:	370c      	adds	r7, #12
 80019be:	46bd      	mov	sp, r7
 80019c0:	bc80      	pop	{r7}
 80019c2:	4770      	bx	lr
 80019c4:	20000194 	.word	0x20000194
 80019c8:	20000188 	.word	0x20000188

080019cc <timerRunSecond>:

void timerRunSecond(){
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
	if (counterSecond > 0){
 80019d0:	4b09      	ldr	r3, [pc, #36]	; (80019f8 <timerRunSecond+0x2c>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	dd0b      	ble.n	80019f0 <timerRunSecond+0x24>
		counterSecond--;
 80019d8:	4b07      	ldr	r3, [pc, #28]	; (80019f8 <timerRunSecond+0x2c>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	3b01      	subs	r3, #1
 80019de:	4a06      	ldr	r2, [pc, #24]	; (80019f8 <timerRunSecond+0x2c>)
 80019e0:	6013      	str	r3, [r2, #0]
		if (counterSecond <= 0){
 80019e2:	4b05      	ldr	r3, [pc, #20]	; (80019f8 <timerRunSecond+0x2c>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	dc02      	bgt.n	80019f0 <timerRunSecond+0x24>
			timerSecond = 1;
 80019ea:	4b04      	ldr	r3, [pc, #16]	; (80019fc <timerRunSecond+0x30>)
 80019ec:	2201      	movs	r2, #1
 80019ee:	601a      	str	r2, [r3, #0]
		}
	}
}
 80019f0:	bf00      	nop
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bc80      	pop	{r7}
 80019f6:	4770      	bx	lr
 80019f8:	20000184 	.word	0x20000184
 80019fc:	20000180 	.word	0x20000180

08001a00 <timerRun7SEG>:

void timerRun7SEG(){
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
	if (counter7SEG > 0){
 8001a04:	4b09      	ldr	r3, [pc, #36]	; (8001a2c <timerRun7SEG+0x2c>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	dd0b      	ble.n	8001a24 <timerRun7SEG+0x24>
		counter7SEG--;
 8001a0c:	4b07      	ldr	r3, [pc, #28]	; (8001a2c <timerRun7SEG+0x2c>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	3b01      	subs	r3, #1
 8001a12:	4a06      	ldr	r2, [pc, #24]	; (8001a2c <timerRun7SEG+0x2c>)
 8001a14:	6013      	str	r3, [r2, #0]
		if (counter7SEG <= 0){
 8001a16:	4b05      	ldr	r3, [pc, #20]	; (8001a2c <timerRun7SEG+0x2c>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	dc02      	bgt.n	8001a24 <timerRun7SEG+0x24>
			timer7SEG = 1;
 8001a1e:	4b04      	ldr	r3, [pc, #16]	; (8001a30 <timerRun7SEG+0x30>)
 8001a20:	2201      	movs	r2, #1
 8001a22:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001a24:	bf00      	nop
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bc80      	pop	{r7}
 8001a2a:	4770      	bx	lr
 8001a2c:	2000017c 	.word	0x2000017c
 8001a30:	20000178 	.word	0x20000178

08001a34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b085      	sub	sp, #20
 8001a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001a3a:	4b15      	ldr	r3, [pc, #84]	; (8001a90 <HAL_MspInit+0x5c>)
 8001a3c:	699b      	ldr	r3, [r3, #24]
 8001a3e:	4a14      	ldr	r2, [pc, #80]	; (8001a90 <HAL_MspInit+0x5c>)
 8001a40:	f043 0301 	orr.w	r3, r3, #1
 8001a44:	6193      	str	r3, [r2, #24]
 8001a46:	4b12      	ldr	r3, [pc, #72]	; (8001a90 <HAL_MspInit+0x5c>)
 8001a48:	699b      	ldr	r3, [r3, #24]
 8001a4a:	f003 0301 	and.w	r3, r3, #1
 8001a4e:	60bb      	str	r3, [r7, #8]
 8001a50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a52:	4b0f      	ldr	r3, [pc, #60]	; (8001a90 <HAL_MspInit+0x5c>)
 8001a54:	69db      	ldr	r3, [r3, #28]
 8001a56:	4a0e      	ldr	r2, [pc, #56]	; (8001a90 <HAL_MspInit+0x5c>)
 8001a58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a5c:	61d3      	str	r3, [r2, #28]
 8001a5e:	4b0c      	ldr	r3, [pc, #48]	; (8001a90 <HAL_MspInit+0x5c>)
 8001a60:	69db      	ldr	r3, [r3, #28]
 8001a62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a66:	607b      	str	r3, [r7, #4]
 8001a68:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001a6a:	4b0a      	ldr	r3, [pc, #40]	; (8001a94 <HAL_MspInit+0x60>)
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	60fb      	str	r3, [r7, #12]
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001a76:	60fb      	str	r3, [r7, #12]
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001a7e:	60fb      	str	r3, [r7, #12]
 8001a80:	4a04      	ldr	r2, [pc, #16]	; (8001a94 <HAL_MspInit+0x60>)
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a86:	bf00      	nop
 8001a88:	3714      	adds	r7, #20
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bc80      	pop	{r7}
 8001a8e:	4770      	bx	lr
 8001a90:	40021000 	.word	0x40021000
 8001a94:	40010000 	.word	0x40010000

08001a98 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b084      	sub	sp, #16
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001aa8:	d113      	bne.n	8001ad2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001aaa:	4b0c      	ldr	r3, [pc, #48]	; (8001adc <HAL_TIM_Base_MspInit+0x44>)
 8001aac:	69db      	ldr	r3, [r3, #28]
 8001aae:	4a0b      	ldr	r2, [pc, #44]	; (8001adc <HAL_TIM_Base_MspInit+0x44>)
 8001ab0:	f043 0301 	orr.w	r3, r3, #1
 8001ab4:	61d3      	str	r3, [r2, #28]
 8001ab6:	4b09      	ldr	r3, [pc, #36]	; (8001adc <HAL_TIM_Base_MspInit+0x44>)
 8001ab8:	69db      	ldr	r3, [r3, #28]
 8001aba:	f003 0301 	and.w	r3, r3, #1
 8001abe:	60fb      	str	r3, [r7, #12]
 8001ac0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	2100      	movs	r1, #0
 8001ac6:	201c      	movs	r0, #28
 8001ac8:	f000 f9a1 	bl	8001e0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001acc:	201c      	movs	r0, #28
 8001ace:	f000 f9ba 	bl	8001e46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001ad2:	bf00      	nop
 8001ad4:	3710      	adds	r7, #16
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	40021000 	.word	0x40021000

08001ae0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ae4:	e7fe      	b.n	8001ae4 <NMI_Handler+0x4>

08001ae6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ae6:	b480      	push	{r7}
 8001ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001aea:	e7fe      	b.n	8001aea <HardFault_Handler+0x4>

08001aec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001af0:	e7fe      	b.n	8001af0 <MemManage_Handler+0x4>

08001af2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001af2:	b480      	push	{r7}
 8001af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001af6:	e7fe      	b.n	8001af6 <BusFault_Handler+0x4>

08001af8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001afc:	e7fe      	b.n	8001afc <UsageFault_Handler+0x4>

08001afe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001afe:	b480      	push	{r7}
 8001b00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b02:	bf00      	nop
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bc80      	pop	{r7}
 8001b08:	4770      	bx	lr

08001b0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b0a:	b480      	push	{r7}
 8001b0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b0e:	bf00      	nop
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bc80      	pop	{r7}
 8001b14:	4770      	bx	lr

08001b16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b16:	b480      	push	{r7}
 8001b18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b1a:	bf00      	nop
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bc80      	pop	{r7}
 8001b20:	4770      	bx	lr

08001b22 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b22:	b580      	push	{r7, lr}
 8001b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b26:	f000 f87f 	bl	8001c28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b2a:	bf00      	nop
 8001b2c:	bd80      	pop	{r7, pc}
	...

08001b30 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001b34:	4802      	ldr	r0, [pc, #8]	; (8001b40 <TIM2_IRQHandler+0x10>)
 8001b36:	f000 ffdb 	bl	8002af0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001b3a:	bf00      	nop
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	200001ac 	.word	0x200001ac

08001b44 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b48:	bf00      	nop
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bc80      	pop	{r7}
 8001b4e:	4770      	bx	lr

08001b50 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b50:	f7ff fff8 	bl	8001b44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b54:	480b      	ldr	r0, [pc, #44]	; (8001b84 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001b56:	490c      	ldr	r1, [pc, #48]	; (8001b88 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001b58:	4a0c      	ldr	r2, [pc, #48]	; (8001b8c <LoopFillZerobss+0x16>)
  movs r3, #0
 8001b5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b5c:	e002      	b.n	8001b64 <LoopCopyDataInit>

08001b5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b62:	3304      	adds	r3, #4

08001b64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b68:	d3f9      	bcc.n	8001b5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b6a:	4a09      	ldr	r2, [pc, #36]	; (8001b90 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001b6c:	4c09      	ldr	r4, [pc, #36]	; (8001b94 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b70:	e001      	b.n	8001b76 <LoopFillZerobss>

08001b72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b74:	3204      	adds	r2, #4

08001b76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b78:	d3fb      	bcc.n	8001b72 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b7a:	f001 fb05 	bl	8003188 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b7e:	f7ff fb29 	bl	80011d4 <main>
  bx lr
 8001b82:	4770      	bx	lr
  ldr r0, =_sdata
 8001b84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b88:	20000050 	.word	0x20000050
  ldr r2, =_sidata
 8001b8c:	08003224 	.word	0x08003224
  ldr r2, =_sbss
 8001b90:	20000050 	.word	0x20000050
  ldr r4, =_ebss
 8001b94:	200001f8 	.word	0x200001f8

08001b98 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b98:	e7fe      	b.n	8001b98 <ADC1_2_IRQHandler>
	...

08001b9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ba0:	4b08      	ldr	r3, [pc, #32]	; (8001bc4 <HAL_Init+0x28>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a07      	ldr	r2, [pc, #28]	; (8001bc4 <HAL_Init+0x28>)
 8001ba6:	f043 0310 	orr.w	r3, r3, #16
 8001baa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bac:	2003      	movs	r0, #3
 8001bae:	f000 f923 	bl	8001df8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bb2:	200f      	movs	r0, #15
 8001bb4:	f000 f808 	bl	8001bc8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bb8:	f7ff ff3c 	bl	8001a34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bbc:	2300      	movs	r3, #0
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	40022000 	.word	0x40022000

08001bc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bd0:	4b12      	ldr	r3, [pc, #72]	; (8001c1c <HAL_InitTick+0x54>)
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	4b12      	ldr	r3, [pc, #72]	; (8001c20 <HAL_InitTick+0x58>)
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	4619      	mov	r1, r3
 8001bda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bde:	fbb3 f3f1 	udiv	r3, r3, r1
 8001be2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001be6:	4618      	mov	r0, r3
 8001be8:	f000 f93b 	bl	8001e62 <HAL_SYSTICK_Config>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d001      	beq.n	8001bf6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e00e      	b.n	8001c14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2b0f      	cmp	r3, #15
 8001bfa:	d80a      	bhi.n	8001c12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	6879      	ldr	r1, [r7, #4]
 8001c00:	f04f 30ff 	mov.w	r0, #4294967295
 8001c04:	f000 f903 	bl	8001e0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c08:	4a06      	ldr	r2, [pc, #24]	; (8001c24 <HAL_InitTick+0x5c>)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	e000      	b.n	8001c14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	3708      	adds	r7, #8
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	20000044 	.word	0x20000044
 8001c20:	2000004c 	.word	0x2000004c
 8001c24:	20000048 	.word	0x20000048

08001c28 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c2c:	4b05      	ldr	r3, [pc, #20]	; (8001c44 <HAL_IncTick+0x1c>)
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	461a      	mov	r2, r3
 8001c32:	4b05      	ldr	r3, [pc, #20]	; (8001c48 <HAL_IncTick+0x20>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4413      	add	r3, r2
 8001c38:	4a03      	ldr	r2, [pc, #12]	; (8001c48 <HAL_IncTick+0x20>)
 8001c3a:	6013      	str	r3, [r2, #0]
}
 8001c3c:	bf00      	nop
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bc80      	pop	{r7}
 8001c42:	4770      	bx	lr
 8001c44:	2000004c 	.word	0x2000004c
 8001c48:	200001f4 	.word	0x200001f4

08001c4c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c50:	4b02      	ldr	r3, [pc, #8]	; (8001c5c <HAL_GetTick+0x10>)
 8001c52:	681b      	ldr	r3, [r3, #0]
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bc80      	pop	{r7}
 8001c5a:	4770      	bx	lr
 8001c5c:	200001f4 	.word	0x200001f4

08001c60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b085      	sub	sp, #20
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	f003 0307 	and.w	r3, r3, #7
 8001c6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c70:	4b0c      	ldr	r3, [pc, #48]	; (8001ca4 <__NVIC_SetPriorityGrouping+0x44>)
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c76:	68ba      	ldr	r2, [r7, #8]
 8001c78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c92:	4a04      	ldr	r2, [pc, #16]	; (8001ca4 <__NVIC_SetPriorityGrouping+0x44>)
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	60d3      	str	r3, [r2, #12]
}
 8001c98:	bf00      	nop
 8001c9a:	3714      	adds	r7, #20
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bc80      	pop	{r7}
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop
 8001ca4:	e000ed00 	.word	0xe000ed00

08001ca8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cac:	4b04      	ldr	r3, [pc, #16]	; (8001cc0 <__NVIC_GetPriorityGrouping+0x18>)
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	0a1b      	lsrs	r3, r3, #8
 8001cb2:	f003 0307 	and.w	r3, r3, #7
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bc80      	pop	{r7}
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	e000ed00 	.word	0xe000ed00

08001cc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	4603      	mov	r3, r0
 8001ccc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	db0b      	blt.n	8001cee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cd6:	79fb      	ldrb	r3, [r7, #7]
 8001cd8:	f003 021f 	and.w	r2, r3, #31
 8001cdc:	4906      	ldr	r1, [pc, #24]	; (8001cf8 <__NVIC_EnableIRQ+0x34>)
 8001cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce2:	095b      	lsrs	r3, r3, #5
 8001ce4:	2001      	movs	r0, #1
 8001ce6:	fa00 f202 	lsl.w	r2, r0, r2
 8001cea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cee:	bf00      	nop
 8001cf0:	370c      	adds	r7, #12
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bc80      	pop	{r7}
 8001cf6:	4770      	bx	lr
 8001cf8:	e000e100 	.word	0xe000e100

08001cfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	4603      	mov	r3, r0
 8001d04:	6039      	str	r1, [r7, #0]
 8001d06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	db0a      	blt.n	8001d26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	b2da      	uxtb	r2, r3
 8001d14:	490c      	ldr	r1, [pc, #48]	; (8001d48 <__NVIC_SetPriority+0x4c>)
 8001d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d1a:	0112      	lsls	r2, r2, #4
 8001d1c:	b2d2      	uxtb	r2, r2
 8001d1e:	440b      	add	r3, r1
 8001d20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d24:	e00a      	b.n	8001d3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	b2da      	uxtb	r2, r3
 8001d2a:	4908      	ldr	r1, [pc, #32]	; (8001d4c <__NVIC_SetPriority+0x50>)
 8001d2c:	79fb      	ldrb	r3, [r7, #7]
 8001d2e:	f003 030f 	and.w	r3, r3, #15
 8001d32:	3b04      	subs	r3, #4
 8001d34:	0112      	lsls	r2, r2, #4
 8001d36:	b2d2      	uxtb	r2, r2
 8001d38:	440b      	add	r3, r1
 8001d3a:	761a      	strb	r2, [r3, #24]
}
 8001d3c:	bf00      	nop
 8001d3e:	370c      	adds	r7, #12
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bc80      	pop	{r7}
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	e000e100 	.word	0xe000e100
 8001d4c:	e000ed00 	.word	0xe000ed00

08001d50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b089      	sub	sp, #36	; 0x24
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	60f8      	str	r0, [r7, #12]
 8001d58:	60b9      	str	r1, [r7, #8]
 8001d5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	f003 0307 	and.w	r3, r3, #7
 8001d62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	f1c3 0307 	rsb	r3, r3, #7
 8001d6a:	2b04      	cmp	r3, #4
 8001d6c:	bf28      	it	cs
 8001d6e:	2304      	movcs	r3, #4
 8001d70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	3304      	adds	r3, #4
 8001d76:	2b06      	cmp	r3, #6
 8001d78:	d902      	bls.n	8001d80 <NVIC_EncodePriority+0x30>
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	3b03      	subs	r3, #3
 8001d7e:	e000      	b.n	8001d82 <NVIC_EncodePriority+0x32>
 8001d80:	2300      	movs	r3, #0
 8001d82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d84:	f04f 32ff 	mov.w	r2, #4294967295
 8001d88:	69bb      	ldr	r3, [r7, #24]
 8001d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8e:	43da      	mvns	r2, r3
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	401a      	ands	r2, r3
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d98:	f04f 31ff 	mov.w	r1, #4294967295
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	fa01 f303 	lsl.w	r3, r1, r3
 8001da2:	43d9      	mvns	r1, r3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001da8:	4313      	orrs	r3, r2
         );
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3724      	adds	r7, #36	; 0x24
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bc80      	pop	{r7}
 8001db2:	4770      	bx	lr

08001db4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	3b01      	subs	r3, #1
 8001dc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001dc4:	d301      	bcc.n	8001dca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e00f      	b.n	8001dea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dca:	4a0a      	ldr	r2, [pc, #40]	; (8001df4 <SysTick_Config+0x40>)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	3b01      	subs	r3, #1
 8001dd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dd2:	210f      	movs	r1, #15
 8001dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8001dd8:	f7ff ff90 	bl	8001cfc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ddc:	4b05      	ldr	r3, [pc, #20]	; (8001df4 <SysTick_Config+0x40>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001de2:	4b04      	ldr	r3, [pc, #16]	; (8001df4 <SysTick_Config+0x40>)
 8001de4:	2207      	movs	r2, #7
 8001de6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001de8:	2300      	movs	r3, #0
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3708      	adds	r7, #8
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	e000e010 	.word	0xe000e010

08001df8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	f7ff ff2d 	bl	8001c60 <__NVIC_SetPriorityGrouping>
}
 8001e06:	bf00      	nop
 8001e08:	3708      	adds	r7, #8
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}

08001e0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e0e:	b580      	push	{r7, lr}
 8001e10:	b086      	sub	sp, #24
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	4603      	mov	r3, r0
 8001e16:	60b9      	str	r1, [r7, #8]
 8001e18:	607a      	str	r2, [r7, #4]
 8001e1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e20:	f7ff ff42 	bl	8001ca8 <__NVIC_GetPriorityGrouping>
 8001e24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	68b9      	ldr	r1, [r7, #8]
 8001e2a:	6978      	ldr	r0, [r7, #20]
 8001e2c:	f7ff ff90 	bl	8001d50 <NVIC_EncodePriority>
 8001e30:	4602      	mov	r2, r0
 8001e32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e36:	4611      	mov	r1, r2
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7ff ff5f 	bl	8001cfc <__NVIC_SetPriority>
}
 8001e3e:	bf00      	nop
 8001e40:	3718      	adds	r7, #24
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}

08001e46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e46:	b580      	push	{r7, lr}
 8001e48:	b082      	sub	sp, #8
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e54:	4618      	mov	r0, r3
 8001e56:	f7ff ff35 	bl	8001cc4 <__NVIC_EnableIRQ>
}
 8001e5a:	bf00      	nop
 8001e5c:	3708      	adds	r7, #8
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}

08001e62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e62:	b580      	push	{r7, lr}
 8001e64:	b082      	sub	sp, #8
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f7ff ffa2 	bl	8001db4 <SysTick_Config>
 8001e70:	4603      	mov	r3, r0
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3708      	adds	r7, #8
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
	...

08001e7c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b08b      	sub	sp, #44	; 0x2c
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e86:	2300      	movs	r3, #0
 8001e88:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e8e:	e148      	b.n	8002122 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001e90:	2201      	movs	r2, #1
 8001e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e94:	fa02 f303 	lsl.w	r3, r2, r3
 8001e98:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	69fa      	ldr	r2, [r7, #28]
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001ea4:	69ba      	ldr	r2, [r7, #24]
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	f040 8137 	bne.w	800211c <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	4aa3      	ldr	r2, [pc, #652]	; (8002140 <HAL_GPIO_Init+0x2c4>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d05e      	beq.n	8001f76 <HAL_GPIO_Init+0xfa>
 8001eb8:	4aa1      	ldr	r2, [pc, #644]	; (8002140 <HAL_GPIO_Init+0x2c4>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d875      	bhi.n	8001faa <HAL_GPIO_Init+0x12e>
 8001ebe:	4aa1      	ldr	r2, [pc, #644]	; (8002144 <HAL_GPIO_Init+0x2c8>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d058      	beq.n	8001f76 <HAL_GPIO_Init+0xfa>
 8001ec4:	4a9f      	ldr	r2, [pc, #636]	; (8002144 <HAL_GPIO_Init+0x2c8>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d86f      	bhi.n	8001faa <HAL_GPIO_Init+0x12e>
 8001eca:	4a9f      	ldr	r2, [pc, #636]	; (8002148 <HAL_GPIO_Init+0x2cc>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d052      	beq.n	8001f76 <HAL_GPIO_Init+0xfa>
 8001ed0:	4a9d      	ldr	r2, [pc, #628]	; (8002148 <HAL_GPIO_Init+0x2cc>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d869      	bhi.n	8001faa <HAL_GPIO_Init+0x12e>
 8001ed6:	4a9d      	ldr	r2, [pc, #628]	; (800214c <HAL_GPIO_Init+0x2d0>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d04c      	beq.n	8001f76 <HAL_GPIO_Init+0xfa>
 8001edc:	4a9b      	ldr	r2, [pc, #620]	; (800214c <HAL_GPIO_Init+0x2d0>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d863      	bhi.n	8001faa <HAL_GPIO_Init+0x12e>
 8001ee2:	4a9b      	ldr	r2, [pc, #620]	; (8002150 <HAL_GPIO_Init+0x2d4>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d046      	beq.n	8001f76 <HAL_GPIO_Init+0xfa>
 8001ee8:	4a99      	ldr	r2, [pc, #612]	; (8002150 <HAL_GPIO_Init+0x2d4>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d85d      	bhi.n	8001faa <HAL_GPIO_Init+0x12e>
 8001eee:	2b12      	cmp	r3, #18
 8001ef0:	d82a      	bhi.n	8001f48 <HAL_GPIO_Init+0xcc>
 8001ef2:	2b12      	cmp	r3, #18
 8001ef4:	d859      	bhi.n	8001faa <HAL_GPIO_Init+0x12e>
 8001ef6:	a201      	add	r2, pc, #4	; (adr r2, 8001efc <HAL_GPIO_Init+0x80>)
 8001ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001efc:	08001f77 	.word	0x08001f77
 8001f00:	08001f51 	.word	0x08001f51
 8001f04:	08001f63 	.word	0x08001f63
 8001f08:	08001fa5 	.word	0x08001fa5
 8001f0c:	08001fab 	.word	0x08001fab
 8001f10:	08001fab 	.word	0x08001fab
 8001f14:	08001fab 	.word	0x08001fab
 8001f18:	08001fab 	.word	0x08001fab
 8001f1c:	08001fab 	.word	0x08001fab
 8001f20:	08001fab 	.word	0x08001fab
 8001f24:	08001fab 	.word	0x08001fab
 8001f28:	08001fab 	.word	0x08001fab
 8001f2c:	08001fab 	.word	0x08001fab
 8001f30:	08001fab 	.word	0x08001fab
 8001f34:	08001fab 	.word	0x08001fab
 8001f38:	08001fab 	.word	0x08001fab
 8001f3c:	08001fab 	.word	0x08001fab
 8001f40:	08001f59 	.word	0x08001f59
 8001f44:	08001f6d 	.word	0x08001f6d
 8001f48:	4a82      	ldr	r2, [pc, #520]	; (8002154 <HAL_GPIO_Init+0x2d8>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d013      	beq.n	8001f76 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001f4e:	e02c      	b.n	8001faa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	623b      	str	r3, [r7, #32]
          break;
 8001f56:	e029      	b.n	8001fac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	3304      	adds	r3, #4
 8001f5e:	623b      	str	r3, [r7, #32]
          break;
 8001f60:	e024      	b.n	8001fac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	68db      	ldr	r3, [r3, #12]
 8001f66:	3308      	adds	r3, #8
 8001f68:	623b      	str	r3, [r7, #32]
          break;
 8001f6a:	e01f      	b.n	8001fac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	330c      	adds	r3, #12
 8001f72:	623b      	str	r3, [r7, #32]
          break;
 8001f74:	e01a      	b.n	8001fac <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d102      	bne.n	8001f84 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f7e:	2304      	movs	r3, #4
 8001f80:	623b      	str	r3, [r7, #32]
          break;
 8001f82:	e013      	b.n	8001fac <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	d105      	bne.n	8001f98 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f8c:	2308      	movs	r3, #8
 8001f8e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	69fa      	ldr	r2, [r7, #28]
 8001f94:	611a      	str	r2, [r3, #16]
          break;
 8001f96:	e009      	b.n	8001fac <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f98:	2308      	movs	r3, #8
 8001f9a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	69fa      	ldr	r2, [r7, #28]
 8001fa0:	615a      	str	r2, [r3, #20]
          break;
 8001fa2:	e003      	b.n	8001fac <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	623b      	str	r3, [r7, #32]
          break;
 8001fa8:	e000      	b.n	8001fac <HAL_GPIO_Init+0x130>
          break;
 8001faa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001fac:	69bb      	ldr	r3, [r7, #24]
 8001fae:	2bff      	cmp	r3, #255	; 0xff
 8001fb0:	d801      	bhi.n	8001fb6 <HAL_GPIO_Init+0x13a>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	e001      	b.n	8001fba <HAL_GPIO_Init+0x13e>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	3304      	adds	r3, #4
 8001fba:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001fbc:	69bb      	ldr	r3, [r7, #24]
 8001fbe:	2bff      	cmp	r3, #255	; 0xff
 8001fc0:	d802      	bhi.n	8001fc8 <HAL_GPIO_Init+0x14c>
 8001fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	e002      	b.n	8001fce <HAL_GPIO_Init+0x152>
 8001fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fca:	3b08      	subs	r3, #8
 8001fcc:	009b      	lsls	r3, r3, #2
 8001fce:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	210f      	movs	r1, #15
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	fa01 f303 	lsl.w	r3, r1, r3
 8001fdc:	43db      	mvns	r3, r3
 8001fde:	401a      	ands	r2, r3
 8001fe0:	6a39      	ldr	r1, [r7, #32]
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	fa01 f303 	lsl.w	r3, r1, r3
 8001fe8:	431a      	orrs	r2, r3
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	f000 8090 	beq.w	800211c <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ffc:	4b56      	ldr	r3, [pc, #344]	; (8002158 <HAL_GPIO_Init+0x2dc>)
 8001ffe:	699b      	ldr	r3, [r3, #24]
 8002000:	4a55      	ldr	r2, [pc, #340]	; (8002158 <HAL_GPIO_Init+0x2dc>)
 8002002:	f043 0301 	orr.w	r3, r3, #1
 8002006:	6193      	str	r3, [r2, #24]
 8002008:	4b53      	ldr	r3, [pc, #332]	; (8002158 <HAL_GPIO_Init+0x2dc>)
 800200a:	699b      	ldr	r3, [r3, #24]
 800200c:	f003 0301 	and.w	r3, r3, #1
 8002010:	60bb      	str	r3, [r7, #8]
 8002012:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002014:	4a51      	ldr	r2, [pc, #324]	; (800215c <HAL_GPIO_Init+0x2e0>)
 8002016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002018:	089b      	lsrs	r3, r3, #2
 800201a:	3302      	adds	r3, #2
 800201c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002020:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002024:	f003 0303 	and.w	r3, r3, #3
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	220f      	movs	r2, #15
 800202c:	fa02 f303 	lsl.w	r3, r2, r3
 8002030:	43db      	mvns	r3, r3
 8002032:	68fa      	ldr	r2, [r7, #12]
 8002034:	4013      	ands	r3, r2
 8002036:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	4a49      	ldr	r2, [pc, #292]	; (8002160 <HAL_GPIO_Init+0x2e4>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d00d      	beq.n	800205c <HAL_GPIO_Init+0x1e0>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	4a48      	ldr	r2, [pc, #288]	; (8002164 <HAL_GPIO_Init+0x2e8>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d007      	beq.n	8002058 <HAL_GPIO_Init+0x1dc>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	4a47      	ldr	r2, [pc, #284]	; (8002168 <HAL_GPIO_Init+0x2ec>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d101      	bne.n	8002054 <HAL_GPIO_Init+0x1d8>
 8002050:	2302      	movs	r3, #2
 8002052:	e004      	b.n	800205e <HAL_GPIO_Init+0x1e2>
 8002054:	2303      	movs	r3, #3
 8002056:	e002      	b.n	800205e <HAL_GPIO_Init+0x1e2>
 8002058:	2301      	movs	r3, #1
 800205a:	e000      	b.n	800205e <HAL_GPIO_Init+0x1e2>
 800205c:	2300      	movs	r3, #0
 800205e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002060:	f002 0203 	and.w	r2, r2, #3
 8002064:	0092      	lsls	r2, r2, #2
 8002066:	4093      	lsls	r3, r2
 8002068:	68fa      	ldr	r2, [r7, #12]
 800206a:	4313      	orrs	r3, r2
 800206c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800206e:	493b      	ldr	r1, [pc, #236]	; (800215c <HAL_GPIO_Init+0x2e0>)
 8002070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002072:	089b      	lsrs	r3, r3, #2
 8002074:	3302      	adds	r3, #2
 8002076:	68fa      	ldr	r2, [r7, #12]
 8002078:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002084:	2b00      	cmp	r3, #0
 8002086:	d006      	beq.n	8002096 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002088:	4b38      	ldr	r3, [pc, #224]	; (800216c <HAL_GPIO_Init+0x2f0>)
 800208a:	689a      	ldr	r2, [r3, #8]
 800208c:	4937      	ldr	r1, [pc, #220]	; (800216c <HAL_GPIO_Init+0x2f0>)
 800208e:	69bb      	ldr	r3, [r7, #24]
 8002090:	4313      	orrs	r3, r2
 8002092:	608b      	str	r3, [r1, #8]
 8002094:	e006      	b.n	80020a4 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002096:	4b35      	ldr	r3, [pc, #212]	; (800216c <HAL_GPIO_Init+0x2f0>)
 8002098:	689a      	ldr	r2, [r3, #8]
 800209a:	69bb      	ldr	r3, [r7, #24]
 800209c:	43db      	mvns	r3, r3
 800209e:	4933      	ldr	r1, [pc, #204]	; (800216c <HAL_GPIO_Init+0x2f0>)
 80020a0:	4013      	ands	r3, r2
 80020a2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d006      	beq.n	80020be <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80020b0:	4b2e      	ldr	r3, [pc, #184]	; (800216c <HAL_GPIO_Init+0x2f0>)
 80020b2:	68da      	ldr	r2, [r3, #12]
 80020b4:	492d      	ldr	r1, [pc, #180]	; (800216c <HAL_GPIO_Init+0x2f0>)
 80020b6:	69bb      	ldr	r3, [r7, #24]
 80020b8:	4313      	orrs	r3, r2
 80020ba:	60cb      	str	r3, [r1, #12]
 80020bc:	e006      	b.n	80020cc <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80020be:	4b2b      	ldr	r3, [pc, #172]	; (800216c <HAL_GPIO_Init+0x2f0>)
 80020c0:	68da      	ldr	r2, [r3, #12]
 80020c2:	69bb      	ldr	r3, [r7, #24]
 80020c4:	43db      	mvns	r3, r3
 80020c6:	4929      	ldr	r1, [pc, #164]	; (800216c <HAL_GPIO_Init+0x2f0>)
 80020c8:	4013      	ands	r3, r2
 80020ca:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d006      	beq.n	80020e6 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80020d8:	4b24      	ldr	r3, [pc, #144]	; (800216c <HAL_GPIO_Init+0x2f0>)
 80020da:	685a      	ldr	r2, [r3, #4]
 80020dc:	4923      	ldr	r1, [pc, #140]	; (800216c <HAL_GPIO_Init+0x2f0>)
 80020de:	69bb      	ldr	r3, [r7, #24]
 80020e0:	4313      	orrs	r3, r2
 80020e2:	604b      	str	r3, [r1, #4]
 80020e4:	e006      	b.n	80020f4 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80020e6:	4b21      	ldr	r3, [pc, #132]	; (800216c <HAL_GPIO_Init+0x2f0>)
 80020e8:	685a      	ldr	r2, [r3, #4]
 80020ea:	69bb      	ldr	r3, [r7, #24]
 80020ec:	43db      	mvns	r3, r3
 80020ee:	491f      	ldr	r1, [pc, #124]	; (800216c <HAL_GPIO_Init+0x2f0>)
 80020f0:	4013      	ands	r3, r2
 80020f2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d006      	beq.n	800210e <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002100:	4b1a      	ldr	r3, [pc, #104]	; (800216c <HAL_GPIO_Init+0x2f0>)
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	4919      	ldr	r1, [pc, #100]	; (800216c <HAL_GPIO_Init+0x2f0>)
 8002106:	69bb      	ldr	r3, [r7, #24]
 8002108:	4313      	orrs	r3, r2
 800210a:	600b      	str	r3, [r1, #0]
 800210c:	e006      	b.n	800211c <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800210e:	4b17      	ldr	r3, [pc, #92]	; (800216c <HAL_GPIO_Init+0x2f0>)
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	69bb      	ldr	r3, [r7, #24]
 8002114:	43db      	mvns	r3, r3
 8002116:	4915      	ldr	r1, [pc, #84]	; (800216c <HAL_GPIO_Init+0x2f0>)
 8002118:	4013      	ands	r3, r2
 800211a:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800211c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211e:	3301      	adds	r3, #1
 8002120:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002128:	fa22 f303 	lsr.w	r3, r2, r3
 800212c:	2b00      	cmp	r3, #0
 800212e:	f47f aeaf 	bne.w	8001e90 <HAL_GPIO_Init+0x14>
  }
}
 8002132:	bf00      	nop
 8002134:	bf00      	nop
 8002136:	372c      	adds	r7, #44	; 0x2c
 8002138:	46bd      	mov	sp, r7
 800213a:	bc80      	pop	{r7}
 800213c:	4770      	bx	lr
 800213e:	bf00      	nop
 8002140:	10320000 	.word	0x10320000
 8002144:	10310000 	.word	0x10310000
 8002148:	10220000 	.word	0x10220000
 800214c:	10210000 	.word	0x10210000
 8002150:	10120000 	.word	0x10120000
 8002154:	10110000 	.word	0x10110000
 8002158:	40021000 	.word	0x40021000
 800215c:	40010000 	.word	0x40010000
 8002160:	40010800 	.word	0x40010800
 8002164:	40010c00 	.word	0x40010c00
 8002168:	40011000 	.word	0x40011000
 800216c:	40010400 	.word	0x40010400

08002170 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002170:	b480      	push	{r7}
 8002172:	b085      	sub	sp, #20
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
 8002178:	460b      	mov	r3, r1
 800217a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	689a      	ldr	r2, [r3, #8]
 8002180:	887b      	ldrh	r3, [r7, #2]
 8002182:	4013      	ands	r3, r2
 8002184:	2b00      	cmp	r3, #0
 8002186:	d002      	beq.n	800218e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002188:	2301      	movs	r3, #1
 800218a:	73fb      	strb	r3, [r7, #15]
 800218c:	e001      	b.n	8002192 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800218e:	2300      	movs	r3, #0
 8002190:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002192:	7bfb      	ldrb	r3, [r7, #15]
}
 8002194:	4618      	mov	r0, r3
 8002196:	3714      	adds	r7, #20
 8002198:	46bd      	mov	sp, r7
 800219a:	bc80      	pop	{r7}
 800219c:	4770      	bx	lr

0800219e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800219e:	b480      	push	{r7}
 80021a0:	b083      	sub	sp, #12
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	6078      	str	r0, [r7, #4]
 80021a6:	460b      	mov	r3, r1
 80021a8:	807b      	strh	r3, [r7, #2]
 80021aa:	4613      	mov	r3, r2
 80021ac:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80021ae:	787b      	ldrb	r3, [r7, #1]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d003      	beq.n	80021bc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021b4:	887a      	ldrh	r2, [r7, #2]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80021ba:	e003      	b.n	80021c4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80021bc:	887b      	ldrh	r3, [r7, #2]
 80021be:	041a      	lsls	r2, r3, #16
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	611a      	str	r2, [r3, #16]
}
 80021c4:	bf00      	nop
 80021c6:	370c      	adds	r7, #12
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bc80      	pop	{r7}
 80021cc:	4770      	bx	lr

080021ce <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80021ce:	b480      	push	{r7}
 80021d0:	b085      	sub	sp, #20
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	6078      	str	r0, [r7, #4]
 80021d6:	460b      	mov	r3, r1
 80021d8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	68db      	ldr	r3, [r3, #12]
 80021de:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80021e0:	887a      	ldrh	r2, [r7, #2]
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	4013      	ands	r3, r2
 80021e6:	041a      	lsls	r2, r3, #16
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	43d9      	mvns	r1, r3
 80021ec:	887b      	ldrh	r3, [r7, #2]
 80021ee:	400b      	ands	r3, r1
 80021f0:	431a      	orrs	r2, r3
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	611a      	str	r2, [r3, #16]
}
 80021f6:	bf00      	nop
 80021f8:	3714      	adds	r7, #20
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bc80      	pop	{r7}
 80021fe:	4770      	bx	lr

08002200 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b086      	sub	sp, #24
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d101      	bne.n	8002212 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e26c      	b.n	80026ec <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 0301 	and.w	r3, r3, #1
 800221a:	2b00      	cmp	r3, #0
 800221c:	f000 8087 	beq.w	800232e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002220:	4b92      	ldr	r3, [pc, #584]	; (800246c <HAL_RCC_OscConfig+0x26c>)
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f003 030c 	and.w	r3, r3, #12
 8002228:	2b04      	cmp	r3, #4
 800222a:	d00c      	beq.n	8002246 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800222c:	4b8f      	ldr	r3, [pc, #572]	; (800246c <HAL_RCC_OscConfig+0x26c>)
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	f003 030c 	and.w	r3, r3, #12
 8002234:	2b08      	cmp	r3, #8
 8002236:	d112      	bne.n	800225e <HAL_RCC_OscConfig+0x5e>
 8002238:	4b8c      	ldr	r3, [pc, #560]	; (800246c <HAL_RCC_OscConfig+0x26c>)
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002240:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002244:	d10b      	bne.n	800225e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002246:	4b89      	ldr	r3, [pc, #548]	; (800246c <HAL_RCC_OscConfig+0x26c>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d06c      	beq.n	800232c <HAL_RCC_OscConfig+0x12c>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d168      	bne.n	800232c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e246      	b.n	80026ec <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002266:	d106      	bne.n	8002276 <HAL_RCC_OscConfig+0x76>
 8002268:	4b80      	ldr	r3, [pc, #512]	; (800246c <HAL_RCC_OscConfig+0x26c>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a7f      	ldr	r2, [pc, #508]	; (800246c <HAL_RCC_OscConfig+0x26c>)
 800226e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002272:	6013      	str	r3, [r2, #0]
 8002274:	e02e      	b.n	80022d4 <HAL_RCC_OscConfig+0xd4>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d10c      	bne.n	8002298 <HAL_RCC_OscConfig+0x98>
 800227e:	4b7b      	ldr	r3, [pc, #492]	; (800246c <HAL_RCC_OscConfig+0x26c>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a7a      	ldr	r2, [pc, #488]	; (800246c <HAL_RCC_OscConfig+0x26c>)
 8002284:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002288:	6013      	str	r3, [r2, #0]
 800228a:	4b78      	ldr	r3, [pc, #480]	; (800246c <HAL_RCC_OscConfig+0x26c>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a77      	ldr	r2, [pc, #476]	; (800246c <HAL_RCC_OscConfig+0x26c>)
 8002290:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002294:	6013      	str	r3, [r2, #0]
 8002296:	e01d      	b.n	80022d4 <HAL_RCC_OscConfig+0xd4>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022a0:	d10c      	bne.n	80022bc <HAL_RCC_OscConfig+0xbc>
 80022a2:	4b72      	ldr	r3, [pc, #456]	; (800246c <HAL_RCC_OscConfig+0x26c>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a71      	ldr	r2, [pc, #452]	; (800246c <HAL_RCC_OscConfig+0x26c>)
 80022a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022ac:	6013      	str	r3, [r2, #0]
 80022ae:	4b6f      	ldr	r3, [pc, #444]	; (800246c <HAL_RCC_OscConfig+0x26c>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a6e      	ldr	r2, [pc, #440]	; (800246c <HAL_RCC_OscConfig+0x26c>)
 80022b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022b8:	6013      	str	r3, [r2, #0]
 80022ba:	e00b      	b.n	80022d4 <HAL_RCC_OscConfig+0xd4>
 80022bc:	4b6b      	ldr	r3, [pc, #428]	; (800246c <HAL_RCC_OscConfig+0x26c>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a6a      	ldr	r2, [pc, #424]	; (800246c <HAL_RCC_OscConfig+0x26c>)
 80022c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022c6:	6013      	str	r3, [r2, #0]
 80022c8:	4b68      	ldr	r3, [pc, #416]	; (800246c <HAL_RCC_OscConfig+0x26c>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a67      	ldr	r2, [pc, #412]	; (800246c <HAL_RCC_OscConfig+0x26c>)
 80022ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022d2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d013      	beq.n	8002304 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022dc:	f7ff fcb6 	bl	8001c4c <HAL_GetTick>
 80022e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022e2:	e008      	b.n	80022f6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022e4:	f7ff fcb2 	bl	8001c4c <HAL_GetTick>
 80022e8:	4602      	mov	r2, r0
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	2b64      	cmp	r3, #100	; 0x64
 80022f0:	d901      	bls.n	80022f6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80022f2:	2303      	movs	r3, #3
 80022f4:	e1fa      	b.n	80026ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022f6:	4b5d      	ldr	r3, [pc, #372]	; (800246c <HAL_RCC_OscConfig+0x26c>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d0f0      	beq.n	80022e4 <HAL_RCC_OscConfig+0xe4>
 8002302:	e014      	b.n	800232e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002304:	f7ff fca2 	bl	8001c4c <HAL_GetTick>
 8002308:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800230a:	e008      	b.n	800231e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800230c:	f7ff fc9e 	bl	8001c4c <HAL_GetTick>
 8002310:	4602      	mov	r2, r0
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	2b64      	cmp	r3, #100	; 0x64
 8002318:	d901      	bls.n	800231e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800231a:	2303      	movs	r3, #3
 800231c:	e1e6      	b.n	80026ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800231e:	4b53      	ldr	r3, [pc, #332]	; (800246c <HAL_RCC_OscConfig+0x26c>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d1f0      	bne.n	800230c <HAL_RCC_OscConfig+0x10c>
 800232a:	e000      	b.n	800232e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800232c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0302 	and.w	r3, r3, #2
 8002336:	2b00      	cmp	r3, #0
 8002338:	d063      	beq.n	8002402 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800233a:	4b4c      	ldr	r3, [pc, #304]	; (800246c <HAL_RCC_OscConfig+0x26c>)
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	f003 030c 	and.w	r3, r3, #12
 8002342:	2b00      	cmp	r3, #0
 8002344:	d00b      	beq.n	800235e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002346:	4b49      	ldr	r3, [pc, #292]	; (800246c <HAL_RCC_OscConfig+0x26c>)
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	f003 030c 	and.w	r3, r3, #12
 800234e:	2b08      	cmp	r3, #8
 8002350:	d11c      	bne.n	800238c <HAL_RCC_OscConfig+0x18c>
 8002352:	4b46      	ldr	r3, [pc, #280]	; (800246c <HAL_RCC_OscConfig+0x26c>)
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800235a:	2b00      	cmp	r3, #0
 800235c:	d116      	bne.n	800238c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800235e:	4b43      	ldr	r3, [pc, #268]	; (800246c <HAL_RCC_OscConfig+0x26c>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 0302 	and.w	r3, r3, #2
 8002366:	2b00      	cmp	r3, #0
 8002368:	d005      	beq.n	8002376 <HAL_RCC_OscConfig+0x176>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	691b      	ldr	r3, [r3, #16]
 800236e:	2b01      	cmp	r3, #1
 8002370:	d001      	beq.n	8002376 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e1ba      	b.n	80026ec <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002376:	4b3d      	ldr	r3, [pc, #244]	; (800246c <HAL_RCC_OscConfig+0x26c>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	695b      	ldr	r3, [r3, #20]
 8002382:	00db      	lsls	r3, r3, #3
 8002384:	4939      	ldr	r1, [pc, #228]	; (800246c <HAL_RCC_OscConfig+0x26c>)
 8002386:	4313      	orrs	r3, r2
 8002388:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800238a:	e03a      	b.n	8002402 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	691b      	ldr	r3, [r3, #16]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d020      	beq.n	80023d6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002394:	4b36      	ldr	r3, [pc, #216]	; (8002470 <HAL_RCC_OscConfig+0x270>)
 8002396:	2201      	movs	r2, #1
 8002398:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800239a:	f7ff fc57 	bl	8001c4c <HAL_GetTick>
 800239e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023a0:	e008      	b.n	80023b4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023a2:	f7ff fc53 	bl	8001c4c <HAL_GetTick>
 80023a6:	4602      	mov	r2, r0
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	1ad3      	subs	r3, r2, r3
 80023ac:	2b02      	cmp	r3, #2
 80023ae:	d901      	bls.n	80023b4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80023b0:	2303      	movs	r3, #3
 80023b2:	e19b      	b.n	80026ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023b4:	4b2d      	ldr	r3, [pc, #180]	; (800246c <HAL_RCC_OscConfig+0x26c>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 0302 	and.w	r3, r3, #2
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d0f0      	beq.n	80023a2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023c0:	4b2a      	ldr	r3, [pc, #168]	; (800246c <HAL_RCC_OscConfig+0x26c>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	695b      	ldr	r3, [r3, #20]
 80023cc:	00db      	lsls	r3, r3, #3
 80023ce:	4927      	ldr	r1, [pc, #156]	; (800246c <HAL_RCC_OscConfig+0x26c>)
 80023d0:	4313      	orrs	r3, r2
 80023d2:	600b      	str	r3, [r1, #0]
 80023d4:	e015      	b.n	8002402 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023d6:	4b26      	ldr	r3, [pc, #152]	; (8002470 <HAL_RCC_OscConfig+0x270>)
 80023d8:	2200      	movs	r2, #0
 80023da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023dc:	f7ff fc36 	bl	8001c4c <HAL_GetTick>
 80023e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023e2:	e008      	b.n	80023f6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023e4:	f7ff fc32 	bl	8001c4c <HAL_GetTick>
 80023e8:	4602      	mov	r2, r0
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	2b02      	cmp	r3, #2
 80023f0:	d901      	bls.n	80023f6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80023f2:	2303      	movs	r3, #3
 80023f4:	e17a      	b.n	80026ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023f6:	4b1d      	ldr	r3, [pc, #116]	; (800246c <HAL_RCC_OscConfig+0x26c>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 0302 	and.w	r3, r3, #2
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d1f0      	bne.n	80023e4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 0308 	and.w	r3, r3, #8
 800240a:	2b00      	cmp	r3, #0
 800240c:	d03a      	beq.n	8002484 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	699b      	ldr	r3, [r3, #24]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d019      	beq.n	800244a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002416:	4b17      	ldr	r3, [pc, #92]	; (8002474 <HAL_RCC_OscConfig+0x274>)
 8002418:	2201      	movs	r2, #1
 800241a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800241c:	f7ff fc16 	bl	8001c4c <HAL_GetTick>
 8002420:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002422:	e008      	b.n	8002436 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002424:	f7ff fc12 	bl	8001c4c <HAL_GetTick>
 8002428:	4602      	mov	r2, r0
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	2b02      	cmp	r3, #2
 8002430:	d901      	bls.n	8002436 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002432:	2303      	movs	r3, #3
 8002434:	e15a      	b.n	80026ec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002436:	4b0d      	ldr	r3, [pc, #52]	; (800246c <HAL_RCC_OscConfig+0x26c>)
 8002438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243a:	f003 0302 	and.w	r3, r3, #2
 800243e:	2b00      	cmp	r3, #0
 8002440:	d0f0      	beq.n	8002424 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002442:	2001      	movs	r0, #1
 8002444:	f000 fa9a 	bl	800297c <RCC_Delay>
 8002448:	e01c      	b.n	8002484 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800244a:	4b0a      	ldr	r3, [pc, #40]	; (8002474 <HAL_RCC_OscConfig+0x274>)
 800244c:	2200      	movs	r2, #0
 800244e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002450:	f7ff fbfc 	bl	8001c4c <HAL_GetTick>
 8002454:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002456:	e00f      	b.n	8002478 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002458:	f7ff fbf8 	bl	8001c4c <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	2b02      	cmp	r3, #2
 8002464:	d908      	bls.n	8002478 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002466:	2303      	movs	r3, #3
 8002468:	e140      	b.n	80026ec <HAL_RCC_OscConfig+0x4ec>
 800246a:	bf00      	nop
 800246c:	40021000 	.word	0x40021000
 8002470:	42420000 	.word	0x42420000
 8002474:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002478:	4b9e      	ldr	r3, [pc, #632]	; (80026f4 <HAL_RCC_OscConfig+0x4f4>)
 800247a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800247c:	f003 0302 	and.w	r3, r3, #2
 8002480:	2b00      	cmp	r3, #0
 8002482:	d1e9      	bne.n	8002458 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 0304 	and.w	r3, r3, #4
 800248c:	2b00      	cmp	r3, #0
 800248e:	f000 80a6 	beq.w	80025de <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002492:	2300      	movs	r3, #0
 8002494:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002496:	4b97      	ldr	r3, [pc, #604]	; (80026f4 <HAL_RCC_OscConfig+0x4f4>)
 8002498:	69db      	ldr	r3, [r3, #28]
 800249a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d10d      	bne.n	80024be <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024a2:	4b94      	ldr	r3, [pc, #592]	; (80026f4 <HAL_RCC_OscConfig+0x4f4>)
 80024a4:	69db      	ldr	r3, [r3, #28]
 80024a6:	4a93      	ldr	r2, [pc, #588]	; (80026f4 <HAL_RCC_OscConfig+0x4f4>)
 80024a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024ac:	61d3      	str	r3, [r2, #28]
 80024ae:	4b91      	ldr	r3, [pc, #580]	; (80026f4 <HAL_RCC_OscConfig+0x4f4>)
 80024b0:	69db      	ldr	r3, [r3, #28]
 80024b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024b6:	60bb      	str	r3, [r7, #8]
 80024b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024ba:	2301      	movs	r3, #1
 80024bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024be:	4b8e      	ldr	r3, [pc, #568]	; (80026f8 <HAL_RCC_OscConfig+0x4f8>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d118      	bne.n	80024fc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024ca:	4b8b      	ldr	r3, [pc, #556]	; (80026f8 <HAL_RCC_OscConfig+0x4f8>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a8a      	ldr	r2, [pc, #552]	; (80026f8 <HAL_RCC_OscConfig+0x4f8>)
 80024d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024d6:	f7ff fbb9 	bl	8001c4c <HAL_GetTick>
 80024da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024dc:	e008      	b.n	80024f0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024de:	f7ff fbb5 	bl	8001c4c <HAL_GetTick>
 80024e2:	4602      	mov	r2, r0
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	1ad3      	subs	r3, r2, r3
 80024e8:	2b64      	cmp	r3, #100	; 0x64
 80024ea:	d901      	bls.n	80024f0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80024ec:	2303      	movs	r3, #3
 80024ee:	e0fd      	b.n	80026ec <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024f0:	4b81      	ldr	r3, [pc, #516]	; (80026f8 <HAL_RCC_OscConfig+0x4f8>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d0f0      	beq.n	80024de <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	2b01      	cmp	r3, #1
 8002502:	d106      	bne.n	8002512 <HAL_RCC_OscConfig+0x312>
 8002504:	4b7b      	ldr	r3, [pc, #492]	; (80026f4 <HAL_RCC_OscConfig+0x4f4>)
 8002506:	6a1b      	ldr	r3, [r3, #32]
 8002508:	4a7a      	ldr	r2, [pc, #488]	; (80026f4 <HAL_RCC_OscConfig+0x4f4>)
 800250a:	f043 0301 	orr.w	r3, r3, #1
 800250e:	6213      	str	r3, [r2, #32]
 8002510:	e02d      	b.n	800256e <HAL_RCC_OscConfig+0x36e>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	68db      	ldr	r3, [r3, #12]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d10c      	bne.n	8002534 <HAL_RCC_OscConfig+0x334>
 800251a:	4b76      	ldr	r3, [pc, #472]	; (80026f4 <HAL_RCC_OscConfig+0x4f4>)
 800251c:	6a1b      	ldr	r3, [r3, #32]
 800251e:	4a75      	ldr	r2, [pc, #468]	; (80026f4 <HAL_RCC_OscConfig+0x4f4>)
 8002520:	f023 0301 	bic.w	r3, r3, #1
 8002524:	6213      	str	r3, [r2, #32]
 8002526:	4b73      	ldr	r3, [pc, #460]	; (80026f4 <HAL_RCC_OscConfig+0x4f4>)
 8002528:	6a1b      	ldr	r3, [r3, #32]
 800252a:	4a72      	ldr	r2, [pc, #456]	; (80026f4 <HAL_RCC_OscConfig+0x4f4>)
 800252c:	f023 0304 	bic.w	r3, r3, #4
 8002530:	6213      	str	r3, [r2, #32]
 8002532:	e01c      	b.n	800256e <HAL_RCC_OscConfig+0x36e>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	2b05      	cmp	r3, #5
 800253a:	d10c      	bne.n	8002556 <HAL_RCC_OscConfig+0x356>
 800253c:	4b6d      	ldr	r3, [pc, #436]	; (80026f4 <HAL_RCC_OscConfig+0x4f4>)
 800253e:	6a1b      	ldr	r3, [r3, #32]
 8002540:	4a6c      	ldr	r2, [pc, #432]	; (80026f4 <HAL_RCC_OscConfig+0x4f4>)
 8002542:	f043 0304 	orr.w	r3, r3, #4
 8002546:	6213      	str	r3, [r2, #32]
 8002548:	4b6a      	ldr	r3, [pc, #424]	; (80026f4 <HAL_RCC_OscConfig+0x4f4>)
 800254a:	6a1b      	ldr	r3, [r3, #32]
 800254c:	4a69      	ldr	r2, [pc, #420]	; (80026f4 <HAL_RCC_OscConfig+0x4f4>)
 800254e:	f043 0301 	orr.w	r3, r3, #1
 8002552:	6213      	str	r3, [r2, #32]
 8002554:	e00b      	b.n	800256e <HAL_RCC_OscConfig+0x36e>
 8002556:	4b67      	ldr	r3, [pc, #412]	; (80026f4 <HAL_RCC_OscConfig+0x4f4>)
 8002558:	6a1b      	ldr	r3, [r3, #32]
 800255a:	4a66      	ldr	r2, [pc, #408]	; (80026f4 <HAL_RCC_OscConfig+0x4f4>)
 800255c:	f023 0301 	bic.w	r3, r3, #1
 8002560:	6213      	str	r3, [r2, #32]
 8002562:	4b64      	ldr	r3, [pc, #400]	; (80026f4 <HAL_RCC_OscConfig+0x4f4>)
 8002564:	6a1b      	ldr	r3, [r3, #32]
 8002566:	4a63      	ldr	r2, [pc, #396]	; (80026f4 <HAL_RCC_OscConfig+0x4f4>)
 8002568:	f023 0304 	bic.w	r3, r3, #4
 800256c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	68db      	ldr	r3, [r3, #12]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d015      	beq.n	80025a2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002576:	f7ff fb69 	bl	8001c4c <HAL_GetTick>
 800257a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800257c:	e00a      	b.n	8002594 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800257e:	f7ff fb65 	bl	8001c4c <HAL_GetTick>
 8002582:	4602      	mov	r2, r0
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	1ad3      	subs	r3, r2, r3
 8002588:	f241 3288 	movw	r2, #5000	; 0x1388
 800258c:	4293      	cmp	r3, r2
 800258e:	d901      	bls.n	8002594 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002590:	2303      	movs	r3, #3
 8002592:	e0ab      	b.n	80026ec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002594:	4b57      	ldr	r3, [pc, #348]	; (80026f4 <HAL_RCC_OscConfig+0x4f4>)
 8002596:	6a1b      	ldr	r3, [r3, #32]
 8002598:	f003 0302 	and.w	r3, r3, #2
 800259c:	2b00      	cmp	r3, #0
 800259e:	d0ee      	beq.n	800257e <HAL_RCC_OscConfig+0x37e>
 80025a0:	e014      	b.n	80025cc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025a2:	f7ff fb53 	bl	8001c4c <HAL_GetTick>
 80025a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025a8:	e00a      	b.n	80025c0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025aa:	f7ff fb4f 	bl	8001c4c <HAL_GetTick>
 80025ae:	4602      	mov	r2, r0
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	1ad3      	subs	r3, r2, r3
 80025b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d901      	bls.n	80025c0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80025bc:	2303      	movs	r3, #3
 80025be:	e095      	b.n	80026ec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025c0:	4b4c      	ldr	r3, [pc, #304]	; (80026f4 <HAL_RCC_OscConfig+0x4f4>)
 80025c2:	6a1b      	ldr	r3, [r3, #32]
 80025c4:	f003 0302 	and.w	r3, r3, #2
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d1ee      	bne.n	80025aa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80025cc:	7dfb      	ldrb	r3, [r7, #23]
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d105      	bne.n	80025de <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025d2:	4b48      	ldr	r3, [pc, #288]	; (80026f4 <HAL_RCC_OscConfig+0x4f4>)
 80025d4:	69db      	ldr	r3, [r3, #28]
 80025d6:	4a47      	ldr	r2, [pc, #284]	; (80026f4 <HAL_RCC_OscConfig+0x4f4>)
 80025d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025dc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	69db      	ldr	r3, [r3, #28]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	f000 8081 	beq.w	80026ea <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025e8:	4b42      	ldr	r3, [pc, #264]	; (80026f4 <HAL_RCC_OscConfig+0x4f4>)
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	f003 030c 	and.w	r3, r3, #12
 80025f0:	2b08      	cmp	r3, #8
 80025f2:	d061      	beq.n	80026b8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	69db      	ldr	r3, [r3, #28]
 80025f8:	2b02      	cmp	r3, #2
 80025fa:	d146      	bne.n	800268a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025fc:	4b3f      	ldr	r3, [pc, #252]	; (80026fc <HAL_RCC_OscConfig+0x4fc>)
 80025fe:	2200      	movs	r2, #0
 8002600:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002602:	f7ff fb23 	bl	8001c4c <HAL_GetTick>
 8002606:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002608:	e008      	b.n	800261c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800260a:	f7ff fb1f 	bl	8001c4c <HAL_GetTick>
 800260e:	4602      	mov	r2, r0
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	1ad3      	subs	r3, r2, r3
 8002614:	2b02      	cmp	r3, #2
 8002616:	d901      	bls.n	800261c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002618:	2303      	movs	r3, #3
 800261a:	e067      	b.n	80026ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800261c:	4b35      	ldr	r3, [pc, #212]	; (80026f4 <HAL_RCC_OscConfig+0x4f4>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002624:	2b00      	cmp	r3, #0
 8002626:	d1f0      	bne.n	800260a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6a1b      	ldr	r3, [r3, #32]
 800262c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002630:	d108      	bne.n	8002644 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002632:	4b30      	ldr	r3, [pc, #192]	; (80026f4 <HAL_RCC_OscConfig+0x4f4>)
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	492d      	ldr	r1, [pc, #180]	; (80026f4 <HAL_RCC_OscConfig+0x4f4>)
 8002640:	4313      	orrs	r3, r2
 8002642:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002644:	4b2b      	ldr	r3, [pc, #172]	; (80026f4 <HAL_RCC_OscConfig+0x4f4>)
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6a19      	ldr	r1, [r3, #32]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002654:	430b      	orrs	r3, r1
 8002656:	4927      	ldr	r1, [pc, #156]	; (80026f4 <HAL_RCC_OscConfig+0x4f4>)
 8002658:	4313      	orrs	r3, r2
 800265a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800265c:	4b27      	ldr	r3, [pc, #156]	; (80026fc <HAL_RCC_OscConfig+0x4fc>)
 800265e:	2201      	movs	r2, #1
 8002660:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002662:	f7ff faf3 	bl	8001c4c <HAL_GetTick>
 8002666:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002668:	e008      	b.n	800267c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800266a:	f7ff faef 	bl	8001c4c <HAL_GetTick>
 800266e:	4602      	mov	r2, r0
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	1ad3      	subs	r3, r2, r3
 8002674:	2b02      	cmp	r3, #2
 8002676:	d901      	bls.n	800267c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002678:	2303      	movs	r3, #3
 800267a:	e037      	b.n	80026ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800267c:	4b1d      	ldr	r3, [pc, #116]	; (80026f4 <HAL_RCC_OscConfig+0x4f4>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002684:	2b00      	cmp	r3, #0
 8002686:	d0f0      	beq.n	800266a <HAL_RCC_OscConfig+0x46a>
 8002688:	e02f      	b.n	80026ea <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800268a:	4b1c      	ldr	r3, [pc, #112]	; (80026fc <HAL_RCC_OscConfig+0x4fc>)
 800268c:	2200      	movs	r2, #0
 800268e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002690:	f7ff fadc 	bl	8001c4c <HAL_GetTick>
 8002694:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002696:	e008      	b.n	80026aa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002698:	f7ff fad8 	bl	8001c4c <HAL_GetTick>
 800269c:	4602      	mov	r2, r0
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d901      	bls.n	80026aa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80026a6:	2303      	movs	r3, #3
 80026a8:	e020      	b.n	80026ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026aa:	4b12      	ldr	r3, [pc, #72]	; (80026f4 <HAL_RCC_OscConfig+0x4f4>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d1f0      	bne.n	8002698 <HAL_RCC_OscConfig+0x498>
 80026b6:	e018      	b.n	80026ea <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	69db      	ldr	r3, [r3, #28]
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d101      	bne.n	80026c4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	e013      	b.n	80026ec <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80026c4:	4b0b      	ldr	r3, [pc, #44]	; (80026f4 <HAL_RCC_OscConfig+0x4f4>)
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6a1b      	ldr	r3, [r3, #32]
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d106      	bne.n	80026e6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026e2:	429a      	cmp	r2, r3
 80026e4:	d001      	beq.n	80026ea <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e000      	b.n	80026ec <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80026ea:	2300      	movs	r3, #0
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3718      	adds	r7, #24
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	40021000 	.word	0x40021000
 80026f8:	40007000 	.word	0x40007000
 80026fc:	42420060 	.word	0x42420060

08002700 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b084      	sub	sp, #16
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
 8002708:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d101      	bne.n	8002714 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	e0d0      	b.n	80028b6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002714:	4b6a      	ldr	r3, [pc, #424]	; (80028c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 0307 	and.w	r3, r3, #7
 800271c:	683a      	ldr	r2, [r7, #0]
 800271e:	429a      	cmp	r2, r3
 8002720:	d910      	bls.n	8002744 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002722:	4b67      	ldr	r3, [pc, #412]	; (80028c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f023 0207 	bic.w	r2, r3, #7
 800272a:	4965      	ldr	r1, [pc, #404]	; (80028c0 <HAL_RCC_ClockConfig+0x1c0>)
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	4313      	orrs	r3, r2
 8002730:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002732:	4b63      	ldr	r3, [pc, #396]	; (80028c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 0307 	and.w	r3, r3, #7
 800273a:	683a      	ldr	r2, [r7, #0]
 800273c:	429a      	cmp	r2, r3
 800273e:	d001      	beq.n	8002744 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	e0b8      	b.n	80028b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 0302 	and.w	r3, r3, #2
 800274c:	2b00      	cmp	r3, #0
 800274e:	d020      	beq.n	8002792 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 0304 	and.w	r3, r3, #4
 8002758:	2b00      	cmp	r3, #0
 800275a:	d005      	beq.n	8002768 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800275c:	4b59      	ldr	r3, [pc, #356]	; (80028c4 <HAL_RCC_ClockConfig+0x1c4>)
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	4a58      	ldr	r2, [pc, #352]	; (80028c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002762:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002766:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 0308 	and.w	r3, r3, #8
 8002770:	2b00      	cmp	r3, #0
 8002772:	d005      	beq.n	8002780 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002774:	4b53      	ldr	r3, [pc, #332]	; (80028c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	4a52      	ldr	r2, [pc, #328]	; (80028c4 <HAL_RCC_ClockConfig+0x1c4>)
 800277a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800277e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002780:	4b50      	ldr	r3, [pc, #320]	; (80028c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	494d      	ldr	r1, [pc, #308]	; (80028c4 <HAL_RCC_ClockConfig+0x1c4>)
 800278e:	4313      	orrs	r3, r2
 8002790:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 0301 	and.w	r3, r3, #1
 800279a:	2b00      	cmp	r3, #0
 800279c:	d040      	beq.n	8002820 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d107      	bne.n	80027b6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027a6:	4b47      	ldr	r3, [pc, #284]	; (80028c4 <HAL_RCC_ClockConfig+0x1c4>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d115      	bne.n	80027de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e07f      	b.n	80028b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	d107      	bne.n	80027ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027be:	4b41      	ldr	r3, [pc, #260]	; (80028c4 <HAL_RCC_ClockConfig+0x1c4>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d109      	bne.n	80027de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e073      	b.n	80028b6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027ce:	4b3d      	ldr	r3, [pc, #244]	; (80028c4 <HAL_RCC_ClockConfig+0x1c4>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 0302 	and.w	r3, r3, #2
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d101      	bne.n	80027de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e06b      	b.n	80028b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027de:	4b39      	ldr	r3, [pc, #228]	; (80028c4 <HAL_RCC_ClockConfig+0x1c4>)
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	f023 0203 	bic.w	r2, r3, #3
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	4936      	ldr	r1, [pc, #216]	; (80028c4 <HAL_RCC_ClockConfig+0x1c4>)
 80027ec:	4313      	orrs	r3, r2
 80027ee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027f0:	f7ff fa2c 	bl	8001c4c <HAL_GetTick>
 80027f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027f6:	e00a      	b.n	800280e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027f8:	f7ff fa28 	bl	8001c4c <HAL_GetTick>
 80027fc:	4602      	mov	r2, r0
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	1ad3      	subs	r3, r2, r3
 8002802:	f241 3288 	movw	r2, #5000	; 0x1388
 8002806:	4293      	cmp	r3, r2
 8002808:	d901      	bls.n	800280e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800280a:	2303      	movs	r3, #3
 800280c:	e053      	b.n	80028b6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800280e:	4b2d      	ldr	r3, [pc, #180]	; (80028c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	f003 020c 	and.w	r2, r3, #12
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	429a      	cmp	r2, r3
 800281e:	d1eb      	bne.n	80027f8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002820:	4b27      	ldr	r3, [pc, #156]	; (80028c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 0307 	and.w	r3, r3, #7
 8002828:	683a      	ldr	r2, [r7, #0]
 800282a:	429a      	cmp	r2, r3
 800282c:	d210      	bcs.n	8002850 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800282e:	4b24      	ldr	r3, [pc, #144]	; (80028c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f023 0207 	bic.w	r2, r3, #7
 8002836:	4922      	ldr	r1, [pc, #136]	; (80028c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	4313      	orrs	r3, r2
 800283c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800283e:	4b20      	ldr	r3, [pc, #128]	; (80028c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 0307 	and.w	r3, r3, #7
 8002846:	683a      	ldr	r2, [r7, #0]
 8002848:	429a      	cmp	r2, r3
 800284a:	d001      	beq.n	8002850 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	e032      	b.n	80028b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 0304 	and.w	r3, r3, #4
 8002858:	2b00      	cmp	r3, #0
 800285a:	d008      	beq.n	800286e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800285c:	4b19      	ldr	r3, [pc, #100]	; (80028c4 <HAL_RCC_ClockConfig+0x1c4>)
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	68db      	ldr	r3, [r3, #12]
 8002868:	4916      	ldr	r1, [pc, #88]	; (80028c4 <HAL_RCC_ClockConfig+0x1c4>)
 800286a:	4313      	orrs	r3, r2
 800286c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0308 	and.w	r3, r3, #8
 8002876:	2b00      	cmp	r3, #0
 8002878:	d009      	beq.n	800288e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800287a:	4b12      	ldr	r3, [pc, #72]	; (80028c4 <HAL_RCC_ClockConfig+0x1c4>)
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	691b      	ldr	r3, [r3, #16]
 8002886:	00db      	lsls	r3, r3, #3
 8002888:	490e      	ldr	r1, [pc, #56]	; (80028c4 <HAL_RCC_ClockConfig+0x1c4>)
 800288a:	4313      	orrs	r3, r2
 800288c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800288e:	f000 f821 	bl	80028d4 <HAL_RCC_GetSysClockFreq>
 8002892:	4602      	mov	r2, r0
 8002894:	4b0b      	ldr	r3, [pc, #44]	; (80028c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	091b      	lsrs	r3, r3, #4
 800289a:	f003 030f 	and.w	r3, r3, #15
 800289e:	490a      	ldr	r1, [pc, #40]	; (80028c8 <HAL_RCC_ClockConfig+0x1c8>)
 80028a0:	5ccb      	ldrb	r3, [r1, r3]
 80028a2:	fa22 f303 	lsr.w	r3, r2, r3
 80028a6:	4a09      	ldr	r2, [pc, #36]	; (80028cc <HAL_RCC_ClockConfig+0x1cc>)
 80028a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80028aa:	4b09      	ldr	r3, [pc, #36]	; (80028d0 <HAL_RCC_ClockConfig+0x1d0>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4618      	mov	r0, r3
 80028b0:	f7ff f98a 	bl	8001bc8 <HAL_InitTick>

  return HAL_OK;
 80028b4:	2300      	movs	r3, #0
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3710      	adds	r7, #16
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	40022000 	.word	0x40022000
 80028c4:	40021000 	.word	0x40021000
 80028c8:	080031f8 	.word	0x080031f8
 80028cc:	20000044 	.word	0x20000044
 80028d0:	20000048 	.word	0x20000048

080028d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b087      	sub	sp, #28
 80028d8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80028da:	2300      	movs	r3, #0
 80028dc:	60fb      	str	r3, [r7, #12]
 80028de:	2300      	movs	r3, #0
 80028e0:	60bb      	str	r3, [r7, #8]
 80028e2:	2300      	movs	r3, #0
 80028e4:	617b      	str	r3, [r7, #20]
 80028e6:	2300      	movs	r3, #0
 80028e8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80028ea:	2300      	movs	r3, #0
 80028ec:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80028ee:	4b1e      	ldr	r3, [pc, #120]	; (8002968 <HAL_RCC_GetSysClockFreq+0x94>)
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	f003 030c 	and.w	r3, r3, #12
 80028fa:	2b04      	cmp	r3, #4
 80028fc:	d002      	beq.n	8002904 <HAL_RCC_GetSysClockFreq+0x30>
 80028fe:	2b08      	cmp	r3, #8
 8002900:	d003      	beq.n	800290a <HAL_RCC_GetSysClockFreq+0x36>
 8002902:	e027      	b.n	8002954 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002904:	4b19      	ldr	r3, [pc, #100]	; (800296c <HAL_RCC_GetSysClockFreq+0x98>)
 8002906:	613b      	str	r3, [r7, #16]
      break;
 8002908:	e027      	b.n	800295a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	0c9b      	lsrs	r3, r3, #18
 800290e:	f003 030f 	and.w	r3, r3, #15
 8002912:	4a17      	ldr	r2, [pc, #92]	; (8002970 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002914:	5cd3      	ldrb	r3, [r2, r3]
 8002916:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800291e:	2b00      	cmp	r3, #0
 8002920:	d010      	beq.n	8002944 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002922:	4b11      	ldr	r3, [pc, #68]	; (8002968 <HAL_RCC_GetSysClockFreq+0x94>)
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	0c5b      	lsrs	r3, r3, #17
 8002928:	f003 0301 	and.w	r3, r3, #1
 800292c:	4a11      	ldr	r2, [pc, #68]	; (8002974 <HAL_RCC_GetSysClockFreq+0xa0>)
 800292e:	5cd3      	ldrb	r3, [r2, r3]
 8002930:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4a0d      	ldr	r2, [pc, #52]	; (800296c <HAL_RCC_GetSysClockFreq+0x98>)
 8002936:	fb02 f203 	mul.w	r2, r2, r3
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002940:	617b      	str	r3, [r7, #20]
 8002942:	e004      	b.n	800294e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	4a0c      	ldr	r2, [pc, #48]	; (8002978 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002948:	fb02 f303 	mul.w	r3, r2, r3
 800294c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	613b      	str	r3, [r7, #16]
      break;
 8002952:	e002      	b.n	800295a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002954:	4b05      	ldr	r3, [pc, #20]	; (800296c <HAL_RCC_GetSysClockFreq+0x98>)
 8002956:	613b      	str	r3, [r7, #16]
      break;
 8002958:	bf00      	nop
    }
  }
  return sysclockfreq;
 800295a:	693b      	ldr	r3, [r7, #16]
}
 800295c:	4618      	mov	r0, r3
 800295e:	371c      	adds	r7, #28
 8002960:	46bd      	mov	sp, r7
 8002962:	bc80      	pop	{r7}
 8002964:	4770      	bx	lr
 8002966:	bf00      	nop
 8002968:	40021000 	.word	0x40021000
 800296c:	007a1200 	.word	0x007a1200
 8002970:	08003208 	.word	0x08003208
 8002974:	08003218 	.word	0x08003218
 8002978:	003d0900 	.word	0x003d0900

0800297c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800297c:	b480      	push	{r7}
 800297e:	b085      	sub	sp, #20
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002984:	4b0a      	ldr	r3, [pc, #40]	; (80029b0 <RCC_Delay+0x34>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a0a      	ldr	r2, [pc, #40]	; (80029b4 <RCC_Delay+0x38>)
 800298a:	fba2 2303 	umull	r2, r3, r2, r3
 800298e:	0a5b      	lsrs	r3, r3, #9
 8002990:	687a      	ldr	r2, [r7, #4]
 8002992:	fb02 f303 	mul.w	r3, r2, r3
 8002996:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002998:	bf00      	nop
  }
  while (Delay --);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	1e5a      	subs	r2, r3, #1
 800299e:	60fa      	str	r2, [r7, #12]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d1f9      	bne.n	8002998 <RCC_Delay+0x1c>
}
 80029a4:	bf00      	nop
 80029a6:	bf00      	nop
 80029a8:	3714      	adds	r7, #20
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bc80      	pop	{r7}
 80029ae:	4770      	bx	lr
 80029b0:	20000044 	.word	0x20000044
 80029b4:	10624dd3 	.word	0x10624dd3

080029b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b082      	sub	sp, #8
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d101      	bne.n	80029ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e041      	b.n	8002a4e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d106      	bne.n	80029e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2200      	movs	r2, #0
 80029da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f7ff f85a 	bl	8001a98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2202      	movs	r2, #2
 80029e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	3304      	adds	r3, #4
 80029f4:	4619      	mov	r1, r3
 80029f6:	4610      	mov	r0, r2
 80029f8:	f000 fa6e 	bl	8002ed8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2201      	movs	r2, #1
 8002a00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2201      	movs	r2, #1
 8002a08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2201      	movs	r2, #1
 8002a10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2201      	movs	r2, #1
 8002a18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2201      	movs	r2, #1
 8002a20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2201      	movs	r2, #1
 8002a28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2201      	movs	r2, #1
 8002a30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2201      	movs	r2, #1
 8002a38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2201      	movs	r2, #1
 8002a40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2201      	movs	r2, #1
 8002a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a4c:	2300      	movs	r3, #0
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3708      	adds	r7, #8
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
	...

08002a58 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b085      	sub	sp, #20
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d001      	beq.n	8002a70 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e035      	b.n	8002adc <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2202      	movs	r2, #2
 8002a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	68da      	ldr	r2, [r3, #12]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f042 0201 	orr.w	r2, r2, #1
 8002a86:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a16      	ldr	r2, [pc, #88]	; (8002ae8 <HAL_TIM_Base_Start_IT+0x90>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d009      	beq.n	8002aa6 <HAL_TIM_Base_Start_IT+0x4e>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a9a:	d004      	beq.n	8002aa6 <HAL_TIM_Base_Start_IT+0x4e>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a12      	ldr	r2, [pc, #72]	; (8002aec <HAL_TIM_Base_Start_IT+0x94>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d111      	bne.n	8002aca <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	f003 0307 	and.w	r3, r3, #7
 8002ab0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2b06      	cmp	r3, #6
 8002ab6:	d010      	beq.n	8002ada <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f042 0201 	orr.w	r2, r2, #1
 8002ac6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ac8:	e007      	b.n	8002ada <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f042 0201 	orr.w	r2, r2, #1
 8002ad8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ada:	2300      	movs	r3, #0
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	3714      	adds	r7, #20
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bc80      	pop	{r7}
 8002ae4:	4770      	bx	lr
 8002ae6:	bf00      	nop
 8002ae8:	40012c00 	.word	0x40012c00
 8002aec:	40000400 	.word	0x40000400

08002af0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b082      	sub	sp, #8
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	691b      	ldr	r3, [r3, #16]
 8002afe:	f003 0302 	and.w	r3, r3, #2
 8002b02:	2b02      	cmp	r3, #2
 8002b04:	d122      	bne.n	8002b4c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	f003 0302 	and.w	r3, r3, #2
 8002b10:	2b02      	cmp	r3, #2
 8002b12:	d11b      	bne.n	8002b4c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f06f 0202 	mvn.w	r2, #2
 8002b1c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2201      	movs	r2, #1
 8002b22:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	699b      	ldr	r3, [r3, #24]
 8002b2a:	f003 0303 	and.w	r3, r3, #3
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d003      	beq.n	8002b3a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f000 f9b4 	bl	8002ea0 <HAL_TIM_IC_CaptureCallback>
 8002b38:	e005      	b.n	8002b46 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	f000 f9a7 	bl	8002e8e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	f000 f9b6 	bl	8002eb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	691b      	ldr	r3, [r3, #16]
 8002b52:	f003 0304 	and.w	r3, r3, #4
 8002b56:	2b04      	cmp	r3, #4
 8002b58:	d122      	bne.n	8002ba0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	f003 0304 	and.w	r3, r3, #4
 8002b64:	2b04      	cmp	r3, #4
 8002b66:	d11b      	bne.n	8002ba0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f06f 0204 	mvn.w	r2, #4
 8002b70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2202      	movs	r2, #2
 8002b76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	699b      	ldr	r3, [r3, #24]
 8002b7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d003      	beq.n	8002b8e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f000 f98a 	bl	8002ea0 <HAL_TIM_IC_CaptureCallback>
 8002b8c:	e005      	b.n	8002b9a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f000 f97d 	bl	8002e8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	f000 f98c 	bl	8002eb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	691b      	ldr	r3, [r3, #16]
 8002ba6:	f003 0308 	and.w	r3, r3, #8
 8002baa:	2b08      	cmp	r3, #8
 8002bac:	d122      	bne.n	8002bf4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	f003 0308 	and.w	r3, r3, #8
 8002bb8:	2b08      	cmp	r3, #8
 8002bba:	d11b      	bne.n	8002bf4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f06f 0208 	mvn.w	r2, #8
 8002bc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2204      	movs	r2, #4
 8002bca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	69db      	ldr	r3, [r3, #28]
 8002bd2:	f003 0303 	and.w	r3, r3, #3
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d003      	beq.n	8002be2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f000 f960 	bl	8002ea0 <HAL_TIM_IC_CaptureCallback>
 8002be0:	e005      	b.n	8002bee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f000 f953 	bl	8002e8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	f000 f962 	bl	8002eb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	691b      	ldr	r3, [r3, #16]
 8002bfa:	f003 0310 	and.w	r3, r3, #16
 8002bfe:	2b10      	cmp	r3, #16
 8002c00:	d122      	bne.n	8002c48 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	f003 0310 	and.w	r3, r3, #16
 8002c0c:	2b10      	cmp	r3, #16
 8002c0e:	d11b      	bne.n	8002c48 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f06f 0210 	mvn.w	r2, #16
 8002c18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2208      	movs	r2, #8
 8002c1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	69db      	ldr	r3, [r3, #28]
 8002c26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d003      	beq.n	8002c36 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f000 f936 	bl	8002ea0 <HAL_TIM_IC_CaptureCallback>
 8002c34:	e005      	b.n	8002c42 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f000 f929 	bl	8002e8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f000 f938 	bl	8002eb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2200      	movs	r2, #0
 8002c46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	691b      	ldr	r3, [r3, #16]
 8002c4e:	f003 0301 	and.w	r3, r3, #1
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d10e      	bne.n	8002c74 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	f003 0301 	and.w	r3, r3, #1
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d107      	bne.n	8002c74 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f06f 0201 	mvn.w	r2, #1
 8002c6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f7fe fc0c 	bl	800148c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	691b      	ldr	r3, [r3, #16]
 8002c7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c7e:	2b80      	cmp	r3, #128	; 0x80
 8002c80:	d10e      	bne.n	8002ca0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c8c:	2b80      	cmp	r3, #128	; 0x80
 8002c8e:	d107      	bne.n	8002ca0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002c98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f000 fa6b 	bl	8003176 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	691b      	ldr	r3, [r3, #16]
 8002ca6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002caa:	2b40      	cmp	r3, #64	; 0x40
 8002cac:	d10e      	bne.n	8002ccc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cb8:	2b40      	cmp	r3, #64	; 0x40
 8002cba:	d107      	bne.n	8002ccc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002cc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f000 f8fc 	bl	8002ec4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	691b      	ldr	r3, [r3, #16]
 8002cd2:	f003 0320 	and.w	r3, r3, #32
 8002cd6:	2b20      	cmp	r3, #32
 8002cd8:	d10e      	bne.n	8002cf8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	f003 0320 	and.w	r3, r3, #32
 8002ce4:	2b20      	cmp	r3, #32
 8002ce6:	d107      	bne.n	8002cf8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f06f 0220 	mvn.w	r2, #32
 8002cf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f000 fa36 	bl	8003164 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002cf8:	bf00      	nop
 8002cfa:	3708      	adds	r7, #8
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}

08002d00 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b084      	sub	sp, #16
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d101      	bne.n	8002d1c <HAL_TIM_ConfigClockSource+0x1c>
 8002d18:	2302      	movs	r3, #2
 8002d1a:	e0b4      	b.n	8002e86 <HAL_TIM_ConfigClockSource+0x186>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2201      	movs	r2, #1
 8002d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2202      	movs	r2, #2
 8002d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002d3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d42:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	68ba      	ldr	r2, [r7, #8]
 8002d4a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d54:	d03e      	beq.n	8002dd4 <HAL_TIM_ConfigClockSource+0xd4>
 8002d56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d5a:	f200 8087 	bhi.w	8002e6c <HAL_TIM_ConfigClockSource+0x16c>
 8002d5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d62:	f000 8086 	beq.w	8002e72 <HAL_TIM_ConfigClockSource+0x172>
 8002d66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d6a:	d87f      	bhi.n	8002e6c <HAL_TIM_ConfigClockSource+0x16c>
 8002d6c:	2b70      	cmp	r3, #112	; 0x70
 8002d6e:	d01a      	beq.n	8002da6 <HAL_TIM_ConfigClockSource+0xa6>
 8002d70:	2b70      	cmp	r3, #112	; 0x70
 8002d72:	d87b      	bhi.n	8002e6c <HAL_TIM_ConfigClockSource+0x16c>
 8002d74:	2b60      	cmp	r3, #96	; 0x60
 8002d76:	d050      	beq.n	8002e1a <HAL_TIM_ConfigClockSource+0x11a>
 8002d78:	2b60      	cmp	r3, #96	; 0x60
 8002d7a:	d877      	bhi.n	8002e6c <HAL_TIM_ConfigClockSource+0x16c>
 8002d7c:	2b50      	cmp	r3, #80	; 0x50
 8002d7e:	d03c      	beq.n	8002dfa <HAL_TIM_ConfigClockSource+0xfa>
 8002d80:	2b50      	cmp	r3, #80	; 0x50
 8002d82:	d873      	bhi.n	8002e6c <HAL_TIM_ConfigClockSource+0x16c>
 8002d84:	2b40      	cmp	r3, #64	; 0x40
 8002d86:	d058      	beq.n	8002e3a <HAL_TIM_ConfigClockSource+0x13a>
 8002d88:	2b40      	cmp	r3, #64	; 0x40
 8002d8a:	d86f      	bhi.n	8002e6c <HAL_TIM_ConfigClockSource+0x16c>
 8002d8c:	2b30      	cmp	r3, #48	; 0x30
 8002d8e:	d064      	beq.n	8002e5a <HAL_TIM_ConfigClockSource+0x15a>
 8002d90:	2b30      	cmp	r3, #48	; 0x30
 8002d92:	d86b      	bhi.n	8002e6c <HAL_TIM_ConfigClockSource+0x16c>
 8002d94:	2b20      	cmp	r3, #32
 8002d96:	d060      	beq.n	8002e5a <HAL_TIM_ConfigClockSource+0x15a>
 8002d98:	2b20      	cmp	r3, #32
 8002d9a:	d867      	bhi.n	8002e6c <HAL_TIM_ConfigClockSource+0x16c>
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d05c      	beq.n	8002e5a <HAL_TIM_ConfigClockSource+0x15a>
 8002da0:	2b10      	cmp	r3, #16
 8002da2:	d05a      	beq.n	8002e5a <HAL_TIM_ConfigClockSource+0x15a>
 8002da4:	e062      	b.n	8002e6c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6818      	ldr	r0, [r3, #0]
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	6899      	ldr	r1, [r3, #8]
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	685a      	ldr	r2, [r3, #4]
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	68db      	ldr	r3, [r3, #12]
 8002db6:	f000 f95e 	bl	8003076 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002dc8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	68ba      	ldr	r2, [r7, #8]
 8002dd0:	609a      	str	r2, [r3, #8]
      break;
 8002dd2:	e04f      	b.n	8002e74 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6818      	ldr	r0, [r3, #0]
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	6899      	ldr	r1, [r3, #8]
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	685a      	ldr	r2, [r3, #4]
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	f000 f947 	bl	8003076 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	689a      	ldr	r2, [r3, #8]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002df6:	609a      	str	r2, [r3, #8]
      break;
 8002df8:	e03c      	b.n	8002e74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6818      	ldr	r0, [r3, #0]
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	6859      	ldr	r1, [r3, #4]
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	68db      	ldr	r3, [r3, #12]
 8002e06:	461a      	mov	r2, r3
 8002e08:	f000 f8be 	bl	8002f88 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	2150      	movs	r1, #80	; 0x50
 8002e12:	4618      	mov	r0, r3
 8002e14:	f000 f915 	bl	8003042 <TIM_ITRx_SetConfig>
      break;
 8002e18:	e02c      	b.n	8002e74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6818      	ldr	r0, [r3, #0]
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	6859      	ldr	r1, [r3, #4]
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	68db      	ldr	r3, [r3, #12]
 8002e26:	461a      	mov	r2, r3
 8002e28:	f000 f8dc 	bl	8002fe4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	2160      	movs	r1, #96	; 0x60
 8002e32:	4618      	mov	r0, r3
 8002e34:	f000 f905 	bl	8003042 <TIM_ITRx_SetConfig>
      break;
 8002e38:	e01c      	b.n	8002e74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6818      	ldr	r0, [r3, #0]
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	6859      	ldr	r1, [r3, #4]
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	461a      	mov	r2, r3
 8002e48:	f000 f89e 	bl	8002f88 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	2140      	movs	r1, #64	; 0x40
 8002e52:	4618      	mov	r0, r3
 8002e54:	f000 f8f5 	bl	8003042 <TIM_ITRx_SetConfig>
      break;
 8002e58:	e00c      	b.n	8002e74 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4619      	mov	r1, r3
 8002e64:	4610      	mov	r0, r2
 8002e66:	f000 f8ec 	bl	8003042 <TIM_ITRx_SetConfig>
      break;
 8002e6a:	e003      	b.n	8002e74 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	73fb      	strb	r3, [r7, #15]
      break;
 8002e70:	e000      	b.n	8002e74 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002e72:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2201      	movs	r2, #1
 8002e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002e84:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3710      	adds	r7, #16
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}

08002e8e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e8e:	b480      	push	{r7}
 8002e90:	b083      	sub	sp, #12
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e96:	bf00      	nop
 8002e98:	370c      	adds	r7, #12
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bc80      	pop	{r7}
 8002e9e:	4770      	bx	lr

08002ea0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b083      	sub	sp, #12
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002ea8:	bf00      	nop
 8002eaa:	370c      	adds	r7, #12
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bc80      	pop	{r7}
 8002eb0:	4770      	bx	lr

08002eb2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002eb2:	b480      	push	{r7}
 8002eb4:	b083      	sub	sp, #12
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002eba:	bf00      	nop
 8002ebc:	370c      	adds	r7, #12
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bc80      	pop	{r7}
 8002ec2:	4770      	bx	lr

08002ec4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b083      	sub	sp, #12
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ecc:	bf00      	nop
 8002ece:	370c      	adds	r7, #12
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bc80      	pop	{r7}
 8002ed4:	4770      	bx	lr
	...

08002ed8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b085      	sub	sp, #20
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
 8002ee0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	4a25      	ldr	r2, [pc, #148]	; (8002f80 <TIM_Base_SetConfig+0xa8>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d007      	beq.n	8002f00 <TIM_Base_SetConfig+0x28>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ef6:	d003      	beq.n	8002f00 <TIM_Base_SetConfig+0x28>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	4a22      	ldr	r2, [pc, #136]	; (8002f84 <TIM_Base_SetConfig+0xac>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d108      	bne.n	8002f12 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	68fa      	ldr	r2, [r7, #12]
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4a1a      	ldr	r2, [pc, #104]	; (8002f80 <TIM_Base_SetConfig+0xa8>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d007      	beq.n	8002f2a <TIM_Base_SetConfig+0x52>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f20:	d003      	beq.n	8002f2a <TIM_Base_SetConfig+0x52>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	4a17      	ldr	r2, [pc, #92]	; (8002f84 <TIM_Base_SetConfig+0xac>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d108      	bne.n	8002f3c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	68db      	ldr	r3, [r3, #12]
 8002f36:	68fa      	ldr	r2, [r7, #12]
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	695b      	ldr	r3, [r3, #20]
 8002f46:	4313      	orrs	r3, r2
 8002f48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	68fa      	ldr	r2, [r7, #12]
 8002f4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	689a      	ldr	r2, [r3, #8]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	4a07      	ldr	r2, [pc, #28]	; (8002f80 <TIM_Base_SetConfig+0xa8>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d103      	bne.n	8002f70 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	691a      	ldr	r2, [r3, #16]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2201      	movs	r2, #1
 8002f74:	615a      	str	r2, [r3, #20]
}
 8002f76:	bf00      	nop
 8002f78:	3714      	adds	r7, #20
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bc80      	pop	{r7}
 8002f7e:	4770      	bx	lr
 8002f80:	40012c00 	.word	0x40012c00
 8002f84:	40000400 	.word	0x40000400

08002f88 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b087      	sub	sp, #28
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	60f8      	str	r0, [r7, #12]
 8002f90:	60b9      	str	r1, [r7, #8]
 8002f92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	6a1b      	ldr	r3, [r3, #32]
 8002f98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	6a1b      	ldr	r3, [r3, #32]
 8002f9e:	f023 0201 	bic.w	r2, r3, #1
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	699b      	ldr	r3, [r3, #24]
 8002faa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002fb2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	011b      	lsls	r3, r3, #4
 8002fb8:	693a      	ldr	r2, [r7, #16]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	f023 030a 	bic.w	r3, r3, #10
 8002fc4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002fc6:	697a      	ldr	r2, [r7, #20]
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	693a      	ldr	r2, [r7, #16]
 8002fd2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	697a      	ldr	r2, [r7, #20]
 8002fd8:	621a      	str	r2, [r3, #32]
}
 8002fda:	bf00      	nop
 8002fdc:	371c      	adds	r7, #28
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bc80      	pop	{r7}
 8002fe2:	4770      	bx	lr

08002fe4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b087      	sub	sp, #28
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	60f8      	str	r0, [r7, #12]
 8002fec:	60b9      	str	r1, [r7, #8]
 8002fee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	6a1b      	ldr	r3, [r3, #32]
 8002ff4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	6a1b      	ldr	r3, [r3, #32]
 8002ffa:	f023 0210 	bic.w	r2, r3, #16
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	699b      	ldr	r3, [r3, #24]
 8003006:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800300e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	031b      	lsls	r3, r3, #12
 8003014:	693a      	ldr	r2, [r7, #16]
 8003016:	4313      	orrs	r3, r2
 8003018:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003020:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	011b      	lsls	r3, r3, #4
 8003026:	697a      	ldr	r2, [r7, #20]
 8003028:	4313      	orrs	r3, r2
 800302a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	693a      	ldr	r2, [r7, #16]
 8003030:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	697a      	ldr	r2, [r7, #20]
 8003036:	621a      	str	r2, [r3, #32]
}
 8003038:	bf00      	nop
 800303a:	371c      	adds	r7, #28
 800303c:	46bd      	mov	sp, r7
 800303e:	bc80      	pop	{r7}
 8003040:	4770      	bx	lr

08003042 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003042:	b480      	push	{r7}
 8003044:	b085      	sub	sp, #20
 8003046:	af00      	add	r7, sp, #0
 8003048:	6078      	str	r0, [r7, #4]
 800304a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003058:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800305a:	683a      	ldr	r2, [r7, #0]
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	4313      	orrs	r3, r2
 8003060:	f043 0307 	orr.w	r3, r3, #7
 8003064:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	68fa      	ldr	r2, [r7, #12]
 800306a:	609a      	str	r2, [r3, #8]
}
 800306c:	bf00      	nop
 800306e:	3714      	adds	r7, #20
 8003070:	46bd      	mov	sp, r7
 8003072:	bc80      	pop	{r7}
 8003074:	4770      	bx	lr

08003076 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003076:	b480      	push	{r7}
 8003078:	b087      	sub	sp, #28
 800307a:	af00      	add	r7, sp, #0
 800307c:	60f8      	str	r0, [r7, #12]
 800307e:	60b9      	str	r1, [r7, #8]
 8003080:	607a      	str	r2, [r7, #4]
 8003082:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003090:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	021a      	lsls	r2, r3, #8
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	431a      	orrs	r2, r3
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	4313      	orrs	r3, r2
 800309e:	697a      	ldr	r2, [r7, #20]
 80030a0:	4313      	orrs	r3, r2
 80030a2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	697a      	ldr	r2, [r7, #20]
 80030a8:	609a      	str	r2, [r3, #8]
}
 80030aa:	bf00      	nop
 80030ac:	371c      	adds	r7, #28
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bc80      	pop	{r7}
 80030b2:	4770      	bx	lr

080030b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b085      	sub	sp, #20
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
 80030bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d101      	bne.n	80030cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80030c8:	2302      	movs	r3, #2
 80030ca:	e041      	b.n	8003150 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2201      	movs	r2, #1
 80030d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2202      	movs	r2, #2
 80030d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	68fa      	ldr	r2, [r7, #12]
 80030fa:	4313      	orrs	r3, r2
 80030fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	68fa      	ldr	r2, [r7, #12]
 8003104:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a14      	ldr	r2, [pc, #80]	; (800315c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d009      	beq.n	8003124 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003118:	d004      	beq.n	8003124 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a10      	ldr	r2, [pc, #64]	; (8003160 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d10c      	bne.n	800313e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800312a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	68ba      	ldr	r2, [r7, #8]
 8003132:	4313      	orrs	r3, r2
 8003134:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	68ba      	ldr	r2, [r7, #8]
 800313c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2201      	movs	r2, #1
 8003142:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2200      	movs	r2, #0
 800314a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800314e:	2300      	movs	r3, #0
}
 8003150:	4618      	mov	r0, r3
 8003152:	3714      	adds	r7, #20
 8003154:	46bd      	mov	sp, r7
 8003156:	bc80      	pop	{r7}
 8003158:	4770      	bx	lr
 800315a:	bf00      	nop
 800315c:	40012c00 	.word	0x40012c00
 8003160:	40000400 	.word	0x40000400

08003164 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003164:	b480      	push	{r7}
 8003166:	b083      	sub	sp, #12
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800316c:	bf00      	nop
 800316e:	370c      	adds	r7, #12
 8003170:	46bd      	mov	sp, r7
 8003172:	bc80      	pop	{r7}
 8003174:	4770      	bx	lr

08003176 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003176:	b480      	push	{r7}
 8003178:	b083      	sub	sp, #12
 800317a:	af00      	add	r7, sp, #0
 800317c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800317e:	bf00      	nop
 8003180:	370c      	adds	r7, #12
 8003182:	46bd      	mov	sp, r7
 8003184:	bc80      	pop	{r7}
 8003186:	4770      	bx	lr

08003188 <__libc_init_array>:
 8003188:	b570      	push	{r4, r5, r6, lr}
 800318a:	2600      	movs	r6, #0
 800318c:	4d0c      	ldr	r5, [pc, #48]	; (80031c0 <__libc_init_array+0x38>)
 800318e:	4c0d      	ldr	r4, [pc, #52]	; (80031c4 <__libc_init_array+0x3c>)
 8003190:	1b64      	subs	r4, r4, r5
 8003192:	10a4      	asrs	r4, r4, #2
 8003194:	42a6      	cmp	r6, r4
 8003196:	d109      	bne.n	80031ac <__libc_init_array+0x24>
 8003198:	f000 f822 	bl	80031e0 <_init>
 800319c:	2600      	movs	r6, #0
 800319e:	4d0a      	ldr	r5, [pc, #40]	; (80031c8 <__libc_init_array+0x40>)
 80031a0:	4c0a      	ldr	r4, [pc, #40]	; (80031cc <__libc_init_array+0x44>)
 80031a2:	1b64      	subs	r4, r4, r5
 80031a4:	10a4      	asrs	r4, r4, #2
 80031a6:	42a6      	cmp	r6, r4
 80031a8:	d105      	bne.n	80031b6 <__libc_init_array+0x2e>
 80031aa:	bd70      	pop	{r4, r5, r6, pc}
 80031ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80031b0:	4798      	blx	r3
 80031b2:	3601      	adds	r6, #1
 80031b4:	e7ee      	b.n	8003194 <__libc_init_array+0xc>
 80031b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80031ba:	4798      	blx	r3
 80031bc:	3601      	adds	r6, #1
 80031be:	e7f2      	b.n	80031a6 <__libc_init_array+0x1e>
 80031c0:	0800321c 	.word	0x0800321c
 80031c4:	0800321c 	.word	0x0800321c
 80031c8:	0800321c 	.word	0x0800321c
 80031cc:	08003220 	.word	0x08003220

080031d0 <memset>:
 80031d0:	4603      	mov	r3, r0
 80031d2:	4402      	add	r2, r0
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d100      	bne.n	80031da <memset+0xa>
 80031d8:	4770      	bx	lr
 80031da:	f803 1b01 	strb.w	r1, [r3], #1
 80031de:	e7f9      	b.n	80031d4 <memset+0x4>

080031e0 <_init>:
 80031e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031e2:	bf00      	nop
 80031e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031e6:	bc08      	pop	{r3}
 80031e8:	469e      	mov	lr, r3
 80031ea:	4770      	bx	lr

080031ec <_fini>:
 80031ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031ee:	bf00      	nop
 80031f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031f2:	bc08      	pop	{r3}
 80031f4:	469e      	mov	lr, r3
 80031f6:	4770      	bx	lr
